/*
--------------------------------------------------------------------------------
================================================================================
                          +:
WWW@*WWWWWWW+  *WWWWWWW*  :=@       @WWWWWWWWW*WWW*  =WWW*WWWWWWWWWW@*WWW+  @WW
WWW@*WWWWWWWWW**WWWWWWWWW=   =*     @WWWWWWWWW*WWW*  =WWW*WWWWWWWWWW@*WWW+  @WW
WWW@*WWW+  WWWW*WWW*  @WWW :WWWWWW+ @WWW*    *+WWW*  =WWW*WWW#=#WWWW#*WWWWW@@WW
WWW@*WWW+  @WWW*WWW*  #WWW @WWWWWWW @WWW#WWWW@+WWW*  =WWW*WWW#WWWWW* *WWWWW@@WW
WWW@*WWW@  @WWW*WWW*  #WWW += =# += @WWW      +WWWW: =WWW*WWW=  @WWW@      *WWW
WWW@ *WWWWWWWWW*WWW*  #WWW   =WW@   @WWW       :WWWWWWWWW*WWW=   WWW@:WWWWWWWW@
@@@@   +@@@@@@@+@@@+  #WWW          @WWW         :WWWWWWW+W@@=   @@@@:@@@@@@#

###############################################################################
Ion Fury
Code by Jonathan Strander, Fox Martins, Richard Gobeille, Evan Ramos
        and Dino Bollinger
All code as written belongs to Voidpoint and the respective authors.
(c) 2019-2021 Voidpoint, LLC
--------------------------------------------------------------------------------
While we encourage you to experiment, modifications are allowed WITHOUT any
warranty or guarantee of support. Editing these files is AT YOUR OWN RISK, and
we encourage you to make backups.
--------------------------------------------------------------------------------

NOTES:
This file contains most of the moveable props in the game, as well as some other
odds and ends such as bugs and pizza boxes.
================================================================================
--------------------------------------------------------------------------------
*/
action AC_BASE 0 1 1 1 1
action AC_BASE1 1 1 1 1 1
action AC_BASE12 0 1 12 1 1
action AC_BASE_MINUS -1 1 1 1 1
var prop_alt 0 2
var prop_angvel_off 0 2

var prop_spawn 0 2
var prop_fall 0 2
var prop_lastfloorz 0 2
var prop_dmg_build 0 2
var prop_pushsound
// these will all change to unique code soon
// don't do any unhelpful unifying of this code
// >> sorry, I had to ~bdino

var moveable_ox 0 2
var moveable_oy 0 2
var moveable_x 0 2
var moveable_y 0 2
var moveable_ocd 0 2
var moveable_osect 0 2
var moveable_return 0 0

defstate do_moveable
    ife actor_moveable 0
    {
        geta .cstat temp4
        ifand temp4 32768
        {
            ifspawnedby A_PARTICLE_SPAWNER
                xor temp4 32768
            else ifspawnedby A_NEWRESPAWN
                xor temp4 32768
            else ifspawnedby RESPAWN
                xor temp4 32768
            seta .cstat temp4
        }
    }
    set actor_moveable 1
    set temp4 tilesizy[sprite[].picnum]
    shiftl temp4 2
    mul temp4 sprite[].yrepeat
    set temp3 sprite[].z
    sub temp3 temp4
    getceilzofslope sprite[].sectnum sprite[].x sprite[].y temp5
    ifand sector.ceilingstat 512
        ifand sector.ceilingstat 1024
            set temp5 temp3
    ifand sector.floorstat 512
        ifand sector.floorstat 1024
            set temp5 temp3
    ifand sector.ceilingstat 128
        ifand sector.ceilingstat 1024
            set temp5 temp3
    ifand sector.floorstat 128
        ifand sector.floorstat 1024
            set temp5 temp3
    iffloordistl 1 ifg temp5 temp3
    {
        switch sprite[].picnum
            case A_CHAIR_BOTTOM:
            case A_CHAIR_BOTTOM_2:
            case A_LAMP:
            case A_LAMP_FLOOR:
            case A_TRASHCAN_DEAD:
            case A_TRASHCAN_DMG_2:
            case A_GARBAGE_DEAD:
            case A_GARBAGE_DMG_2:
            case A_REDSWINGLINE:
            case A_MIKE:
            case A_POTPLANT_1:
            case A_POTPLANT_2:
            case A_POTPLANT_3:
            case A_POTPLANT_4:
            case A_POTPLANT_5:
                geta[].htextra temp
                add temp 60
                seta[].htextra temp
                ifg temp sprite[].extra
                {
                    setp[].sound_pitch -768
                    soundonce S_SMASH_GLASSLAMP
                    soundonce S_IMPACT_MUGSMASH
                    setp[].sound_pitch 0
                    killit
                }
                break
            default
                geta[].htextra temp
                add temp 60
                seta[].htextra temp
                ifg temp sprite[].extra
                {
                    setp[].sound_pitch -768
                    soundonce S_SMASH_GLASSLAMP
                    soundonce S_IMPACT_MUGSMASH
                    setp[].sound_pitch 0
                }
                break
        endswitch
    }
    ifg prop_heavy 0
    {
        div actor_moveable_xv prop_heavy
        div actor_moveable_yv prop_heavy
    }
    set temp actor_moveable_xv
    add temp actor_moveable_yv
    getflorzofslope sprite[].sectnum sprite[].x sprite[].y temp2
    ifn temp2 prop_lastfloorz
    {
        fall
        set prop_fall 1
        iffloordistl 1
            set prop_lastfloorz temp2
    }
    shiftr prop_angvel 2
    ifn temp 0
    {
        getangle temp2 actor_moveable_xv actor_moveable_yv
        sub temp2 sprite.ang
        set temp3 actor_moveable_xv
        set temp4 actor_moveable_yv
        abs temp3
        abs temp4
        add temp3 temp4
        ifn temp3 0
            ifn temp2 0
            {
                mul temp2 temp3
                shiftr temp2 12
            }
        add prop_angvel temp2
        ifg prop_angvel_off 1
            div prop_angvel prop_angvel_off
        else ifl prop_angvel_off 0
            set prop_angvel 0
        geta .ang temp2
        add temp2 prop_angvel
        and temp2 2047
        seta .ang temp2

        fall
        set prop_fall 1
        geta[].clipdist moveable_ocd
        geta[].sectnum moveable_osect
        geta[].x moveable_ox
        geta[].y moveable_oy
        movesprite THISACTOR actor_moveable_xv actor_moveable_yv 0 CLIPMASK0 temp

        set temp4 sprite[].sectnum
        updatesector sprite[].x sprite[].y temp4
        ife temp4 -1
        {
            seta[].x moveable_ox
            seta[].y moveable_oy
            seta[].sectnum moveable_osect
            switch sprite[].picnum
                case A_TRASHCAN_LID
                    ifl counter 3
                        nullop
                    else
                        movesprite THISACTOR -actor_moveable_xv -actor_moveable_yv 0 CLIPMASK0 temp
                    break
                default
                    movesprite THISACTOR -actor_moveable_xv -actor_moveable_yv 0 CLIPMASK0 temp
                    break
            endswitch
        }
        set moveable_return temp
        ifg temp 49151
        {
            sub temp 49152
            getav[temp].actor_moveable temp2
            ife temp2 1
            {
                getav[temp].actor_moveable_xv temp2
                set temp3 actor_moveable_xv
                shiftr temp3 2
                ifl temp3 2 ifg temp3 -2
                    set temp3 0
                add temp2 temp3
                setav[temp].actor_moveable_xv temp2
                set temp5 temp2

                getav[temp].actor_moveable_yv temp2
                set temp3 actor_moveable_yv
                shiftr temp3 2
                ifl temp3 2 ifg temp3 -2
                    set temp3 0
                add temp2 temp3
                setav[temp].actor_moveable_yv temp2
                inv temp5
                inv temp2
                add actor_moveable_xv temp5
                add actor_moveable_yv temp2
            }
        }
        ifn prop_adjustmass 0
        {
            set temp3 prop_adjustmass
            add temp3 1
            mul actor_moveable_xv prop_adjustmass
            mul actor_moveable_yv prop_adjustmass
            div actor_moveable_xv temp3
            div actor_moveable_yv temp3
        }
        else
        {
            shiftr actor_moveable_xv 1
            shiftr actor_moveable_yv 1
        }

        ifl actor_moveable_xv 2 ifg actor_moveable_xv -2
            set actor_moveable_xv 0
        ifl actor_moveable_yv 2 ifg actor_moveable_yv -2
            set actor_moveable_yv 0
        set temp2 actor_moveable_xv
        set temp5 actor_moveable_yv
        abs temp2
        abs temp5
        add temp2 temp5
        ifn temp2 0 ife prop_pushsound 1
            soundonce S_OBJECT_PUSH
        else
            stopactorsound THISACTOR S_OBJECT_PUSH
    }
    else ife prop_fall 1
        fall
ends

// placed here because of dependencies
include scripts/exp/battleship.con // required because of dependencies
include scripts/exp/props.con

appendevent EVENT_SETDEFAULTS
    setuserdef[].shadow_pal 77
endevent

defstate barrel_color
    switch sprite[].pal
        case PAL_BARREL_GAS
        case PAL_BARREL_GAS_A
        case PAL_BARREL_GAS_B
        case PAL_BARREL_GAS_C
        case PAL_BARREL_GAS_D
        case PAL_BARREL_GAS_E
        case PAL_BARREL_GAS_F
        case PAL_BARREL_GAS_G
        case PAL_BARREL_GAS_H
        case PAL_BARREL_GAS_I
        case PAL_BARREL_GAS_J
        case PAL_BARREL_GAS_K
        case PAL_BARREL_GAS_L
        case PAL_BARREL_GAS_M
            set prop_barrel_type 1
            break
        case PAL_BARREL_EXPLOSIVE_A
        case PAL_BARREL_EXPLOSIVE_B
        case PAL_BARREL_EXPLOSIVE_C
        case PAL_BARREL_EXPLOSIVE_D
            break
        case 9 // more reds
        case 26
        default
            spritepal PAL_BARREL_EXPLOSIVE
            break
    endswitch
ends
appendevent EVENT_SPAWN
    switch sprite[THISACTOR].picnum
        case A_CHAIR_1:
        case A_CHAIR_1_DMG:
        case A_CHAIR_BOTTOM:
            ife sprite[].pal 0
                seta[].pal 20
        case A_FIREEXT:
        case A_CHAIR_2:
        case A_CHAIR_2_DMG:
        case A_CHAIR_BOTTOM_2:
        case A_BARREL_1:
        case A_BARREL_2:
        case A_BARREL_GIB:
        case A_LAMP:
        case A_LAMP_OFF:
        case A_TRASHCAN:
        case A_TRASHCAN_DMG_1:
        case A_TRASHCAN_DMG_2:
        case A_TRASHBIN
        // case A_GARBAGE:
        case A_CANISTER_1:
        case A_CANISTER_2:
        case A_SHOCKCANISTER
        case A_SHOCKCANISTER_BROKE
        case A_JUG_1:
        case A_JUG_2:
        case A_PAPERTOWEL:
        case A_TOILETPAPER:
        case A_UNBREAKABLE:
        case A_SERUM_HANGER:
        case A_RAKE:
        case A_SHOVEL:
            getflorzofslope sprite[].sectnum sprite[].x sprite[].y prop_lastfloorz
            sizeat 24 20
            cstator 257
            ifrnd 128
                cstator 4
            geta[].hitag se_hitag
            seta[].hitag 0
            ifactor A_UNBREAKABLE
                spritepal 0
            break
        case A_GARBAGE:
        case A_GARBAGE_DMG_1:
        case A_GARBAGE_DMG_2:
            getflorzofslope sprite[].sectnum sprite[].x sprite[].y prop_lastfloorz
            cstator 257
            ifrnd 128
                cstator 4
            break
        case A_HYDRANT_1:
            getflorzofslope sprite[].sectnum sprite[].x sprite[].y prop_lastfloorz
            sizeat 32 28
            cstator 257
            break
        case A_BOTTLE_1:
        case A_BOTTLESIDE_1:
        case A_BOTTLE_2:
        case A_BOTTLE_2_EMPTY:
            getflorzofslope sprite[].sectnum sprite[].x sprite[].y prop_lastfloorz
            sizeat 16 12
            cstator 259
            seta .blend 10
            break
        case A_SODA_1:
        case A_SODASIDE_1:
            getflorzofslope sprite[].sectnum sprite[].x sprite[].y prop_lastfloorz
            sizeat 16 14
            cstator 257
            break
        case A_REDSWINGLINE:
            getflorzofslope sprite[].sectnum sprite[].x sprite[].y prop_lastfloorz
            sizeat 18 14
            cstator 257
            break
        case A_MIKE:
            getflorzofslope sprite[].sectnum sprite[].x sprite[].y prop_lastfloorz
            sizeat 15 12
            cstator 257
            geta .lotag se_lotag
            geta .hitag se_hitag
            seta .lotag 0
            seta .hitag 0
            break
        case A_BUCKET_1:
            ife sprite[].pal 0
                seta[].pal 1
        case A_BROOM_1:
        case A_MOP_1:
        case A_BEAKER_1:
        case A_BEAKER_2:
        case A_BEAKER_3:
        case A_BONG:
            getflorzofslope sprite[].sectnum sprite[].x sprite[].y prop_lastfloorz
            sizeat 19 16
            cstator 257
            break
        case A_TEACUP_1:
        case A_COFFEEMUG_1:
            getflorzofslope sprite[].sectnum sprite[].x sprite[].y prop_lastfloorz
            sizeat 17 13
            cstator 257
            clipdist 16
            break
        case A_LAMP_FLOOR:
        case A_LAMP_FLOOR_OFF:
            getflorzofslope sprite[].sectnum sprite[].x sprite[].y prop_lastfloorz
            sizeat 29 28
            cstator 257
            ifrnd 128
                cstator 4
            break
        case A_COFFEEPOT:
            getflorzofslope sprite[].sectnum sprite[].x sprite[].y prop_lastfloorz
            sizeat 15 12
            cstator 257
            break
        case A_WATERGLASS_EMPTY
        case A_WATERGLASS_FULL
        case A_MARTINIGLASS_EMPTY
        case A_MARTINIGLASS_FULL
        case A_CHAMPAGNEGLASS_EMPTY
        case A_CHAMPAGNEGLASS_FULL
        case A_WINEGLASS_EMPTY
        case A_WINEGLASS_FULL
        case A_BEERGLASS_EMPTY
        case A_BEERGLASS_FULL
            cstator 259
            getflorzofslope sprite[].sectnum sprite[].x sprite[].y prop_lastfloorz
            ifspritepal 27
                sizeat 29 30
            else
                sizeat 20 15
            break
        case A_SHAKER_EMPTY
        case A_SHAKER_FULL_1
        case A_SHAKER_FULL_2
            cstator 259
            getflorzofslope sprite[].sectnum sprite[].x sprite[].y prop_lastfloorz
            sizeat 20 15
            break
        case A_PLATE:
        case A_PLATE_DESSERT:
        case A_PLATE_STACK:
            getflorzofslope sprite[].sectnum sprite[].x sprite[].y prop_lastfloorz
            sizeat 21 16
            cstator 257
            break
        case A_GLASSCLEANER:
        case A_DETERGENT:
        case A_HANDSOAP:
            geta .cstat prop_lastfloorz
            ifand prop_lastfloorz 4
                xor prop_lastfloorz 4
            ifand prop_lastfloorz 8
                xor prop_lastfloorz 8
            seta .cstat prop_lastfloorz
            getflorzofslope sprite[].sectnum sprite[].x sprite[].y prop_lastfloorz
            sizeat 20 15
            cstator 257
            
            break
        case A_POTPLANT_1:
        case A_POTPLANT_2:
        case A_POTPLANT_3:
        case A_POTPLANT_4:
        case A_POTPLANT_5:
            getflorzofslope sprite[].sectnum sprite[].x sprite[].y prop_lastfloorz
            ife sprite[].pal 0 seta[].pal 20
            cstator 257
            break
        case A_GASCAN:
            getflorzofslope sprite[].sectnum sprite[].x sprite[].y prop_lastfloorz
            sizeat 23 19
            cstator 257
            break
        case A_MONITOR_1
        case A_MONITOR_2
        case A_MONITOR_3
        case A_MONITOR_15
        case A_MONITOR_16
        case A_MONITOR_4
        case A_MONITOR_4_REAL
        case A_MONITOR_5
        case A_MONITOR_6
        case A_MONITOR_7
        case A_MONITOR_8
        case A_MONITOR_9
        case A_MONITOR_10
        case A_MONITOR_11
        case A_MONITOR_12
        case A_MONITOR_13
        case A_MONITOR_14
        case A_MONITOR_17
        case A_MONITOR_2_3_BROKE_LG
        case A_MONITOR_2_LG
        case A_MONITOR_3_LG
        case A_MONITOR_17_LG
        case A_MONITOR_STATIC
            geta .hitag se_hitag
            seta . hitag 0
            sleeptime 300
            changespritestat THISACTOR STAT_ACTOR
            break
    endswitch
    switch sprite[].picnum
        case A_BARREL_1:
        case A_BARREL_2:
        case A_BARREL_GIB:
            state barrel_color
            ifspawnedby A_NEWRESPAWN
                set prop_lastfloorz sprite[].z
            break
        case A_CANISTER_2
            spritepal PAL_CANISTER_EXPLOSIVE
            break
		default
            ifn exp_aftershock 0
	        state ashock_prop_spawn_extensions
	    break
    endswitch
    ifg prop_noprop 1
        changespritestat THISACTOR prop_noprop
endevent

action AC_FIREEXT_DEAD 1 1 1 1 1
eventloadactor A_FIREEXT
    ifn sprite[].lotag 0
    {
        geta[].lotag se_lotag
        seta[].lotag 0
    }
enda
actor A_FIREEXT 10 AC_BASE
    clipdist 24
    strength 10
    ifhitweapon
    {
        rand temp3 1
        add temp3 1
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_METAL
            ifspritepal 0
                seta[RETURN].pal 9
            else
                seta[RETURN].pal sprite[].pal
            rand temp4 2047
            seta[RETURN].ang temp4
        }
        ifaction AC_FIREEXT_DEAD
            ifl sprite[].htg_t 2 60
                seta[].htg_t 2 60
        ifaction AC_BASE
        {
            setp[].sound_pitch 512
            sound S_AMB_PIPEHISS2
            setp[].sound_pitch 0
            action AC_FIREEXT_DEAD
            geta[].htang st_do_once
            add st_do_once 1024
            and st_do_once 2047
        }
    }
    seta[].shade sprite[].shade
    ifaction AC_FIREEXT_DEAD
    {
        geta .ang temp8
        seta .ang st_do_once
        set temp4 counter
        and temp4 7
        ife temp4 0
        {
            rand temp4 2048
            ifrnd 127
                inv temp4
            ezshoot temp4 P_SMOKE2
            geta .xrepeat temp4
            shiftr temp4 4
            clamp temp4 1 80
            setthisprojectile[RETURN].txrepeat 1
            setthisprojectile[RETURN].tyrepeat 1
            set temp4 480
            set temp3 counter
            shiftl temp3 1
            sub temp4 temp3
            seta[RETURN].xvel temp4
        }
        add counter 1
        ifactioncount 65
        {
            stopactorsound THISACTOR S_AMB_PIPEHISS2
            killit
        }
        else ifactioncount 61
            nullop
        else ifactioncount 60
        {
            rand temp3 12
            add temp3 15
            for itervar range temp3
            {
                espawn A_GENERIC_DEBRIS
                setav[RETURN].debris_type DEBRIS_METAL
                ifspritepal 0
                    seta[RETURN].pal 9
                else
                    seta[RETURN].pal sprite[].pal
                rand temp4 2047
                seta[RETURN].ang temp4
            }
            espawn A_SMOKE2
            seta[RETURN].xrepeat 96
            seta[RETURN].yrepeat 96
            seta[RETURN].cstat 32768
            geta[].z temp
            sub temp 4096
            seta[RETURN].z temp

            espawn A_SMOKE2
            seta[RETURN].xrepeat 255
            seta[RETURN].yrepeat 255
            seta[RETURN].cstat 32768
            geta .z temp
            sub temp 4096
            seta[RETURN].z temp


            espawn A_EXPLOSION
            seta[RETURN].xrepeat 32
            seta[RETURN].yrepeat 32
            seta[RETURN].cstat 32768
            geta .z temp
            add temp 0
            setav[RETURN].smoke_offset 2048
            seta[RETURN].z temp
            set counter 1
            hitradius 1536 10 20 30 40
            cstat 32768
            ifn se_lotag 0
                state switch_activate
        }
        seta .ang temp8
    }
enda

action AC_DMG_1 1 1 1 1 1
action AC_DMG_2 2 1 1 1 1
action AC_BASE_EXP_2 2 3 1 1 4
action AC_BASE_EXP 0 3 1 1 4

var barrel_delay 0 2
var barrel_dmg_count 0 2
defstate barreldmg
    ifg barrel_delay 0
    {
        sub barrel_delay 1
        ifhitweapon
        {
            ifwasweapon EXPLOSION
                set barrel_delay 6
        }
        break
    }
    ifdead
    {
        seta[].ang sprite[].htang
        set move_v 100
        state move_actor
        add actor_moveable_xv move_xv
        add actor_moveable_yv move_yv
        ifaction AC_BASE_EXP_2
            nullop
        else
            action AC_BASE_EXP_2
        ifactioncount 3
        {
            ife sprite.htg_t 2 3
            {
                rand temp3 6
                add temp3 10
                shiftr temp3 1
                for itervar range temp3
                {
                    espawn A_GENERIC_DEBRIS
                    setav[RETURN].debris_type DEBRIS_METAL
                    seta[RETURN].pal sprite[].pal
                    rand temp4 2047
                    seta[RETURN].ang temp4
                }
            }
            ife counter3 0
            {
                espawn A_BARREL_GIB
                seta[RETURN].pal sprite.pal
                seta[RETURN].zvel sprite.zvel
                set temp7 actor_moveable_xv
                shiftr temp7 2
                setav[RETURN].actor_moveable_xv temp7
                set temp7 actor_moveable_yv
                shiftr temp7 2
                setav[RETURN].actor_moveable_yv temp7
                set counter3 1
            }
            ife prop_barrel_type 1
            {
                rand temp7 5
                add temp7 2
                ifl sprite .htg_t 2 5
                {
                    espawn A_SMOKE2
                    geta[].z temp
                    rand temp2 512
                    sub temp2 2048
                    add temp temp2
                    seta[RETURN].z temp
                    rand temp 8
                    add temp 24
                    seta[RETURN].xrepeat temp
                    seta[RETURN].yrepeat temp
                    seta[RETURN].cstat 32768
                    setav[RETURN].prop_barrel_type 2
                }
                for itervar range temp7
                {
                    espawn A_SMOKE2
                    geta[].z temp
                    rand temp2 512
                    sub temp2 2048
                    add temp temp2
                    seta[RETURN].z temp
                    rand temp 8
                    add temp 48
                    seta[RETURN].xrepeat temp
                    seta[RETURN].yrepeat temp
                    rand temp 4096
                    shiftl temp 1
                    inv temp
                    set temp2 itervar
                    shiftl temp2 3
                    sub temp temp2
                    seta[RETURN].zvel temp
                    rand temp 16
                    seta[RETURN].xvel temp
                    seta[RETURN].cstat 32768
                    
                    setav[RETURN].prop_barrel_type prop_barrel_type
                }
                set actor_moveable_xv 0
                set actor_moveable_yv 0
                cstat 32768
                ifactioncount 10
                    killit
                break
            }
            else
                killit
        }
        else ifactioncount 2
        {
            ife counter 0
            {
                ife prop_barrel_type 1
                {
                    espawn A_EXPLOSION
                    seta[RETURN].xrepeat 32
                    seta[RETURN].yrepeat 32
                    seta[RETURN].cstat 32768
                    geta[].z temp
                    sub temp 3072
                    setav[RETURN].explosion_nosmoke 1
                    setav[RETURN].explosion_silent 1
                    setav[RETURN].prop_barrel_type 1
                    seta[RETURN].z temp
                    seta[RETURN].xvel 15
                    geta .htang temp
                    add temp 1024
                    seta[RETURN].ang temp
                    ssp RETURN 0
                    rand temp7 5
                    add temp7 10
                    for itervar range temp7
                    {
                        espawn A_SMOKE2
                        geta[].z temp
                        rand temp2 512
                        sub temp2 2048
                        add temp temp2
                        seta[RETURN].z temp
                        rand temp 16
                        add temp 36
                        seta[RETURN].xrepeat temp
                        seta[RETURN].yrepeat temp
                        rand temp 4096
                        shiftl temp 1
                        inv temp
                        set temp2 itervar
                        shiftl temp2 3
                        sub temp temp2
                        seta[RETURN].zvel temp
                        rand temp 32
                        seta[RETURN].xvel temp
                        seta[RETURN].cstat 32768
                        setav[RETURN].prop_barrel_type prop_barrel_type
                    }
                    rand temp2 6
                    add temp2 S_EXPL_MD001
                    soundvar temp2
                }
                else
                {
                    espawn A_EXPLOSION
                    seta[RETURN].xrepeat 48
                    seta[RETURN].yrepeat 48
                    seta[RETURN].cstat 32768
                    geta[].z temp
                    add temp 3072
                    setav[RETURN].smoke_offset 4096
                    seta[RETURN].z temp
                }
                set counter 1
            }
            ife prop_barrel_type 1
                hitradius 2048 5 10 15 20
            else
                hitradius 2048 10 20 30 40
        }
        break
    }
    geta[].htextra temp6
    ifhitweapon
    {
        add barrel_dmg_count 1
        ifwasweapon EXPLOSION
        {
            geta[].extra temp
            shiftr temp6 1
            sub temp temp6
            clamp temp 0 1000
            seta[].extra temp
            ifdead
                set barrel_delay 6
        }
        else ifg barrel_dmg_count 3
        {
            geta[].extra temp
            shiftr temp 1
            seta[].extra temp
        }
        ifn sprite[].htpicnum -1
        {
            geta[].ang temp
            seta[].ang sprite[].htang
            switch sprite[].htpicnum
                case BULLET
                    set move_v 50
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
                case P_PLASMA_BOLT
                    getprojectile[P_PLASMA_BOLT].vel temp2
                    set move_v temp2
                    shiftr move_v 2
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
                default
                    set move_v 100
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
            endswitch
            seta[].ang temp
        }
        set temp4 BARREL_STRENGTH
        div temp4 3
        set temp5 temp4
        shiftl temp5 1
        ifle sprite[].extra temp5 ifg sprite[].extra temp4
        {
            ifaction AC_DMG_1
                nullop
            else
                action AC_DMG_1
        }
        else ifle sprite[].extra temp4
        {
            ifaction AC_DMG_2
                nullop
            else
                action AC_DMG_2
        }

        rand temp3 6
        add temp3 6
        shiftr temp3 1
        ifactor A_BARREL_GIB
            shiftr temp3 1
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_METAL
            seta[RETURN].pal sprite[].pal
            rand temp4 2047
            seta[RETURN].ang temp4
        }
        espawn A_SMOKE2
        geta[].ang temp
        add temp 1024
        seta[RETURN].ang temp
        geta[].z temp
        ifactor A_BARREL_GIB
            sub temp 1024
        else
            sub temp 6144
        seta[RETURN].z temp
        ifn prop_barrel_type 0
        {
            setav[RETURN].prop_barrel_type prop_barrel_type
            seta[RETURN].cstat 32768
            seta[RETURN].xvel -6
        }
        else
            seta[RETURN].xvel 5
        ssp RETURN 0
    }
ends

actor A_BARREL_1 BARREL_STRENGTH AC_BASE
    ife st_do_once 0
    {
        set st_do_once 1
        state barrel_color
    }
    state barreldmg
    state do_moveable
enda

actor A_BARREL_2 BARREL_STRENGTH AC_BASE
    ife st_do_once 0
    {
        set st_do_once 1
        state barrel_color
    }
    state barreldmg
    state do_moveable
enda

actor A_BARREL_GIB BARREL_STRENGTH AC_BASE
    strength BARREL_STRENGTH
    ifaction AC_BASE
        nullop
    else
        action AC_BASE
    ife st_do_once 0
    {
        set st_do_once 1
        state barrel_color
    }
    state barreldmg
    state do_moveable
enda


action AC_UNBREAKABLE_DENTING 0 3 1 1 1
action AC_UNBREAKABLE_DENTED 2 1 1 1 1
action AC_UNBREAKABLE_UNDENT 1 1 1 1 1
actor A_UNBREAKABLE 1 AC_BASE
    spritepal 0
    geta[].htextra temp6
    ifaction AC_UNBREAKABLE_DENTING
        ifactioncount 3
            action AC_UNBREAKABLE_DENTED
    ifaction AC_UNBREAKABLE_DENTED
    {
        ife counter 0
            action AC_UNBREAKABLE_UNDENT
        else
            sub counter 1
            
    }
    else ifaction AC_UNBREAKABLE_UNDENT
            action AC_BASE
    ifhitweapon
    {
        ifpdistl 9216
        {
            rand temp 128
            add temp 480
            setp .sound_pitch temp
            rand temp2 2
            add temp2 S_STEP_WATERD_JUMP1
            soundvar temp2
            setp .sound_pitch 0
        }
        strength 1
        set counter temp6
        shiftr counter 3
        clamp counter 4 30
        ifn sprite[].htpicnum -1
        {
            geta[].ang temp
            seta[].ang sprite[].htang
            shiftl temp6 1
            switch sprite[].htpicnum
                case BULLET
                    set move_v temp6
                    clamp move_v 50 300
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
                case P_PLASMA_BOLT
                    getprojectile[P_PLASMA_BOLT].vel temp2
                    set move_v temp2
                    shiftr move_v 2
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
                case EXPLOSION
                    set move_v temp6
                    clamp move_v 100 300
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                default
                    set move_v temp6
                    clamp move_v 50 300
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
            endswitch
            seta[].ang temp
            ifaction AC_BASE
                action AC_UNBREAKABLE_DENTING
        }
    }
    state do_moveable
enda

action FLAMEOUT 0 15 1 1 1
useractor notenemy 7766 0 FLAMEOUT
    cstat 2
    seta[].blend 129
    add counter 1
    ifg counter 15
        killit
    ifactioncount 15
        killit
enda
defstate canisterdmg
    ifdead
    {
        ifactor A_CANISTER_2
        {
            ifn prop_alt 0 ifl prop_alt 15
            {

                ife prop_spawn 0
                {
                    espawn 7766
                    set temp 2
                    ifrnd 127
                        or temp 4
                    or temp 32768
                    seta[RETURN].cstat temp
                    seta[RETURN].blend 129
                    seta[RETURN].xrepeat 5
                    seta[RETURN].yrepeat 4
                    setav[RETURN].counter prop_alt
                    geta[].z temp
                    sub temp 6144
                    seta[RETURN].z temp
                    set prop_spawn 1
                }
                add prop_alt 1
                break
            }
        }
        seta[].ang sprite[].htang
        set move_v 100
        state move_actor
        add actor_moveable_xv move_xv
        add actor_moveable_yv move_yv
        ifaction AC_BASE_EXP
            nullop
        else
            action AC_BASE_EXP
        ifactioncount 3
        {
            rand temp3 6
            add temp3 10
            for itervar range temp3
            {
                espawn A_GENERIC_DEBRIS
                setav[RETURN].debris_type DEBRIS_METAL
                seta[RETURN].pal sprite[].pal
                rand temp4 2047
                seta[RETURN].ang temp4
            }
            killit
        }
        else ifactioncount 2
        {
            ife counter 0
            {
                espawn A_EXPLOSION
                seta[RETURN].xrepeat 48
                seta[RETURN].yrepeat 48
                seta[RETURN].cstat 32768
                geta[].z temp
                add temp 3072
                setav[RETURN].smoke_offset 4096
                seta[RETURN].z temp
                set counter 1
            }
            hitradius 2048 10 20 30 40
            // This will allow switch activation upon destruction
            ifn se_lotag 0 state switch_activate
        }
        break
    }
    geta[].htextra temp6
    ifhitweapon
    {
        add barrel_dmg_count 1
        ifwasweapon EXPLOSION
        {
            geta[].extra temp
            shiftr temp6 1
            sub temp temp6
            clamp temp 0 1000
            seta[].extra temp
        }
        else ifg barrel_dmg_count 3
        {
            geta[].extra temp
            shiftr temp 1
            seta[].extra temp
            ifactor A_CANISTER_2
            {
                shiftr temp 1
                seta[].extra temp
            }
        }
        ifn sprite[].htpicnum -1
        {
            geta[].ang temp
            seta[].ang sprite[].htang
            switch sprite[].htpicnum
                case BULLET
                    set move_v 50
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
                case P_PLASMA_BOLT
                    getprojectile[P_PLASMA_BOLT].vel temp2
                    set move_v temp2
                    shiftr move_v 2
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
                default
                    set move_v 100
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
            endswitch
            seta[].ang temp
        }
        rand temp3 6
        add temp3 6
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_METAL
            seta[RETURN].pal sprite[].pal
            rand temp4 2047
            seta[RETURN].ang temp4
        }
        espawn A_SMOKE2
        geta[].ang temp
        add temp 1024
        seta[RETURN].ang temp
        geta[].z temp
        sub temp 6144
        seta[RETURN].z temp
        seta[RETURN].xvel 5
        ssp RETURN 0
    }
ends

actor A_CANISTER_1 100 AC_BASE
    ife st_do_once 0
    {
        set temp BARREL_STRENGTH
        shiftl temp 1
        seta[].extra temp
        set st_do_once 1
    }
    geta [].htextra temp
    switch player[].curr_weapon
        case WEAPON_SMG
            ife sprite[].htpicnum BULLET ife sprite[].htowner player[].i ifg temp 0
            {
                shiftl temp 1
                seta[].htextra temp
            }
            break
        case WEAPON_SHOCKER
            ife sprite[].htpicnum P_SHOCKER ife sprite[].htowner player[].i ifg temp 0
            {
                shiftl temp 1
                seta[].htextra temp
            }
            break
    endswitch
    state barreldmg
    state do_moveable
enda

actor A_CANISTER_2 10 AC_BASE
    state canisterdmg
    state do_moveable
enda

eventloadactor A_CANISTER_2
// In case our canister is tagged, we need to clean things to make it work
    ifn sprite[].hitag 0
    {
        geta[].hitag se_lotag
              seta[].hitag 0
              seta[].lotag 0
    }
enda

eventloadactor A_SHOCKCANISTER
    geta .owner tp_owner
    geta .lotag se_lotag
    clamp se_lotag 0 65536
    seta .lotag 0
    getu[].player_skill temp
    ife VOLUME EP_HORDE
        nullop
    else
    {
        ifand se_lotag 32
            ifl temp 2
                killit
        ifand se_lotag 16
            ifl temp 3
                killit
        ifand se_lotag 64
            ifl temp 4
                killit
    }
enda

defstate shockcanister_dmg
    ife st_do_once 0
    {
        set st_do_once 0
    }
    ifg counter 0
    {
        rand temp 3
        add temp 1
        for itervar range temp
        {
            espawn A_GENERIC_PARTICLE
            seta[RETURN].xrepeat 129
            ife sprite[].pal 0
                setav[RETURN].particle_force_pal 6
            else
                setav[RETURN].particle_force_pal sprite[].pal
            // sub temp 1
        }
        espawn A_GENERIC_PARTICLE
        seta[RETURN].xrepeat 121
        ife sprite[].pal 0
            setav[RETURN].particle_force_pal 6
        else
            setav[RETURN].particle_force_pal sprite[].pal
        sub counter 1
        ifl counter 3
        {
            espawn A_LIGHTNINGBALL
            set temp5 tilesizy[sprite[].picnum]
            shiftl temp5 2
            mul temp5 sprite[].yrepeat
            shiftr temp5 2
            geta[].z temp
            sub temp temp5
            seta[RETURN].z temp
            seta[].owner THISACTOR
            hitradius 1536 7 8 9 10
            ife counter 1
            {
                ifg tp_owner 0
                {
                    ifn turret_match -1
                    {
                        getav[turret_match].turret_match temp
                        sub temp 1
                        setav[turret_match].turret_match temp
                    }
                }
                cactor A_SHOCKCANISTER_BROKE
            }
        }
    }
    geta[].htextra temp6
    geta[].owner temp5
    ifg temp6 0
    {
        ifn temp5 -1 ifn temp5 THISACTOR ifn temp5 player[].i
        {
            set temp7 0
            ife sprite[temp5].picnum A_SHOCKCANISTER_BROKE
                set temp7 1
            else ife sprite[temp5].picnum A_SHOCKCANISTER_DMG
                set temp7 1
            else ife sprite[temp5].picnum A_SHOCKCANISTER
                set temp7 1
            ife temp7 1
            {
                shiftr temp6 2
                ifg tp_owner 0
                    ifn turret_match -1
                        shiftr temp6 1
                seta[].htextra temp6
            }
        }
    }
    ifhitweapon
    {
        set temp4 temp6
        shiftl temp6 2
        clamp temp6 1 100
        seta .ang sprite.htang
        set move_v temp6
        state move_actor
        add actor_moveable_xv move_xv
        add actor_moveable_yv move_yv
        ifactor A_SHOCKCANISTER
        {
            set temp BARREL_STRENGTH
            shiftl temp 1
            ifl temp4 temp
            {
                set temp BARREL_STRENGTH
                shiftr temp 1
                seta .extra temp
                cactor A_SHOCKCANISTER_DMG
                break
            }
        }
        ifdead
        {
            ife counter 0
            {
                rand counter 3
                add counter 5
                cactor A_SHOCKCANISTER_DMG
            }
        }
    }
    ifg tp_owner 0
    {
        ifn turret_match -1
        {
            set actor_moveable_xv 0
            set actor_moveable_yv 0
        }
    }
    state do_moveable
ends

useractor notenemy A_SHOCKCANISTER_DMG BARREL_STRENGTH AC_BASE
    state shockcanister_dmg
enda
useractor notenemy A_SHOCKCANISTER BARREL_STRENGTH AC_BASE
    state shockcanister_dmg
enda

useractor notenemy A_SHOCKCANISTER_BROKE 10 AC_BASE
    strength 10
    geta[].htextra temp6
    ifhitweapon
    {
        shiftl temp6 2
        clamp temp6 1 100
        set move_v temp6
        state move_actor
        add actor_moveable_xv move_xv
        add actor_moveable_yv move_yv
    }
    state do_moveable
enda

defstate spawn_can_stuff
    geta[RETURN].z temp
    sub temp 4096
    seta[RETURN].z temp
    rand temp 128
    add temp 64
    seta[RETURN].xvel temp
    rand temp -640
    sub temp 1024
    seta[RETURN].zvel temp
    geta[].htang temp
    randvar temp2 320
    ifrnd 128
        inv temp2
    add temp temp2
    add temp 2048
    and temp 2047
    seta[RETURN].ang temp
    ssp RETURN CLIPMASK0
ends

defstate trashy_larry
    ifrnd 160
    {
        rand temp4 3
        add temp4 2
        ifrnd 12 shiftl temp4 1
        for itervar range temp4
        {
			// no syringe, it has different use here
            /*ifrnd 64 espawn I_SYRINGE
            else*/ espawn I_ARMOR_SHARD
            state spawn_can_stuff
            // sub temp4 1
        }
    }
    else ifrnd 24
    {
        espawn I_MEDPACK
        state spawn_can_stuff
    }
    else
    {
        rand temp4 3
        add temp4 2
        shiftl temp4 1
        for itervar range temp4
        {
            espawn A_ROACH
            setav[RETURN].se_hitag 1
            geta[RETURN].z temp
            rand temp2 3072
            sub temp2 3072
            seta[RETURN].z temp
            rand temp -320
            sub temp 1024
            seta[RETURN].zvel temp
            rand temp 256
            add temp 128
            seta[RETURN].xvel temp
            rand temp 2047
            seta[RETURN].ang temp
            ssp RETURN CLIPMASK0
        }
    }
ends

var garbage_count 0 2
defstate garbage_code
    cstator 257
    geta[].htextra temp
    switch player[].curr_weapon
        case WEAPON_SHOCKER
            ife sprite[].htpicnum P_SHOCKER ife sprite[].htowner player[].i ifg temp 0
            {
                shiftl temp 1
                seta[].htextra temp
            }
            break
    endswitch
    geta[].picnum temp7
    ifg temp 0
        add prop_dmg_build temp
    ifge prop_dmg_build 30
    {
        ife st_do_once 0
        {
            set st_do_once 1
            ifrnd 128 state trashy_larry
            cactor A_GARBAGE_DEAD
        }
    }
    else ifge prop_dmg_build 15
        cactor A_GARBAGE_DMG_2
    else ifge prop_dmg_build 1
    {
        ifn sprite[].picnum A_GARBAGE_DMG_2
            cactor A_GARBAGE_DMG_1
    }

    ifhitweapon
    {
        ifn sprite[].htpicnum -1
        {
            geta[].ang temp
            seta[].ang sprite[].htang
            switch sprite[].htpicnum
                case BULLET
                    set move_v 200
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
                case P_PLASMA_BOLT
                    getprojectile[P_PLASMA_BOLT].vel temp2
                    set move_v temp2
                    shiftr move_v 1
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
                default
                    set move_v 300
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
            endswitch
            seta[].ang temp
        }

        rand temp3 5
        add temp3 5
        ifn sprite[].picnum temp7 ife sprite[].picnum A_GARBAGE_DEAD
            add temp3 5
        else ife sprite[].picnum A_GARBAGE_DEAD
            shiftr temp3 1
        ife counter 1
            add temp3 10
        set temp5 tilesizy[sprite[].picnum]
        shiftl temp5 2
        mul temp5 sprite[].yrepeat
        shiftr temp5 2
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            ifrnd 127
                setav[RETURN].debris_type DEBRIS_PLASTIC
            seta[RETURN].pal 1
            set temp sector[].floorshade
            add temp 21
            setav[RETURN].particle_force_shade temp
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].pal 1
            rand temp4 temp5
            add temp4 temp5
            geta[].z temp
            sub temp temp4
            seta[RETURN].z temp
        }
        ifn sprite[].picnum temp7 ife sprite[].picnum A_GARBAGE_DEAD
        {
            rand temp3 3
            add temp3 5
            ife counter 1
                add temp3 10
            set temp5 tilesizy[sprite[].picnum]
            shiftl temp5 2
            mul temp5 sprite[].yrepeat
            shiftr temp5 3
            for itervar range temp3
            {
                espawn A_GENERIC_DEBRIS
                ifrnd 127
                    setav[RETURN].debris_type DEBRIS_FABRIC
                seta[RETURN].pal 1
                set temp sector[].floorshade
                add temp 21
                setav[RETURN].particle_force_shade temp
                rand temp4 2047
                seta[RETURN].ang temp4
                seta[RETURN].pal 1
                rand temp4 temp5
                shiftr temp4 1
                add temp4 temp5
                geta[].z temp
                sub temp temp4
                seta[RETURN].z temp
            }
        }
        strength 1
    }
    ifactor A_GARBAGE_DEAD
    {
        cstat 256
        ifg garbage_count 60
            nullop
        else
        {
            add garbage_count 1
            state do_moveable
        }
    }
    else state do_moveable
ends

actor A_GARBAGE_DMG_1 10 AC_BASE
    state garbage_code
enda
actor A_GARBAGE_DMG_2 10 AC_BASE
    state garbage_code
enda
actor A_GARBAGE 10 AC_BASE
    state garbage_code
enda

actor A_GARBAGE_DEAD 10 AC_BASE
    state garbage_code
enda

action AC_BASE5 0 1 5 1 1
action AC_BASE7 0 1 7 1 1
action AC_BASE8 0 1 7 1 1
action AC_DMG7_1 7 1 7 1 1

appendevent EVENT_SPAWN
    switch sprite.picnum
        case A_AUGMENTATION_PROP_1
        case A_AUGMENTATION_PROP_2
        case A_AUGMENTATION_PROP_3
        case A_AUGMENTATION_PROP_4
        case A_AUGMENTATION_PROP_5
        case A_AUGMENTATION_PROP_6
            sizeat 23 20
            break
    endswitch
endevent

useractor notenemy A_AUGMENTATION_PROP_1 0 AC_BASE5 enda
useractor notenemy A_AUGMENTATION_PROP_2 0 AC_BASE8 enda
useractor notenemy A_AUGMENTATION_PROP_3 0 AC_BASE8 enda
useractor notenemy A_AUGMENTATION_PROP_4 0 AC_BASE8 enda
useractor notenemy A_AUGMENTATION_PROP_5 0 AC_BASE8 enda
useractor notenemy A_AUGMENTATION_PROP_6 0 AC_BASE5 enda

useractor notenemy A_GASCAN 1 AC_BASE5
    state do_moveable
    ifn counter 0
    {
        espawn A_SMOKE2
        seta[RETURN].xrepeat 32
        seta[RETURN].yrepeat 32
        rand temp2 2047
        seta[RETURN].ang temp2
        rand temp2 128
        add temp2 128
        seta[RETURN].xvel temp2
        rand temp2 512
        add temp2 4096
        inv temp2
        seta[RETURN].zvel temp2
        ssp RETURN 0
        ifge counter 5
        {
            rand temp 2
            add temp 3
            for itervar range temp
            {
                espawn A_NAPALM_FLAME
                rand temp2 2047
                seta[RETURN].ang temp2
                rand temp2 128
                add temp2 128
                seta[RETURN].xvel temp2
                rand temp2 512
                add temp2 2048
                inv temp2
                seta[RETURN].zvel temp2
                ssp RETURN 0
                // sub temp 1
            }
            espawn A_NAPALM_BURST
            hitradius 1536 5 15 30 40
            seta[RETURN].xrepeat 28
            seta[RETURN].yrepeat 24
            rand temp2 4
            add temp2 S_EXPL_SM001
            soundvar temp2
            killit
        }
        add counter 1
        ifrnd 32
            add counter 1
    }
    geta[].htextra temp4
    ifhitweapon
    {
        geta[].ang temp
        seta[].ang sprite[].htang
        set move_v temp4
        shiftl move_v 2
        state move_actor
        add actor_moveable_xv move_xv
        add actor_moveable_yv move_yv
        seta[].ang temp
        strength 1
        ife counter 0
            set counter 1
    }
enda

defstate chairdmg
    geta[].htextra temp4
    ife player[].curr_weapon WEAPON_SMG ife sprite[].htpicnum BULLET ife sprite[].htowner player[].i ifg temp4 0
    {
        shiftl temp4 2
        seta[].htextra temp4
    }
    set temp actor_moveable_xv
    add temp actor_moveable_yv
    ifg counter2 0
        sub counter2 1
    ifn temp 0
    {
        ife counter2 0
        {
            switch sprite.picnum
                case A_CHAIR_BOTTOM
                case A_CHAIR_BOTTOM_2
                case A_STOOL
                case A_SERUM_HANGER
                    sound S_CHAIR_ROLL_ALT
                    break
                default
                    sound S_CHAIR_ROLL
                    break
            endswitch
            set counter2 36
        }
        set counter 5
    }
    else
    {
        ife counter 0
        {
            stopactorsound THISACTOR S_CHAIR_ROLL
            stopactorsound THISACTOR S_CHAIR_ROLL_ALT
        }
        else
            sub counter 1
    }
    ifhitweapon
    {
        ifn sprite[].htpicnum -1
        {
            geta[].ang temp
            seta[].ang sprite[].htang
            switch sprite[].htpicnum
                case BULLET
                    set move_v 100
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
                case P_PLASMA_BOLT
                    getprojectile[P_PLASMA_BOLT].vel temp2
                    set move_v temp2
                    shiftr move_v 1
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
                default
                    set move_v 150
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
            endswitch
            seta[].ang temp
        }
        ifwasweapon EXPLOSION
        {
            geta[].picnum surface_type
            state bullet_impact_sound
        }
        ifactor A_CHAIR_BOTTOM
            seta[].extra 50
        else ifactor A_CHAIR_BOTTOM_2
            seta[].extra 50
        ifle sprite[].extra 25
            ifaction AC_BASE7
                action AC_DMG7_1

        rand temp3 4
        add temp3 4
        ifactor A_SERUM_HANGER
            shiftr temp3 2
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_METAL
            ifactor A_STOOL
                setav[RETURN].debris_type DEBRIS_WOOD
            seta[RETURN].pal sprite[].pal
            rand temp4 2047
            seta[RETURN].ang temp4
        }
        espawn A_SMOKE2
        geta[].ang temp
        add temp 1024
        seta[RETURN].ang temp
        geta[].z temp
        sub temp 6144
        seta[RETURN].z temp
        seta[RETURN].xvel 5
        ssp RETURN 0
        rand temp3 4
        add temp3 4
        ifactor A_CHAIR_BOTTOM
            set temp3 0
        else ifactor A_CHAIR_BOTTOM_2
            set temp3 0
        else ifactor A_SERUM_HANGER
        {
            set temp3 0
        }
        ifn temp3 0 for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_FABRIC
            switch sprite[].picnum
                case A_CHAIR_1
                case A_CHAIR_1_DMG
                    seta[RETURN].pal sprite[].pal
                    break
                case A_CHAIR_2
                case A_CHAIR_2_DMG
                    seta[RETURN].pal 1
                    break
                case A_STOOL
                    setav[RETURN].debris_type DEBRIS_WOOD
                    break
            endswitch
            rand temp4 2047
            seta[RETURN].ang temp4
        }
        ifdead
        {
            action AC_BASE7
            switch sprite[].picnum
                case A_CHAIR_1
                case A_CHAIR_1_DMG
                    cactor A_CHAIR_BOTTOM
                    break
                case A_CHAIR_2
                case A_CHAIR_2_DMG
                    cactor A_CHAIR_BOTTOM_2
                    break
                case A_STOOL
                    sound S_BULLET_WOOD1
                    sound S_BULLET_WOOD2
                    sound S_STEP_WOOD_LAND3
                    rand temp3 4
                    add temp3 4
                    for itervar range temp3
                    {
                        espawn A_GENERIC_DEBRIS
                        ifactor A_STOOL
                            setav[RETURN].debris_type DEBRIS_WOOD
                        seta[RETURN].pal sprite[].pal
                        rand temp4 2047
                        seta[RETURN].ang temp4
                    }
                    killit
                    break
                case A_SERUM_HANGER
                    rand temp3 4
                    add temp3 4
                    set temp tilesizy[sprite.picnum]
                    shiftl temp 2
                    mul temp sprite.yrepeat
                    div temp temp3
                    for itervar range temp3
                    {
                        espawn A_GENERIC_DEBRIS
                        setav[RETURN].debris_type DEBRIS_METAL
                        seta[RETURN].pal sprite[].pal
                        geta .z temp4
                        sub temp4 temp
                        seta .z temp4
                        rand temp4 2047
                        seta[RETURN].ang temp4
                    }
                    geta .z temp4
                    shiftl temp 1
                    add temp4 temp
                    seta .z temp4
                    espawn A_GENERIC_PARTICLE
                    seta[RETURN].xrepeat 125
                    setav[RETURN].particle_force_pal sprite.pal
                    killit
                    break
                default
                    killit
                    break
            endswitch
            seta[].extra 50
        }
    }
ends
actor A_CHAIR_1_DMG 25 AC_BASE7
    action AC_DMG7_1
    cactor A_CHAIR_1
enda

actor A_CHAIR_2_DMG 25 AC_BASE7
    action AC_DMG7_1
    cactor A_CHAIR_2
enda

actor A_CHAIR_1 50 AC_BASE7
    state chairdmg
    set prop_adjustmass 8
    state do_moveable
enda

actor A_CHAIR_2 50 AC_BASE7
    state chairdmg
    set prop_adjustmass 8
    state do_moveable
enda

actor A_CHAIR_BOTTOM 50 AC_BASE7
    state chairdmg
    set prop_adjustmass 8
    state do_moveable
enda

actor A_CHAIR_BOTTOM_2 50 AC_BASE7
    state chairdmg
    set prop_adjustmass 8
    state do_moveable
enda

actor A_STOOL 50 AC_BASE
    state chairdmg
    set prop_adjustmass 4
    state do_moveable
enda

actor A_SERUM_HANGER 50 AC_BASE
    state chairdmg
    set prop_adjustmass 8
    state do_moveable
enda

action AC_HYDRANT_DEAD 5 1 1 1 1
action AC_HYDRANT_STATIC 0 1 5 1 1

useractor notenemy A_HYDRANT_1 50 AC_HYDRANT_STATIC
    ifaction AC_HYDRANT_DEAD
    {
        ifactioncount 85
        {
            sound S_AMB_FOUNTAIN2
            resetactioncount
        }
        break
    }
//    ifn sprite[].htpicnum EXPLOSION
//        break
    ife sprite[].htpicnum EXPLOSION
        seta[].htextra 50
    ifhitweapon
    {
        ifdead nullop
            else break
        ifaction AC_HYDRANT_STATIC
            action AC_HYDRANT_DEAD
        cstat 0
        sound S_AMB_FOUNTAIN2
        rand temp3 6
            add temp3 6
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_METAL
            seta[RETURN].pal 0
            rand temp4 2047
            seta[RETURN].ang temp4
        }
        espawn 7740
        seta[RETURN].cstat 2
        seta[RETURN].xrepeat sprite[].xrepeat
        seta[RETURN].yrepeat sprite[].yrepeat
        break
    }
enda

actor T_PLUG 10 AC_BASE
    set actor_switch 1
    ifcount 30
        ifpdistl 844
            ifcansee
                ife actor_switch_usable 1
                    ifhitspace
                    {
                        addphealth -1
                        palfrom 30 0 0 30
                        soundonce S_P_ZAPPED_END
                        espawn A_GENERIC_PARTICLE
                        seta[RETURN].xrepeat 123
                        espawn A_GENERIC_PARTICLE
                        seta[RETURN].xrepeat 120
                        resetcount
                    }
                    set actor_switch_usable 0
enda

action AC_LAMP_OFF -7 1 7 1 1
actor A_LAMP_OFF 10 AC_BASE7
    action AC_LAMP_OFF
    cactor A_LAMP
enda
actor A_LAMP 10 AC_BASE7
    ifpdistl 844
    {
        ifcansee
        {
            ifp pfacing
            {
                ifhitspace
                {
                    ifcount 5
                    {
                        sound S_SWITCH_BUTTON01
                        ifaction AC_BASE7
                            action AC_LAMP_OFF
                        else
                            action AC_BASE7
                    }
                    resetcount
                }
            }
        }
    }
    ifhitweapon
    {
        espawn A_GENERIC_PARTICLE
        seta[RETURN].xrepeat 120
        geta[].yrepeat temp
        mul temp 192
        geta[].z temp2
        sub temp2 temp
        seta[RETURN].z temp2
        ifn sprite[].htpicnum -1
        {
            geta[].ang temp
            seta[].ang sprite[].htang
            switch sprite[].htpicnum
                case BULLET
                    set move_v 100
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
                case P_PLASMA_BOLT
                    getprojectile[P_PLASMA_BOLT].vel temp2
                    set move_v temp2
                    shiftr move_v 1
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
                default
                    set move_v 200
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
            endswitch
            seta[].ang temp
        }
        strength 1
    }
    state do_moveable
enda

action AC_LAMP_FLOOR_OFF -1 1 1 1 1
spritenoshade A_LAMP_FLOOR
actor A_LAMP_FLOOR_OFF 10 AC_BASE
    action AC_LAMP_FLOOR_OFF
    cactor A_LAMP_FLOOR
enda
actor A_LAMP_FLOOR 10 AC_BASE
    ifaction AC_LAMP_FLOOR_OFF
        seta[].shade sector[].floorshade
    else
        seta[].shade 2
    ifpdistl 844
    {
        ifcansee
        {
            ifp pfacing
            {
                ifhitspace
                {
                    ifcount 5
                    {
                        sound S_SWITCH_BUTTON02
                        ifaction AC_BASE
                            action AC_LAMP_FLOOR_OFF
                        else
                            action AC_BASE
                    }
                    resetcount
                }
            }
        }
    }
    ifhitweapon
    {
        espawn A_GENERIC_PARTICLE
        seta[RETURN].xrepeat 120
        set temp tilesizy[sprite.picnum]
        shiftl temp 2
        mul temp sprite.yrepeat
        set temp2 temp
        shiftr temp2 3
        sub temp temp2
        shiftr temp2 1
        sub temp temp2
        geta[].z temp2
        sub temp2 temp
        seta[RETURN].z temp2
        ifn sprite[].htpicnum -1
        {
            geta[].ang temp
            seta[].ang sprite[].htang
            switch sprite[].htpicnum
                case BULLET
                    set move_v 100
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
                case P_PLASMA_BOLT
                    getprojectile[P_PLASMA_BOLT].vel temp2
                    set move_v temp2
                    shiftr move_v 1
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
                default
                    set move_v 200
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
            endswitch
            seta[].ang temp
        }
        strength 1
    }
    state do_moveable
enda

eventloadactor A_CEILING_LAMP_OFF
    geta .hitag se_hitag
    seta .hitag 0
enda

actor A_CEILING_LAMP_OFF
    ife counter 0
    {
        ifg se_hitag 0
        {
            ife activateshit[se_hitag] 1
            {
                set counter 1
                cactor A_CEILING_LAMP_ON
            }
        }
    }
    else
        set counter 0
enda

eventloadactor A_CEILING_LAMP_ON
    geta .hitag se_hitag
    seta .hitag 0
enda

actor A_CEILING_LAMP_ON
    ife counter 0
    {
        ifg se_hitag 0
        {
            ife activateshit[se_hitag] 1
            {
                set counter 1
                cactor A_CEILING_LAMP_OFF
            }
        }
    }
    else
        set counter 0
enda

actor A_REDSWINGLINE 10 AC_BASE
    geta[].htextra temp6
    ifhitweapon
    {
        espawn A_GENERIC_DEBRIS
        setav[RETURN].debris_type DEBRIS_METAL
        ifn sprite[].htpicnum -1
        {
            geta[].ang temp
            seta[].ang sprite[].htang

            set move_v temp6
            shiftl move_v 4
            state move_actor
            add actor_moveable_xv move_xv
            add actor_moveable_yv move_yv
            seta[].ang temp
        }
        strength 1
    }
    state do_moveable
enda

actor A_MIKE 10 AC_BASE7
    geta[].htextra temp6
    ifhitweapon
    {
        espawn A_GENERIC_DEBRIS
        setav[RETURN].debris_type DEBRIS_METAL
        ifn sprite[].htpicnum -1
        {
            geta[].ang temp
            seta[].ang sprite[].htang

            set move_v temp6
            shiftl move_v 4
            state move_actor
            add actor_moveable_xv move_xv
            add actor_moveable_yv move_yv
            seta[].ang temp
        }
        strength 1
    }
    state do_moveable

    ife se_lotag 0
    ife se_hitag 0
        break
    set actor_switch 1
    ifhitspace
        ifpdistl 1536
            ifcansee
                ife actor_switch_usable 1
                {
                    ifn se_lotag 0
                        state switch_activate
                    ifn se_hitag 0
                    {
                        ife p_lastline 0
                        {
                            stopactorsound player[].i p_lastline
                            setarray sound_playback[p_lastline] 0
                            set p_lastline se_hitag
                            actorsound player[].i p_lastline
                        }
                        set actor_switch_usable 0
                    }
                }
enda

defstate trashcan
    cstator 257

    geta [].htextra temp
    switch player[].curr_weapon
        case WEAPON_SMG
            ife sprite[].htpicnum BULLET ife sprite[].htowner player[].i ifg temp 0
            {
                shiftl temp 1
                seta[].htextra temp
            }
            break
        case WEAPON_SHOCKER
            ife sprite[].htpicnum P_SHOCKER ife sprite[].htowner player[].i ifg temp 0
            {
                shiftl temp 1
                seta[].htextra temp
            }
            break
    endswitch
    ifg temp 0
        add prop_dmg_build temp
    ifge prop_dmg_build 30
        cactor A_TRASHCAN_DEAD
    else ifge prop_dmg_build 15
        cactor A_TRASHCAN_DMG_2
    else ifge prop_dmg_build 1
    {
        ifn sprite[].picnum A_TRASHCAN_DMG_2
            cactor A_TRASHCAN_DMG_1
    }

    ifhitweapon
    {
        ifn sprite[].htpicnum -1
        {
            geta[].ang temp
            seta[].ang sprite[].htang
            switch sprite[].htpicnum
                case BULLET
                    set move_v 100
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
                case P_PLASMA_BOLT
                    getprojectile[P_PLASMA_BOLT].vel temp2
                    set move_v temp2
                    shiftr move_v 1
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
                default
                    set move_v 200
                    state move_actor
                    add actor_moveable_xv move_xv
                    add actor_moveable_yv move_yv
                    break
            endswitch
            seta[].ang temp
        }

        rand temp3 5
        add temp3 5
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            ifrnd 127
                setav[RETURN].debris_type DEBRIS_METAL
            seta[RETURN].pal sprite[].pal
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].pal 1
        }
    }
    state do_moveable
ends

actor A_TRASHCAN 10 AC_BASE
    state trashcan
enda

appendevent EVENT_SPAWN
    switch sprite.picnum
        case A_TRASHCAN_DMG_2
            set prop_dmg_build 29
            break
        case A_TRASHCAN_DMG_1
            add prop_dmg_build 14
            break
    endswitch
endevent

actor A_TRASHCAN_DMG_1 10 AC_BASE
    state trashcan
enda

actor A_TRASHCAN_DMG_2 10 AC_BASE
    state trashcan
enda

actor A_TRASHCAN_DEAD 0 AC_BASE
    ifn sprite[].htowner -1 ife st_do_once 0
    {
        set st_do_once 1
        espawn A_TRASHCAN_LID
        seta[RETURN].cstat 32768
        seta[RETURN].pal sprite[].pal
        geta[].z temp
        sub temp 6144
        seta[RETURN].z temp
        seta[RETURN].htextra prop_dmg_build
        seta[RETURN].htang sprite[].htang
        ifg se_hitag 0
        {
            espawn se_hitag
            state spawn_can_stuff
        }
        else
            state trashy_larry
    }
    strength 1
    geta[].htextra temp6
    cstat 256
    ifhitweapon
    {
        ifn sprite[].htpicnum -1
        {
            geta[].ang temp
            seta[].ang sprite[].htang
            set move_v temp6
            shiftl move_v 3
            state move_actor
            add actor_moveable_xv move_xv
            add actor_moveable_yv move_yv
            seta[].ang temp
            espawn A_GENERIC_DEBRIS
            ifrnd 127
                setav[RETURN].debris_type DEBRIS_METAL
            seta[RETURN].pal sprite[].pal
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].pal 1
        }
    }
    state do_moveable
enda

action LIDFLIP 0 8 1 1 12

actor A_TRASHCAN_LID 0 AC_BASE
    cstat 256
    sizeat 24 20
    ife counter2 0 ifcount 6
    {
        ifn actor_moveable_xv 0
            set counter2 1
        ifn actor_moveable_yv move_yv
            set counter2 1
    }
    else
        fall
    iffloordistl 1
    {
        action AC_BASE
    }
    else ifaction AC_BASE
    {
        action LIDFLIP
        set counter 1
    }
        ifg sprite[].htextra 0
            set temp2 sprite[].htextra
         ifhitweapon
        {
            ifn sprite[].htpicnum -1
            {
                geta[].ang temp
                seta[].ang sprite[].htang
                        set move_v temp2
                        shiftl move_v 6
                        state move_actor
                        shiftl temp2 5
                        inv temp2
                        clamp temp2 -8192 0
                        seta[].zvel temp2
                        ssp THISACTOR CLIPMASK0

                        add actor_moveable_xv move_xv
                        add actor_moveable_yv move_yv
                seta[].ang temp
            }
            strength 1
        }

        ifg counter 0
        {
            add counter 1

            ife counter 3
            {
                geta[].zvel temp
                shiftl temp 1
                seta[].zvel temp

            }
            ifg counter 10
                    set counter 0
        }
        ifg sprite[].zvel 1024
            seta[].zvel 1024
        else ifl sprite[].zvel -8192
            seta[].zvel -8192
        state do_moveable
        ifg moveable_return 32768
        {
            geta[].ang temp
            add temp 2048
            and temp 2047
            seta[].ang temp
        }
        iffloordistl 1 ifaction AC_BASE
        {
            getflorzofslope sprite[].sectnum sprite[].x sprite[].y temp
            geta[].z temp2
            ifl temp2 temp
            {
                set temp4 GRAVITATIONALCONSTANT
                shiftl temp4 2
                add temp2 temp4
                ifg temp2 temp
                    set temp2 temp
                seta[].z temp2
            }
            else
                seta[].z temp
    }
enda

action AC_GLASSPANEL_BROKE -358 1 1 1 1
var glass_temp 0 2
var glass_temp2 0 2
defstate glass_debris_square
    set temp tilesizy[sprite.picnum]
    shiftl temp 2
    mul temp sprite.yrepeat
    ifand sprite.cstat 128
    {
        geta .z temp2
        set temp3 temp
        shiftr temp3 1
        add temp2 temp3 
        seta .z temp2
    }
    div temp sprite.yrepeat
    clamp temp 1 131072
    
    set temp3 tilesizx[sprite.picnum]
    mul temp3 sprite.xrepeat
    div temp3 sprite.yrepeat
    clamp temp3 1 131072
    
    geta .ang temp5
    set temp4 temp5
    
    add temp5 512
    and temp5 2047
    seta .ang temp5
    set move_v temp3
    state move_actor
    
    seta .ang temp4
    geta .x temp3
    geta .y temp4
    geta .z temp7
    for temp6 range sprite.yrepeat
    {
        espawn A_GENERIC_DEBRIS
        switch glass_temp2
            case 1
                setav[RETURN].debris_type DEBRIS_WOOD
                break
            default
                setav[RETURN].debris_type DEBRIS_GLASS
                break
        endswitch
        seta[RETURN].pal sprite.pal
        seta[RETURN].ang sprite.htang

        set temp5 sprite.yrepeat
        shiftr temp5 2
        set temp8 temp6
        mod temp8 temp5
        shiftr temp5 1
        ifl temp8 temp5
        {
            geta .x temp5
            add temp5 move_xv
            seta .x temp5
            
            geta .y temp5
            add temp5 move_yv
            seta .y temp5
        }
        else ifg temp8 temp5
        {
            geta .x temp5
            sub temp5 move_xv
            seta .x temp5
            
            geta .y temp5
            sub temp5 move_yv
            seta .y temp5
        }
        else
        {
            seta .x temp3
            seta .y temp4
        }
        geta[].z temp2
        sub temp2 temp
        seta[].z temp2
    }
    seta .x temp3
    seta .y temp4
    seta .z temp7
    set glass_temp 2
ends

useractor notenemy A_GLASS_PANEL 1 AC_BASE
    cstator 257
    geta[].htextra temp6
    ifhitweapon
    {
        ifwasweapon EXPLOSION
        {
            geta[].picnum surface_type
            state bullet_impact_sound
            state glass_debris_square
            killit
        }
        else
        {
            strength 1
            ifaction AC_BASE
            {
                action AC_GLASSPANEL_BROKE
                ifg temp6 25
                {
                    state glass_debris_square
                    killit
                }
            }
            else
            {
                state glass_debris_square
                killit
            }
        }
    }
enda

defstate other_glass_panel_code
    cstator 257
    geta[].htextra temp6
    ifhitweapon
    {
        ifwasweapon EXPLOSION
        {
            geta[].picnum surface_type
            state bullet_impact_sound
        }
        state glass_debris_square
        killit
    }
ends


useractor notenemy A_GLASS_PANEL_2 1 AC_BASE
    state other_glass_panel_code
enda
useractor notenemy A_GLASS_PANEL_3 1 AC_BASE
    state other_glass_panel_code
enda

action AC_GLASSPANEL_4_BROKE -2 1 1 1 1
useractor notenemy A_GLASS_PANEL_4 1 AC_BASE
    cstator 257
    ifaction AC_GLASSPANEL_4_BROKE
        break
    ifhitweapon
        action AC_GLASSPANEL_4_BROKE
enda


defstate glass_window_init
    geta[].lotag se_lotag
    seta[].lotag 0
    geta[].hitag se_hitag
    seta[].hitag 0
    geta[].yvel se_yvel
    seta[].yvel 0
ends

eventloadactor A_GLASS_WINDOW_1
    state glass_window_init
enda

eventloadactor A_GLASS_WINDOW_2
    state glass_window_init
enda

eventloadactor A_GLASS_WINDOW_3
    state glass_window_init
    ifand sprite[].cstat 2
        nullop
    else
    {
        or se_lotag 2
    }
enda

defstate glass_window_other
    set counter 2
    ifg se_hitag 0
    {
        for temp sprofstat STAT_ACTOR
        {
            switch sprite[temp].picnum
                case A_GLASS_WINDOW_1
                case A_GLASS_WINDOW_2
                case A_GLASS_WINDOW_3
                    ife actorvar[temp].se_hitag se_hitag
                    {
                        ifn actorvar[temp].counter 2
                        {
                            setav[temp].counter 2
                            seta[temp].htang sprite[].htang
                            setav[temp].se_hitag 0
                        }
                    }
                    break
            endswitch
        }
    }
ends
defstate glass_window_code
    cstator 257
    ifspritepal 77
        changespritestat THISACTOR 0
    ife counter 2
    {
        state glass_debris_square
        geta[].picnum surface_type
        state bullet_impact_sound
        killit
    }
    geta[].htextra temp
    ifg temp 50
        set counter 1
    ife counter 1
    {
        ifaction AC_GLASSPANEL_BROKE
        {
            state glass_debris_square
            killit
        }
    }
    ifhitweapon
    {
        ifg se_yvel 0
        {
            operateactivators se_yvel THISACTOR
            operatemasterswitches se_yvel
            operaterespawns se_yvel
            setarray preloadactivations[se_yvel] 1
        }
        ifand se_lotag 2
        {
            strength 1
            break
        }
        else ifwasweapon EXPLOSION
        {
            state glass_debris_square
            geta[].picnum surface_type
            state bullet_impact_sound
            state glass_window_other
            killit
        }
        else
        {
            strength 1
            ifand se_lotag 1
                break
            ifaction AC_BASE
            {
                state glass_debris_square
                state glass_window_other
                killit
            }
        }
    }
ends

useractor notenemy A_GLASS_WINDOW_1 1 AC_BASE
    state glass_window_code
enda

useractor notenemy A_GLASS_WINDOW_2 1 AC_BASE
    state glass_window_code
enda

useractor notenemy A_GLASS_WINDOW_3 1 AC_BASE
    state glass_window_code
enda

action AC_CUBEGLASS_1_BROKE 1733 1 1 1 1
useractor notenemy A_CUBEGLASS_1 1 AC_BASE
    cstator 257
    set actor_static 1
    ifhitweapon
    {
        action AC_CUBEGLASS_1_BROKE
        changespritestat THISACTOR STAT_DEFAULT
    }
enda
action AC_CUBEGLASS_2_BROKE 208 1 1 1 1
useractor notenemy A_CUBEGLASS_2 1 AC_BASE
    cstator 257
    set actor_static 1
    ifhitweapon
    {
        action AC_CUBEGLASS_2_BROKE
        changespritestat THISACTOR STAT_DEFAULT
    }
enda

defstate glass_window_deco
    cstator 257
    ifaction AC_DMG_1
    {
        changespritestat THISACTOR STAT_DEFAULT
        break
    }
    ifhitweapon
    {
        switch sprite.picnum
            case A_GLASS_DECO_22
                cactor A_GLASS_DECO_22_BROKE
                break
            case A_GLASS_DECO_23
                cactor A_GLASS_DECO_23_BROKE
                break
            default
                action AC_DMG_1
                break
        endswitch     
    }
ends

useractor notenemy A_GLASS_DECO_1 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_2 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_3 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_4 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_5 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_6 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_7 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_8 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_9 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_10 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_11 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_12 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_13 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_14 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_15 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_16 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_17 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_18 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_19 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_20 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_21 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_22 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_23 1 AC_BASE state glass_window_deco enda
useractor notenemy A_GLASS_DECO_22_BROKE 1 AC_BASE changespritestat THISACTOR STAT_DEFAULT enda
useractor notenemy A_GLASS_DECO_23_BROKE 1 AC_BASE changespritestat THISACTOR STAT_DEFAULT enda


appendevent EVENT_SPAWN
    switch sprite[].picnum
        case A_GLASS_DECO_1_BROKE:
        case A_GLASS_DECO_2_BROKE:
        case A_GLASS_DECO_3_BROKE:
        case A_GLASS_DECO_4_BROKE:
        case A_GLASS_DECO_5_BROKE:
        case A_GLASS_DECO_6_BROKE:
        case A_GLASS_DECO_7_BROKE:
        case A_GLASS_DECO_8_BROKE:
        case A_GLASS_DECO_9_BROKE:
        case A_GLASS_DECO_10_BROKE:
        case A_GLASS_DECO_11_BROKE:
        case A_GLASS_DECO_12_BROKE:
        case A_GLASS_DECO_13_BROKE:
        case A_GLASS_DECO_14_BROKE:
        case A_GLASS_DECO_15_BROKE:
        case A_GLASS_DECO_16_BROKE:
        case A_GLASS_DECO_17_BROKE:
        case A_GLASS_DECO_18_BROKE:
        case A_GLASS_DECO_19_BROKE:
        case A_GLASS_DECO_20_BROKE:
        case A_GLASS_DECO_21_BROKE:
            action AC_DMG_1
            geta[].picnum temp
            sub temp 1
            seta[].picnum temp
            break
    endswitch
endevent


useractor notenemy A_KEYBOARD_1 1 AC_BASE
    cstator 257
    set actor_static 1
    geta[].htextra temp
    ifhitweapon
    {
        strength 1
        espawn A_GENERIC_PARTICLE
        seta[RETURN].xrepeat 120
        ifaction AC_BASE
        {
            action AC_DMG_1
            rand temp3 4
            add temp3 4
            for itervar range temp3
            {
                espawn A_GENERIC_DEBRIS
                setav[RETURN].debris_type DEBRIS_PLASTIC
                rand temp4 2047
                seta[RETURN].ang temp4
                seta[RETURN].pal 1
            }
            ifwasweapon EXPLOSION
            {
                geta[].picnum surface_type
                state bullet_impact_sound
            }
            changespritestat THISACTOR STAT_DEFAULT
        }
    }
enda

useractor notenemy A_KEYBOARD_2 1 AC_BASE
    cstator 257
    set actor_static 1
    geta[].htextra temp
    ifhitweapon
    {
        strength 1
        espawn A_GENERIC_PARTICLE
        seta[RETURN].xrepeat 120
        ifaction AC_BASE
        {
            action AC_DMG_1
            rand temp 2
            add temp S_BULLET_GLASS1
            soundvar temp
            rand temp3 4
            add temp3 4
            for itervar range temp3
            {
                espawn A_GENERIC_DEBRIS
                setav[RETURN].debris_type DEBRIS_GLASS
                rand temp4 2047
                seta[RETURN].ang temp4
            }
            ifwasweapon EXPLOSION
            {
                geta[].picnum surface_type
                state bullet_impact_sound
            }
            changespritestat THISACTOR STAT_DEFAULT
        }
    }
enda

defstate monitor_shared
    cstator 257
    set actor_static 1
    ife se_hitag 1
        seta .htextra -1
    geta .htextra temp
    ife st_do_once 1
        changespritestat THISACTOR STAT_DEFAULT
    ifhitweapon
    {
        strength 1
        espawn A_GENERIC_PARTICLE
        seta[RETURN].xrepeat 120
        geta[].yrepeat temp
        shiftl temp 7
        geta[].z temp2
        sub temp2 temp
        seta[RETURN].z temp2
        set temp5 0
        ifaction AC_BASE
            set temp5 1
        else ifaction AC_BASE_MINUS
            set temp5 2
        ifn temp5 0
        {
            action AC_DMG_1
            rand temp 2
            add temp S_BULLET_GLASS1
            soundvar temp
            rand temp3 5
            add temp3 5
            for itervar range temp3
            {
                espawn A_GENERIC_DEBRIS
                setav[RETURN].debris_type DEBRIS_GLASS
                rand temp4 2047
                seta[RETURN].ang temp4
            }
            ifwasweapon EXPLOSION
            {
                geta[].picnum surface_type
                state bullet_impact_sound
            }

            switch sprite[].picnum
                case A_HEALTH_MONITOR_OFF
                case A_HEALTH_MONITOR
                    set st_do_once 1
                    action AC_BASE
                    cactor A_HEALTH_MONITOR_BRK
                    break
            endswitch
            ife temp5 2
            {
                set st_do_once 1
                cactor A_MONITOR_1
            }
            else
                changespritestat THISACTOR STAT_DEFAULT
        }
    }
ends

useractor notenemy A_MONITOR_1 1 AC_BASE
    state monitor_shared
enda
eventloadactor A_MONITOR_4
    seta[].picnum A_MONITOR_4_REAL
enda
useractor notenemy A_MONITOR_4_REAL 1 AC_BASE_MINUS
    state monitor_shared
enda

eventloadactor A_HEALTH_MONITOR_OFF
    geta .lotag se_lotag
    seta .lotag 0
    ifspritepal 9
    {
        spritepal 0
        set counter -1
    }
enda

useractor notenemy A_HEALTH_MONITOR_OFF 1 AC_BASE
    state monitor_shared
    stopactorsound THISACTOR S_HEART_BEEP
    ifle se_lotag 0
    {
        ifn counter -1
            set counter 0
        set actor_switch 1
        ifhitspace
        {
            ifpdistl 1536 ife actor_switch_usable 1 ife switch_wait 0
            {
                set actor_switch_usable 0
                sound S_SWITCH_BUTTON01
                ifl se_lotag 0
                    cactor A_HEALTH_MONITOR
                else ife counter2 1
                    cactor A_HEALTH_MONITOR
            }
            set switch_wait 1
        }
        else
            set switch_wait 0

        set actor_switch_usable 0
    }
enda

eventloadactor A_HEALTH_MONITOR
    geta .lotag se_lotag
    seta .lotag 0
    ifspritepal 9
    {
        spritepal 0
        set counter -1
    }
    set counter2 1
enda
useractor notenemy A_HEALTH_MONITOR 1 AC_BASE
    ifg se_lotag 0
        ife activateshit[se_lotag] 1
            cactor A_HEALTH_MONITOR_OFF
    state monitor_shared
    ifn counter -1
    {
        ife counter 0
            sound S_HEART_BEEP
        add counter 1
        mod counter 60
    }
    ifle se_lotag 0
    {
        set actor_switch 1
        ifhitspace
        {
            ifpdistl 1536 ife actor_switch_usable 1 ife switch_wait 0
            {
                set actor_switch_usable 0
                sound S_SWITCH_BUTTON01
                cactor A_HEALTH_MONITOR_OFF
            }
            set actor_switch_usable 0
            set switch_wait 1
        }
        else
            set switch_wait 0
    }
enda
useractor notenemy A_HEALTH_MONITOR_BRK 1 AC_BASE
    set st_do_once 1
    state monitor_shared
    stopactorsound THISACTOR S_HEART_BEEP
enda

defstate casepanel_code
    cstator 257
    set actor_static 1
    geta[].htextra temp
    ifhitweapon
    {
        strength 1
        espawn A_GENERIC_PARTICLE
        seta[RETURN].xrepeat 120
        geta[].yrepeat temp
        shiftl temp 7
        geta[].z temp2
        sub temp2 temp
        seta[RETURN].z temp2
        geta[].htang temp2
        add temp2 1024
        and temp2 2047
        seta[RETURN].ang temp2
        seta[RETURN].xvel 256
        ssp RETURN 0
        ifaction AC_BASE
        {
            action AC_DMG_1
            rand temp3 4
            add temp3 4
            for itervar range temp3
            {
                espawn A_GENERIC_DEBRIS
                setav[RETURN].debris_type DEBRIS_PLASTIC
                rand temp4 2047
                seta[RETURN].ang temp4
                seta[RETURN].pal 1
            }
            ifwasweapon EXPLOSION
            {
                geta[].picnum surface_type
                state bullet_impact_sound
            }
            changespritestat THISACTOR STAT_DEFAULT
        }
    }
ends
useractor notenemy A_CASEPANEL_1 1 AC_BASE
    state casepanel_code
enda
useractor notenemy A_CASEPANEL_2 1 AC_BASE
    state casepanel_code
enda
useractor notenemy A_CASEPANEL_3 1 AC_BASE
    state casepanel_code
enda
useractor notenemy A_CASEPANEL_4 1 AC_BASE
    state casepanel_code
enda
useractor notenemy A_CASEPANEL_5 1 AC_BASE
    state casepanel_code
enda

useractor notenemy A_SERVERSTACK_1 1 AC_BASE
    state casepanel_code
enda

useractor notenemy A_TECHPANEL_1 1 AC_BASE
    state casepanel_code
enda
useractor notenemy A_TECHPANEL_2 1 AC_BASE
    state casepanel_code
enda
useractor notenemy A_TECHPANEL_3 1 AC_BASE
    state casepanel_code
enda

useractor notenemy A_MONITOR_1_SIDE 1 AC_BASE
    cstator 257
    set actor_static 1
    geta[].htextra temp
    ifhitweapon
    {
        strength 1
        espawn A_GENERIC_PARTICLE
        seta[RETURN].xrepeat 120
        geta[].yrepeat temp
        shiftl temp 7
        geta[].z temp2
        sub temp2 temp
        seta[RETURN].z temp2
        ifaction AC_BASE
        {
            action AC_DMG_1
            rand temp3 4
            add temp3 4
            for itervar range temp3
            {
                espawn A_GENERIC_DEBRIS
                setav[RETURN].debris_type DEBRIS_PLASTIC
                rand temp4 2047
                seta[RETURN].ang temp4
                seta[RETURN].pal 1
            }
            ifwasweapon EXPLOSION
            {
                geta[].picnum surface_type
                state bullet_impact_sound
            }
            changespritestat THISACTOR STAT_DEFAULT
        }
    }
enda

defstate monitor_2_code
    cstator 257
    set actor_static 1
    ifand se_hitag 2
    {
        cstat 32768
        geta .picnum temp
        add temp sprite.htg_t 3
        ifand se_hitag 4
        {
            switch sector.floorpicnum
                case A_MONITOR_2_3_BROKE
                case A_MONITOR_2_3_BROKE_LG
                    seta .htextra 100
                    ifand se_hitag 1
                        nullop
                    else
                        set temp sector.floorpicnum
                 break
            endswitch
            sets .floorpicnum temp
            ifand se_hitag 8
            {
                switch sector.ceilingpicnum
                    case A_MONITOR_2_3_BROKE
                    case A_MONITOR_2_3_BROKE_LG
                        seta .htextra 100
                        ifand se_hitag 1
                            nullop
                        else
                            set temp sector.ceilingpicnum
                     break
                endswitch
                sets .ceilingpicnum temp
            }
        }
        else
        {
            switch sector.ceilingpicnum
                case A_MONITOR_2_3_BROKE
                case A_MONITOR_2_3_BROKE_LG
                    seta .htextra 100
                    ifand se_hitag 1
                        nullop
                    else
                        set temp sector.ceilingpicnum
                 break
            endswitch
            sets .ceilingpicnum temp
        }
    }
    ifand se_hitag 1
        seta .htextra -1
    geta[].htextra temp
    ifaction AC_MONITOR_H
        action AC_BASE
    ifhitweapon
    {
        strength 1
        espawn A_GENERIC_PARTICLE
        seta[RETURN].xrepeat 120
        geta[].yrepeat temp
        shiftl temp 7
        geta[].z temp2
        sub temp2 temp
        seta[RETURN].z temp2
        ifaction AC_BASE
        {
            rand temp3 5
            add temp3 5
            for itervar range temp3
            {
                espawn A_GENERIC_DEBRIS
                setav[RETURN].debris_type DEBRIS_GLASS
                rand temp4 2047
                seta[RETURN].ang temp4
                seta[RETURN].pal 1
            }
            ifwasweapon EXPLOSION
            {
                geta[].picnum surface_type
                state bullet_impact_sound
            }
            ifg tilesizy[sprite.picnum] 64
                cactor A_MONITOR_2_3_BROKE_LG
            else
                cactor A_MONITOR_2_3_BROKE
        }
    }
ends

defstate monitor_1_code
    cstator 257
    set actor_static 1
    geta[].htextra temp
    ifhitweapon
    {
        strength 1
        espawn A_GENERIC_PARTICLE
        seta[RETURN].xrepeat 120
        geta[].yrepeat temp
        shiftl temp 7
        geta[].z temp2
        sub temp2 temp
        seta[RETURN].z temp2
        ifaction AC_BASE
        {
            rand temp3 5
            add temp3 5
            for itervar range temp3
            {
                espawn A_GENERIC_DEBRIS
                setav[RETURN].debris_type DEBRIS_GLASS
                rand temp4 2047
                seta[RETURN].ang temp4
                seta[RETURN].pal 1
            }
            ifwasweapon EXPLOSION
            {
                geta[].picnum surface_type
                state bullet_impact_sound
            }
            cactor A_MONITOR_1_BROKE
        }
    }
ends

useractor notenemy A_MONITOR_2 1 AC_BASE
    state monitor_2_code
enda
useractor notenemy A_MONITOR_3 1 AC_BASE
    state monitor_2_code
enda
useractor notenemy A_MONITOR_4 1 AC_BASE
    state monitor_2_code
enda
useractor notenemy A_MONITOR_5 1 AC_BASE
    state monitor_2_code
enda
useractor notenemy A_MONITOR_6 1 AC_BASE
    state monitor_2_code
enda
useractor notenemy A_MONITOR_7 1 AC_BASE
    state monitor_2_code
enda
useractor notenemy A_MONITOR_8 1 AC_BASE
    state monitor_2_code
enda
useractor notenemy A_MONITOR_9 1 AC_BASE
    state monitor_2_code
enda
useractor notenemy A_MONITOR_10 1 AC_BASE
    state monitor_2_code
enda
useractor notenemy A_MONITOR_11 1 AC_BASE
    state monitor_2_code
enda
useractor notenemy A_MONITOR_12 1 AC_BASE
    state monitor_2_code
enda
useractor notenemy A_MONITOR_13 1 AC_BASE
    state monitor_2_code
enda
useractor notenemy A_MONITOR_14 1 AC_BASE
    state monitor_2_code
enda

useractor notenemy A_MONITOR_15 1 AC_BASE
    state monitor_1_code
enda

useractor notenemy A_MONITOR_16 1 AC_BASE
    state monitor_1_code
enda

useractor notenemy A_MONITOR_2_3_BROKE 1 AC_BASE
    changespritestat THISACTOR STAT_DEFAULT
enda

// lg versions
useractor notenemy A_MONITOR_2_LG 1 AC_BASE
    state monitor_2_code
enda
useractor notenemy A_MONITOR_3_LG 1 AC_BASE
    state monitor_2_code
enda
useractor notenemy A_MONITOR_2_3_BROKE_LG 1 AC_BASE
    changespritestat THISACTOR STAT_DEFAULT
enda

defstate liquid_container_destroy
    espawn A_GENERIC_PARTICLE
    seta[RETURN].xrepeat 125
    switch sprite[].picnum
        case A_BOTTLE_1
        case A_BOTTLESIDE_1
        case A_COFFEEMUG_1
        case A_COFFEEPOT
            setav[RETURN].particle_force_pal 3
            break
        case A_BOTTLE_2
        case A_BOTTLE_2_EMPTY
        case A_TEACUP_1
            setav[RETURN].particle_force_pal 12
            break
        case A_SODA_1
        case A_SODASIDE_1
            ifspritepal 14
            {
                setav[RETURN].particle_force_shade 0
                setav[RETURN].particle_force_pal 12
            }
            else ifspritepal 25
            {
                setav[RETURN].particle_force_shade 0
                setav[RETURN].particle_force_pal 25
            }
            else
            {
                setav[RETURN].particle_force_pal 1
                ifspritepal 16
                    setav[RETURN].particle_force_shade 0
                else
                    setav[RETURN].particle_force_shade 19
            }
            break
        case A_BEAKER_1
        case A_BEAKER_2
        case A_BONG
        case A_WATERGLASS_FULL
        case A_MARTINIGLASS_FULL
        case A_CHAMPAGNEGLASS_FULL
        case A_WINEGLASS_FULL
        case A_BEERGLASS_FULL
        case A_SHAKER_FULL_1
        case A_SHAKER_FULL_2
        case A_BLUESAUCE
        case A_LIGHTSAUCE
        case A_DARKSAUCE
            setav[RETURN].particle_force_pal sprite[].pal
            break
        case A_GLASSCLEANER
        case A_DETERGENT
        case A_HANDSOAP
            setav[RETURN].particle_force_pal 6
            break
    endswitch
    geta[].z temp2
    sub temp2 1024
    seta[RETURN].z temp2
    espawn A_GENERIC_PARTICLE
    seta[RETURN].xrepeat 124
    switch sprite[].picnum
        case A_BOTTLE_1
        case A_BOTTLESIDE_1
        case A_COFFEEMUG_1
        case A_COFFEEPOT
            setav[RETURN].particle_force_pal 3
            break
        case A_BOTTLE_2
        case A_BOTTLE_2_EMPTY
        case A_TEACUP_1
            setav[RETURN].particle_force_pal 12
            break
        case A_JUG_1
            setav[RETURN].particle_force_pal 4
            break
        case A_SODA_1
        case A_SODASIDE_1
            ifspritepal 14
            {
                setav[RETURN].particle_force_shade 0
                setav[RETURN].particle_force_pal 12
            }
            else ifspritepal 25
            {
                setav[RETURN].particle_force_shade 0
                setav[RETURN].particle_force_pal 25
            }
            else
            {
                setav[RETURN].particle_force_pal 1
                ifspritepal 16
                    setav[RETURN].particle_force_shade 0
                else
                    setav[RETURN].particle_force_shade 19
            }
            break
        case A_BEAKER_1
        case A_BEAKER_2
        case A_BONG
        case A_WATERGLASS_FULL
        case A_MARTINIGLASS_FULL
        case A_CHAMPAGNEGLASS_FULL
        case A_WINEGLASS_FULL
        case A_BEERGLASS_FULL
        case A_BLUESAUCE
        case A_LIGHTSAUCE
        case A_DARKSAUCE
            setav[RETURN].particle_force_pal sprite[].pal
            break
        case A_SHAKER_FULL_1
        case A_SHAKER_FULL_2
            seta[RETURN].xrepeat 0
            seta[RETURN].statnum STAT_ACTOR
            seta[RETURN].cstat 32768
            break
        case A_GLASSCLEANER
        case A_DETERGENT
        case A_HANDSOAP
            setav[RETURN].particle_force_pal 6
            break
    endswitch
    geta[].z temp2
    // sub temp2 256
    seta[RETURN].z temp2
    geta[].sectnum db_temp
    set db_temp tainted[db_temp]
    ifactor A_JUG_2
        set db_temp 1
    else ifactor A_SHAKER_FULL_1
        set db_temp 1
    else ifactor A_SHAKER_FULL_2
        set db_temp 1
    ife db_temp 0
    {
        espawn A_GENERIC_BLOODSPLATTER
        getflorzofslope sprite[].sectnum sprite[].x sprite[].y db_temp
        seta[RETURN].z db_temp
        switch sprite[].picnum
            case A_BOTTLE_1
            case A_BOTTLESIDE_1
            case A_COFFEEMUG_1
            case A_COFFEEPOT
                seta[RETURN].pal 3
                seta[RETURN].shade sector[sprite[].sectnum].floorshade
                break
            case A_BOTTLE_2
            case A_BOTTLE_2_EMPTY
            case A_TEACUP_1
                seta[RETURN].pal 12
                seta[RETURN].shade sector[sprite[].sectnum].floorshade
                break
            case A_SODA_1
            case A_SODASIDE_1
                 ifspritepal 14
                {
                    seta[RETURN].pal 12
                    seta[RETURN].shade sector[sprite[].sectnum].floorshade
                }
                else ifspritepal 16
                {
                    seta[RETURN].pal 64
                    seta[RETURN].shade sector[sprite[].sectnum].floorshade
                }
                else ifspritepal 25
                {
                    seta[RETURN].pal 8
                    seta[RETURN].shade sector[sprite[].sectnum].floorshade
                }
                else
                {
                    seta[RETURN].pal 1
                    seta[RETURN].shade 19
                }
                break
            case A_BUCKET_1
                seta[RETURN].pal 7
                seta[RETURN].shade sector[sprite[].sectnum].floorshade
                break
            case A_JUG_1
                seta[RETURN].pal 4
                seta[RETURN].shade sector[sprite[].sectnum].floorshade
                break
            case A_BEAKER_1
            case A_BEAKER_2
            case A_BONG
                geta[].pal temp
                ifg temp 12
                    sub temp 12
                ife temp 0
                    set temp 7
                seta[RETURN].pal temp
                seta[RETURN].shade sector[sprite[].sectnum].floorshade
                break
            case A_WATERGLASS_FULL
            case A_MARTINIGLASS_FULL
            case A_CHAMPAGNEGLASS_FULL
            case A_WINEGLASS_FULL
            case A_BEERGLASS_FULL
                geta[].pal temp
                ifg temp 12
                    sub temp 12
                clamp temp 0 12
                ife temp 0
                    set temp 7
                seta[RETURN].pal temp
                seta[RETURN].shade sector[sprite[].sectnum].floorshade
                break
            case A_GLASSCLEANER
            case A_DETERGENT
            case A_HANDSOAP
                seta[RETURN].pal 69
                seta[RETURN].shade sector[sprite[].sectnum].floorshade
                break
            case A_BLUESAUCE
            case A_LIGHTSAUCE
            case A_DARKSAUCE
                geta[].pal temp
                mod temp 12
                seta[RETURN].pal temp
                seta[RETURN].shade 0
                break
        endswitch

        switch sprite[].picnum
            case A_BUCKET_1
            case A_COFFEEPOT
                seta[RETURN].xrepeat 8
                seta[RETURN].yrepeat 8
                break
            case A_JUG_1
            case A_DETERGENT
                seta[RETURN].xrepeat 9
                seta[RETURN].yrepeat 9
                break
            default
                seta[RETURN].xrepeat 5
                seta[RETURN].yrepeat 5
                break
        endswitch

        seta[RETURN].cstat 160
        rand db_temp 2047
        seta[RETURN].ang db_temp
    }
    switch sprite[].picnum
        case A_TEACUP_1
        case A_COFFEEMUG_1
        case A_BUCKET_1
            rand temp3 8
            add temp3 12
            break
        default
            rand temp3 5
            add temp3 5
            break
    endswitch
    ifn temp3 0 for itervar range temp3
    {
        espawn A_GENERIC_DEBRIS
        switch sprite[].picnum
            case A_BOTTLE_1
            case A_BOTTLESIDE_1
            case A_BOTTLE_2
            case A_BOTTLE_2_EMPTY
                setav[RETURN].debris_type DEBRIS_GLASS
                ifactor A_BOTTLE_1
                {
                    ifspritepal 0
                        seta[RETURN].pal 3
                    else
                        seta[RETURN].pal sprite[].pal
                }
                else ifactor A_BOTTLESIDE_1
                {
                    ifspritepal 0
                        seta[RETURN].pal 3
                    else
                        seta[RETURN].pal sprite[].pal
                }
                set temp sector[].floorshade
                ifl temp 10
                    add temp 10
                setav[RETURN].particle_force_shade temp
                break
            case A_SODA_1
            case A_SODASIDE_1
            case A_BUCKET_1
                setav[RETURN].debris_type DEBRIS_METAL
                ifactor A_BUCKET_1
                {
                    ifspritepal 0
                        seta[RETURN].pal 7
                    else
                        seta[RETURN].pal sprite[].pal
                }
                break
            case A_TEACUP_1
            case A_COFFEEMUG_1
                setav[RETURN].debris_type DEBRIS_ROCK
                ifspritepal 0
                {
                    seta[RETURN].pal 64
                    set temp sector[].floorshade
                    rand temp2 5
                    add temp2 3
                    ifg temp 8
                        sub temp temp2
                }
                else
                {
                    seta[RETURN].pal sprite[].pal
                    set temp sector[].floorshade
                    sub temp 4
                }
                setav[RETURN].particle_force_shade temp
                break
            case A_BEAKER_1
            case A_BEAKER_2
            case A_BONG
            case A_COFFEEPOT
            case A_WATERGLASS_FULL
            case A_MARTINIGLASS_FULL
            case A_CHAMPAGNEGLASS_FULL
            case A_WINEGLASS_FULL
            case A_BEERGLASS_FULL
            case A_SHAKER_FULL_1
            case A_SHAKER_FULL_2
                setav[RETURN].debris_type DEBRIS_GLASS
                set temp sector[].floorshade
                ifl temp 10
                    add temp 10
                setav[RETURN].particle_force_shade temp
                break
            case A_JUG_1
            case A_JUG_2
            case A_GLASSCLEANER
            case A_DETERGENT
            case A_HANDSOAP
            case A_BLUESAUCE
            case A_LIGHTSAUCE
            case A_DARKSAUCE
                setav[RETURN].debris_type DEBRIS_PLASTIC
                seta[RETURN].pal sprite[].pal
                break
        endswitch
        rand temp4 2047
        seta[RETURN].ang temp4
    }
    ifwasweapon EXPLOSION
    {
        geta[].picnum surface_type
        state bullet_impact_sound
    }
ends

defstate glassobj_fall
    iffloordistl 1
    {
        ifg se_xvel 5 // reuse
        {
            seta[].htextra 100
            geta[].picnum surface_type
            switch surface_type
                case A_TEACUP_1
                case A_COFFEEMUG_1
                case A_PLATE_DESSERT
                case A_PAPERTOWEL
                case A_PLATE
                case A_PLATE_STACK
                    break
                default
                    set surface_type SURFACE_GLASS
                    state bullet_impact_sound
                    break
            endswitch
        }
        set se_xvel 0
    }
    else
        add se_xvel 1
ends

useractor notenemy A_BOTTLE_1 1 AC_BASE
    state do_moveable
    state glassobj_fall
    set temp actor_moveable_xv
    add temp actor_moveable_yv
    ifn temp 0
        ifrnd 8
        {
            action AC_BASE12
            cactor A_BOTTLESIDE_1
        }
    ifhitweapon
    {
        state liquid_container_destroy
        killit
    }
enda

useractor notenemy A_BOTTLESIDE_1 1 AC_BASE12
    state do_moveable
    state glassobj_fall
    set temp actor_moveable_xv
    add temp actor_moveable_yv
    ifn temp 0
    {
        getangle temp actor_moveable_xv actor_moveable_yv
        geta .ang temp2
        set temp3 temp2
        sub temp2 temp
        ifg temp2 1023
            sub temp2 2048
        ifl temp2 -1023
            add temp2 2048
        set temp4 temp2
        shiftr temp2 2
        ife temp2 0
            ifn temp4 0
                set temp2 temp4
        add temp3 temp2
        seta .ang temp3
    }
    ifhitweapon
    {
        state liquid_container_destroy
        killit
    }
enda

useractor notenemy A_BOTTLE_2 1 AC_BASE
    state do_moveable
    state glassobj_fall

        
    set actor_switch 1
    ifhitspace
    {
        ifpdistl 1536 ife actor_switch_usable 1 ife switch_wait 0
        {
            sound S_CORKPULL
            cactor A_BOTTLE_2_EMPTY
            add shakeitbaby 2
            add shakeitbabymed 10
            palfrom 10 40 0 0
        }
        set switch_wait 1
    }
    else
        set switch_wait 0
    set actor_switch_usable 0
    ifhitweapon
    {
        state liquid_container_destroy
        killit
    }
enda
useractor notenemy A_BOTTLE_2_EMPTY 1 AC_BASE
    state do_moveable
    state glassobj_fall
    ifhitweapon
    {
        state liquid_container_destroy
        killit
    }
enda

// soda health

damageeventtile 9250

appendevent EVENT_DAMAGEWALL
    switch wall[RETURN].picnum
        case 9250
            switch sprite[THISACTOR].picnum
                case BULLET
                case EXPLOSION
                    getw[RETURN].picnum dwall_temp
                    add dwall_temp 1
                    setw[RETURN].picnum dwall_temp
                    break
                default
                    ifg sprite[THISACTOR].extra 0
                    {
                        getw[RETURN].picnum dwall_temp
                        add dwall_temp 1
                        setw[RETURN].picnum dwall_temp
                    }
                    break
            endswitch
            break
    endswitch
endevent


appendevent EVENT_DAMAGEFLOOR
    switch sector[RETURN].floorpicnum
        case 9250
            switch sprite[THISACTOR].picnum
                case BULLET
                case EXPLOSION
                    gets[RETURN].floorpicnum dwall_temp
                    add dwall_temp 1
                    sets[RETURN].floorpicnum dwall_temp
                    break
                default
                    ifg sprite[THISACTOR].extra 0
                    {
                        gets[RETURN].floorpicnum dwall_temp
                        add dwall_temp 1
                        sets[RETURN].floorpicnum dwall_temp
                    }
                    break
            endswitch
            break
    endswitch
endevent

appendevent EVENT_DAMAGECEILING
    switch sector[RETURN].ceilingpicnum
        case 9250
            switch sprite[THISACTOR].picnum
                case BULLET
                case EXPLOSION
                    gets[RETURN].ceilingpicnum dwall_temp
                    add dwall_temp 1
                    sets[RETURN].ceilingpicnum dwall_temp
                    break
                default
                    ifg sprite[THISACTOR].extra 0
                    {
                        gets[RETURN].ceilingpicnum dwall_temp
                        add dwall_temp 1
                        sets[RETURN].ceilingpicnum dwall_temp
                    }
                    break
            endswitch
            break
    endswitch
endevent


appendevent EVENT_DAMAGESPRITE
    switch sprite[RETURN].picnum
        case A_SODA_DISPENSER
            ifand sprite[RETURN].cstat 256
            {
                geta[RETURN].cstat dwall_temp
                xor dwall_temp 256
                seta[RETURN].cstat dwall_temp                
            }
            break
    endswitch
endevent

damageeventtile A_SODA_DISPENSER
action AC_SODA_DISP 0 1 1 1 1
action AC_SODA_DISP_SND 0 1 1 1 1
var dispenser_wall -1 2
useractor notenemy A_SODA_DISPENSER 0 AC_SODA_DISP
    cstat 33552
    set actor_switch 1
//    ife counter2 1
        soundonce S_VENDING_HUM_LOOP
    ife counter3 0
    {
        geta .ang temp6
        add temp6 1024
        and temp6 2047
        set temp4 tilesizy[sprite[].picnum]
        shiftl temp4 2
        mul temp4 sprite[].yrepeat
        geta .z temp
        sub temp temp4
        cos h_cos temp6
        sin h_sin temp6
        set h_zvel 0
        hitscan sprite[].x sprite[].y temp4 sprite[].sectnum h_cos h_sin h_zvel hitsect hitwall hitsprite hitx hity hitz CLIPMASK0
        
        ifn hitwall -1
        {
            switch wall[hitwall].picnum
                case 9250
                case 9251
                    set dispenser_wall hitwall
                    break
            endswitch
        }
        else
        {
            add temp6 1024
            and temp6 2047
            cos h_cos temp6
            sin h_sin temp6
            set h_zvel 0
            hitscan sprite[].x sprite[].y temp4 sprite[].sectnum h_cos h_sin h_zvel hitsect hitwall hitsprite hitx hity hitz CLIPMASK0
            ifn hitwall -1
            {
                switch wall[hitwall].picnum
                    case 9250
                    case 9251
                        set dispenser_wall hitwall
                        break
                endswitch
            }
        }
        set counter3 10
    }
    else ife dispenser_wall -1
        sub counter3 1
    ifn dispenser_wall -1
    {
        ife wall[dispenser_wall].picnum 9251
            seta .htextra 100
        else ifg sprite.htextra 0
            ifn wall[dispenser_wall].picnum 9251
                setw[dispenser_wall].picnum 9251
    }
    ifaction AC_SODA_DISP_SND
    {
        ife sprite.htg_t 2 1
            sound S_COIN_INSERT
        ife sprite.htg_t 2 4
            sound S_VENDING_DISPENSE
        ife sprite.htg_t 2 18
        {
            espawn I_SODA
            set temp4 tilesizy[sprite[].picnum]
            shiftl temp4 2
            mul temp4 sprite[].yrepeat
            ifspritepal 9
                shiftr temp4 1
            else
                shiftr temp4 3
            clamp temp4 1 65536
            geta .z temp3
            sub temp3 temp4
            seta[RETURN].z  temp3
            ifspritepal 9
            {
                geta .ang temp
                add temp 1536
                and temp 2047
                seta[RETURN].ang temp
                set temp4 tilesizx[sprite.picnum]
                mul temp4 sprite.xrepeat
                shiftr temp4 3
                seta[RETURN].xvel temp4
                ssp RETURN 0
            }
            rand temp 512
            ifrnd 127
            {
                inv temp
                shiftr temp 1
            }
            seta[RETURN].zvel temp
            rand temp 128
            ifrnd 127
                inv temp
            add temp sprite.ang
            and temp 2047
            seta[RETURN].ang temp
            seta[RETURN].xvel 32
            ssp RETURN 0
            seta[RETURN].xvel 128
            set temp counter
            add temp 97
            seta[RETURN].pal temp
        }
        ifactioncount 26
            action AC_SODA_DISP
        break
    }
    ifhitspace
    {
        ife actor_switch_usable 1
        {
            ifpdistl 1536
            {
                ifactioncount 2
                {
                    ife counter 5
                    {
                        ifactorsound player.i S_SHELLY_SEARCHTALK1
                            nullop
                        else
                            actorsound player.i S_SHELLY_SEARCHTALK1
                    }
                    else
                    {
                        action AC_SODA_DISP_SND
                        add counter 1
                    }
                }
            }
        }
        resetactioncount
    }
    set actor_switch_usable 0
    ifhitweapon
    {
        stopactorsound THISACTOR S_VENDING_HUM_LOOP
        ifl counter 2
            set counter 2
        set temp7 counter
        sub temp7 5
        abs temp7
        setp .sound_pitch 480
        sound S_VENDING_DISPENSE
        setp .sound_pitch -480
        sound S_SMASH_GLASSLAMP
        setp .sound_pitch 0
        for itervar range temp7
        {
            espawn I_SODA
            set temp4 tilesizy[sprite[].picnum]
            shiftl temp4 2
            mul temp4 sprite[].yrepeat
            ifspritepal 9
                shiftr temp4 1
            else
                shiftr temp4 3
            clamp temp4 1 65536
            geta .z temp3
            sub temp3 temp4
            seta[RETURN].z  temp3
            ifspritepal 9
            {
                geta .ang temp
                add temp 1536
                and temp 2047
                seta[RETURN].ang temp
                set temp4 tilesizx[sprite.picnum]
                mul temp4 sprite.xrepeat
                shiftr temp4 4
                rand temp temp4
                add temp 32
                ifrnd 127
                    inv temp
                seta[RETURN].xvel temp
                ssp RETURN 0
            }
            rand temp 512
            ifrnd 127
            {
                inv temp
                shiftr temp 1
            }
            seta[RETURN].zvel temp
            rand temp 128
            ifrnd 127
                inv temp
            add temp sprite.ang
            and temp 2047
            seta[RETURN].ang temp
            seta[RETURN].xvel 32
            ssp RETURN 0
            seta[RETURN].xvel 256
            set temp counter
            add temp 97
            seta[RETURN].pal temp
            add counter 1
        }
        
        killit
    }
enda

// pickup AND moveable
action AC_SODA_12 0 1 12 1 1
action AC_SODA_12_ROLL 12 2 12 1 8
action AC_SODA_12_ROLL2 -54 2 12 1 8
spritenoshade I_SODA
spritenoshade I_SODA_STAND
spritenoshade A_SODA_1
spritenoshade A_SODASIDE_1
defstate killacan
    add p_pizza_health 2
    getp .sound_pitch temp5
    setp .sound_pitch 128
    globalsound S_PICKUP01
    setp .sound_pitch temp5
    or p_wantline TALK_SODA
    quote 40
    palfrom 15 5 32 5
    sound S_ITEM_CAN
    redefinequote 115 gamestate.bin
    readarrayfromfile gamestate 115
    set temp gamestate[6]

    add temp 1
    setarray gamestate[6] temp
    writearraytofile gamestate 115
    or cheevo_tracker 2048

    killit
ends
defstate soda_side_code
    fall
    sizeat 16 14
    cstat 769
    gets[].floorshade temp
    ifg temp 15
    {
        sub temp 2
        clamp temp 15 25
    }
    else
        clamp temp 15 25
    
    ife st_do_once 0
    {
        set se_shade temp
        set st_do_once 1
    }
    set temp2 counter
    ifl counter 12
    {
        sub temp temp2
    }
    else
    {
        set temp2 counter
        sub temp2 24
        abs temp2
        sub temp temp2
    }
    sub temp 3
    seta[].shade temp
    add shardblink 1
    ifg shardblink 2
    {
        add counter 1
        ife counter 24
            set counter 0
        set shardblink 0
    }
    clipdist 6
    set prop_adjustmass 8
    state do_moveable
    geta .xvel temp
    ifg temp 0
    {
        set move_v temp
        state move_actor
        set actor_moveable_xv move_xv
        set actor_moveable_yv move_yv
        seta .xvel 0
        ifaction AC_SODA_12
        {
            ifactor A_SODASIDE_1
                action AC_SODA_12_ROLL2
            else
                action AC_SODA_12_ROLL
        }
    }
    else
    {
        set temp actor_moveable_xv
        add temp actor_moveable_yv
        ife temp 0
        {
            ifaction AC_SODA_12
                nullop
            else
                action AC_SODA_12
        }
        else ifaction AC_SODA_12
        {
            ifactor A_SODASIDE_1
                action AC_SODA_12_ROLL2
            else
                action AC_SODA_12_ROLL
        }
    }
    geta .htextra temp
    ifhitweapon
    {
        strength 1
        shiftl temp 1
        set move_v temp
        seta .ang sprite.htang
        state move_actor
        add actor_moveable_xv move_xv
        add actor_moveable_yv move_yv
    }
    
    set actor_switch 1
    
    set temp 0
    ifhitspace set temp 1
    else ifphealthl MAXPLAYERHEALTH set temp 1
    
    ife temp 1
    {
        ife se_extra 0
        {
            ife actor_switch_usable 1
            {
                ifpdistl 1536
                {
                    ifactioncount 2
                        state killacan
                }
            }
        }
        set se_extra 1
    }
    else
        set se_extra 0
    ifl counter3 p_pizza_health
        resetcount
    ifcount 8
    {
        ifpdistl RETRIEVEDISTANCE ifcanseetarget ifp palive
        {
            ifg p_pizza_count 60
                set p_pizza_count 60
            state killacan
        }
        resetcount
    }
    set counter3 p_pizza_health
    set actor_switch_usable 0
ends

useractor notenemy I_SODA 0 AC_SODA_12
    state soda_side_code
enda
defstate soda_stand_code
    fall
    sizeat 16 14
    cstat 769
    gets[].floorshade temp
    ifg temp 15
    {
        sub temp 2
        clamp temp 15 25
    }
    else
        clamp temp 15 25
    
    ife st_do_once 0
    {
        set se_shade temp
        set st_do_once 1
    }
    set temp2 counter
    ifl counter 12
    {
        sub temp temp2
    }
    else
    {
        set temp2 counter
        sub temp2 24
        abs temp2
        sub temp temp2
    }
    sub temp 3
    seta[].shade temp
    add shardblink 1
    ifg shardblink 2
    {
        add counter 1
        ife counter 24
            set counter 0
        set shardblink 0
    }
    clipdist 6
    set prop_adjustmass 8
    state do_moveable
    geta .xvel temp
    ifg temp 0
    {
        set move_v temp
        state move_actor
        set actor_moveable_xv move_xv
        set actor_moveable_yv move_yv
        seta .xvel 0
    }
    geta .htextra temp
    ifhitweapon
    {
        strength 1
        shiftl temp 1
        set move_v temp
        seta .ang sprite.htang
        state move_actor
        add actor_moveable_xv move_xv
        add actor_moveable_yv move_yv
        action AC_SODA_12
        ifactor A_SODA_1
            cactor A_SODASIDE_1
        else
            cactor I_SODA
    }
    
    set actor_switch 1
    
    set temp 0
    ifhitspace set temp 1
    else ifl sprite[player.i].extra player.max_player_health set temp 1
    
    ife temp 1
    {
        ife se_extra 0
        {
            ife actor_switch_usable 1
            {
                ifpdistl 1536
                {
                    ifactioncount 2
                        state killacan
                }
            }
        }
        set se_extra 1
    }
    else
        set se_extra 0
    ifl counter3 p_pizza_health
        resetcount
    ifcount 8
    {
        ifpdistl RETRIEVEDISTANCE ifcanseetarget ifp palive
        {
            ifg p_pizza_count 60
                set p_pizza_count 60
            state killacan
        }
        resetcount
    }
    set counter3 p_pizza_health
    set actor_switch_usable 0
ends
useractor notenemy I_SODA_STAND 0 AC_BASE
    state soda_stand_code
enda

useractor notenemy A_SODA_1 1 AC_BASE
    state soda_stand_code
    /* state do_moveable
    ifhitweapon
    {
        state liquid_container_destroy
        killit
    } */
enda

useractor notenemy A_SODASIDE_1 1 AC_BASE
    state soda_side_code
    /* state do_moveable
    ifhitweapon
    {
        state liquid_container_destroy
        killit
    } */
enda


// end soda
// random edibles

defstate random_edible
    clipdist 10
    state do_moveable
    set actor_switch 1
    set temp 0
    ifhitspace
    {
        ifpdistl 1536 ife actor_switch_usable 1 ife switch_wait 0
        {
            add p_pizza_health 3
            ifactor A_MCMONSTER
            {
                ifg sprite[player.i].extra 1
                {
                    addphealth -1
                    add p_pizza_health 12
                }
                else
                    add p_pizza_health 12
            }
            else ifactor A_TOGOCOFFEE
            {
                sound S_MP_ON
                add shakeitbabymed 30
                add p_pizza_health 2
            }
            palfrom 15 5 32 5
            globalsound S_PICKUP01
            ifand counter3 1
                or p_wantline TALK_SODA
            else
                or p_wantline TALK_EAT
           killit
        }
        set switch_wait 1
    }
    else
        set switch_wait 0
    set actor_switch_usable 0
    ifhitweapon
    {
        geta[].picnum surface_type
        state bullet_impact_sound
        
        espawn A_GENERIC_PARTICLE
        seta[RETURN].xrepeat 125

        setav[RETURN].particle_force_shade 5
        setav[RETURN].particle_force_pal 3

        geta[].z temp2
        sub temp2 1024
        seta[RETURN].z temp2
        espawn A_GENERIC_PARTICLE
        seta[RETURN].xrepeat 124
        setav[RETURN].particle_force_shade 5
        setav[RETURN].particle_force_pal 3
        
        geta[].z temp2
        seta[RETURN].z temp2
        geta .sectnum db_temp
        set db_temp tainted[db_temp]
        ife db_temp 0
        {
            espawn A_GENERIC_BLOODSPLATTER
            getflorzofslope sprite[].sectnum sprite[].x sprite[].y db_temp
            seta[RETURN].z db_temp

            seta[RETURN].pal 3
            seta[RETURN].shade sector[sprite[].sectnum].floorshade
            seta[RETURN].xrepeat 5
            seta[RETURN].yrepeat 5

            seta[RETURN].cstat 160
            rand db_temp 2047
            seta[RETURN].ang db_temp
        }

        rand temp3 3
        add temp3 3
        ifand counter3 2
        {
            for itervar range temp3
            {
                espawn A_GENERIC_DEBRIS
                setav[RETURN].debris_type DEBRIS_PLASTIC
                seta[RETURN].pal sprite.pal
                rand temp4 2047
                seta[RETURN].ang temp4
            }
        }
        killit
    }
ends

defstate random_edible_liquid
    or counter3 1
    state random_edible
ends
appendevent EVENT_SPAWN
    switch sprite.picnum
        case A_BARSTOOL:
            sizeat 25 25
            cstat 257
            break
        case A_STOOL:
            sizeat 20 20
            cstat 257
            break
        case A_DART:
            sizeat 13 12
            cstat 512
            break
        case A_MEATGIB:
            sizeat 16 14
            cstat 257
            break
        case A_BIGTHERMOS:
            sizeat 16 15
            cstat 257
            break
        case A_TOGOCOFFEE:
            sizeat 16 12
            cstat 257
            break
        case A_BLUESAUCE:
        case A_LIGHTSAUCE:
        case A_DARKSAUCE:
            sizeat 15 12
            cstat 257
            break
        case A_FRENCHFRIES:
            sizeat 14 13
            cstat 257
            break
        case A_TOGOCOCK:
            sizeat 16 15
            cstat 257
            break
        case A_TACO:
            sizeat 14 10
            cstat 257
            break
        case A_HOTDOG:
            sizeat 14 11
            cstat 257
            break
        case A_FLATTRAY:
        case A_FLATTRAYPIC:
            sizeat 18 18
            cstat 32
            break
        case A_SAUSAGE:
            sizeat 15 12
            cstat 257
            break
        case A_TOGOCHINESE:
        case A_BURGER:
        case A_MCMONSTER:
            sizeat 14 14
            cstat 257
            break
        case A_ARCADE_STICK_BASE:
            sizeat 8 8
            cstat 544
            break
        case A_ARCADE_BUTTON:
            sizeat 4 4
            cstat 544
            break
        case A_ARCADE_STICK:
            sizeat 4 4
            cstat 512
            break
    endswitch
endevent
useractor notenemy A_MEATGIB 1 AC_BASE state random_edible enda
// define A_BIGTHERMOS                     10952    // 16,15
useractor notenemy A_TOGOCOFFEE 1 AC_BASE or counter3 2 state random_edible_liquid enda
useractor notenemy A_BURGER 1 AC_BASE state random_edible enda
// define A_FLATTRAY                       10969    // 18,18    CSTAT 32 (FLAT)
// define A_BLUESAUCE                      10955    // 15,12
// define A_LIGHTSAUCE                     10964    // 15,12
// define A_DARKSAUCE                      10963    //15,12
useractor notenemy A_FRENCHFRIES 1 AC_BASE or counter3 2 state random_edible enda
useractor notenemy A_TOGOCOCK 1 AC_BASE or counter3 2 state random_edible_liquid enda
useractor notenemy A_TACO 1 AC_BASE state random_edible enda
useractor notenemy A_HOTDOG 1 AC_BASE state random_edible enda
useractor notenemy A_TOGOCHINESE 1 AC_BASE or counter3 2 state random_edible enda
// define A_FLATTRAYPIC                    10970    // 18,18    CSTAT 32 (FLAT)
useractor notenemy A_SAUSAGE 1 AC_BASE state random_edible enda
useractor notenemy A_MCMONSTER 1 AC_BASE state random_edible enda
useractor notenemy A_BURGERPATTY 1 AC_BASE state random_edible enda

// end random edibles

defstate sauces_code
    state do_moveable
    ifhitweapon
    {
        state liquid_container_destroy
        killit
    }
ends
useractor notenemy A_BLUESAUCE 1 AC_BASE state sauces_code enda
useractor notenemy A_LIGHTSAUCE 1 AC_BASE state sauces_code enda
useractor notenemy A_DARKSAUCE 1 AC_BASE state sauces_code enda
useractor notenemy A_TEACUP_1 1 AC_BASE
    state do_moveable
    state glassobj_fall
    ifhitweapon
    {
        state liquid_container_destroy
        sound S_IMPACT_MUGSMASH
        killit
    }
enda

useractor notenemy A_COFFEEMUG_1 1 AC_BASE
    state do_moveable
    state glassobj_fall
    ifhitweapon
    {
        state liquid_container_destroy
        sound S_IMPACT_MUGSMASH
        killit
    }
enda

useractor notenemy A_ARCADE_BUTTON 0 AC_BASE
    set actor_switch 1
    set counter 0
    ifhitspace
        ifpdistl 1024
            ife actor_switch_usable 1
                set counter 1
    seta .htg_t 2 counter
    seta .htg_t 3 counter
    ifn counter2 counter
        sound S_SWITCH_SNAPPY
    set counter2 counter
    set actor_switch_usable 0
enda

useractor notenemy A_ARCADE_STICK 0 AC_BASE
    set actor_switch 1
    ife switch_wait 0
    {
        ife counter3 0
        {
            ifn counter 0
                set counter 0
        }
        else
            sub counter3 1
        ifhitspace
            ifpdistl 1024
                ife actor_switch_usable 1
                {
                    rand counter 2
                    set switch_wait 1
                }
    }
    else
        set switch_wait 0
    ifg counter 1
        sub counter 3
    seta .htg_t 2 counter
    seta .htg_t 3 counter
    ifn counter2 counter
    {
        sound S_SWITCH_SMALL02
        set counter3 2
    }
    set counter2 counter
    set actor_switch_usable 0
enda

spritenoshade A_BEAKER_1
defstate beakercode
    cstator 2
    state do_moveable
    gets[].floorshade temp
    sub temp 10
    clamp temp 0 127
    seta[].shade temp
    state glassobj_fall
    ifhitweapon
    {
        ifactor A_BEAKER_3
        {
            rand temp3 5
            add temp3 5
            for itervar range temp3
            {
                seta .ang sprite.htang
                espawn A_GENERIC_DEBRIS
                setav[RETURN].debris_type DEBRIS_GLASS
                set temp sector[].floorshade
                ifl temp 10
                    add temp 10
                setav[RETURN].particle_force_shade temp
            }
            ifwasweapon EXPLOSION
            {
                geta[].picnum surface_type
                state bullet_impact_sound
            }
        }
        else
            state liquid_container_destroy
        killit
    }
ends
useractor notenemy A_BEAKER_1 1 AC_BASE
    state beakercode
enda
spritenoshade A_BEAKER_2
useractor notenemy A_BEAKER_2 1 AC_BASE
    state beakercode
enda
spritenoshade A_BEAKER_3
useractor notenemy A_BEAKER_3 1 AC_BASE
    state beakercode
enda
spritenoshade A_BONG
useractor notenemy A_BONG 1 AC_BASE
    state beakercode
enda

useractor notenemy A_BUCKET_1 1 AC_BASE
    state do_moveable
    ifhitweapon
    {
        state liquid_container_destroy
        rand temp3 8
        add temp3 12
        for itervar range temp3
        {
            espawn A_GENERIC_PARTICLE
            seta[RETURN].xrepeat 129
            setav[RETURN].particle_force_pal 7
            gets[].floorshade temp2
            sub temp2 7
            setav[RETURN].particle_force_shade temp2
            geta[].z temp2
            seta[RETURN].z temp2
            // sub temp3 1
        }
        killit
    }
enda

useractor notenemy A_JUG_1 1 AC_BASE
    state do_moveable
    ifhitweapon
    {
        state liquid_container_destroy
        killit
    }
enda

useractor notenemy A_JUG_2 1 AC_BASE
    state do_moveable
    ifhitweapon
    {
        state liquid_container_destroy
        espawn A_EXPLOSION
        seta[RETURN].xrepeat 12
        seta[RETURN].yrepeat 12
        seta[RETURN].cstat 32768
        geta[].z temp
        add temp 0
        setav[RETURN].smoke_offset 2048
        seta[RETURN].z temp
        hitradius 1536 10 20 30 40
        killit
    }
enda

useractor notenemy A_GLASSCLEANER 1 AC_BASE
    state do_moveable
    ifhitweapon
    {
        state liquid_container_destroy
        killit
    }
enda

useractor notenemy A_DETERGENT 1 AC_BASE
    state do_moveable
    ifhitweapon
    {
        state liquid_container_destroy
        killit
    }
enda

useractor notenemy A_HANDSOAP 1 AC_BASE
    state do_moveable
    ifhitweapon
    {
        state liquid_container_destroy
        killit
    }
enda

useractor notenemy A_COFFEEPOT 1 AC_BASE
    state do_moveable
    state glassobj_fall
    ifhitweapon
    {
        state liquid_container_destroy
        killit
    }
enda

spritenoshade A_WATERGLASS_EMPTY
spritenoshade A_WATERGLASS_FULL
spritenoshade A_MARTINIGLASS_EMPTY
spritenoshade A_MARTINIGLASS_FULL
spritenoshade A_CHAMPAGNEGLASS_EMPTY
spritenoshade A_CHAMPAGNEGLASS_FULL
spritenoshade A_WINEGLASS_EMPTY
spritenoshade A_WINEGLASS_FULL
spritenoshade A_BEERGLASS_EMPTY
spritenoshade A_BEERGLASS_FULL

defstate drinking_glass_empty
    gets[].floorshade temp
    sub temp 10
    clamp temp 0 127
    seta[].shade temp

    state do_moveable
    ifand sprite[].cstat 8
    {
        seta[].yoffset -5
    }
    ifge counter 1
    {
        sub counter 1
        ifle counter 1
        {
            seta[].htextra 1
            geta[].htang temp2
            rand temp3 767
            ifrnd 127
                inv temp3
            add temp2 temp3
            and temp2 2047
            seta[].htang temp2
        }
    }
    state glassobj_fall
    ifhitweapon
    {
        rand temp3 5
        add temp3 5
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_GLASS
            seta[RETURN].ang sprite[].htang
            set temp sector[].floorshade
            ifl temp 10
                add temp 10
            setav[RETURN].particle_force_shade temp
            // sub temp3 1
        }
        ifg se_hitag 0
        {
            for temp sprofstat STAT_ACTOR
            {
                ife sprite[temp].picnum sprite.picnum
                {
                    ife actorvar[temp].se_hitag se_hitag
                        ife actorvar[temp].counter 0
                    {
                        rand temp2 2
                        add temp2 1
                        setav[temp].counter temp2
                    }
                }
            }
        }
        killit
    }
ends
defstate drinking_glass_full
    gets[].floorshade temp
    sub temp 10
    clamp temp 0 127
    seta[].shade temp

    state do_moveable
    set actor_switch 1
    ifhitspace
    {
        ifpdistl 1536 ife actor_switch_usable 1 ife switch_wait 0
        {
            add p_pizza_health 1
            add shakeitbabymed 1
            sound S_STEP_WATER_JUMP1
            or p_wantline 524288
            palfrom 4 5 32 15
            geta .picnum temp
            sub temp 1
            seta .picnum temp
        }
        set switch_wait 1
    }
    else
        set switch_wait 0
    set actor_switch_usable 0
    ifand sprite[].cstat 8
    {
        seta[].yoffset -5
    }
    state glassobj_fall
    ifhitweapon
    {
        state liquid_container_destroy
        killit
    }
ends

defstate loadactor_drinking_glass
    geta[].hitag se_hitag
    seta[].hitag 0
ends
eventloadactor A_WATERGLASS_EMPTY state loadactor_drinking_glass enda
eventloadactor A_MARTINIGLASS_EMPTY state loadactor_drinking_glass enda
eventloadactor A_CHAMPAGNEGLASS_EMPTY state loadactor_drinking_glass enda
eventloadactor A_WINEGLASS_EMPTY state loadactor_drinking_glass enda
eventloadactor A_BEERGLASS_EMPTY state loadactor_drinking_glass enda

useractor notenemy A_WATERGLASS_EMPTY 1 AC_BASE state drinking_glass_empty enda
useractor notenemy A_WATERGLASS_FULL 1 AC_BASE state drinking_glass_full enda
useractor notenemy A_MARTINIGLASS_EMPTY 1 AC_BASE state drinking_glass_empty enda
useractor notenemy A_MARTINIGLASS_FULL 1 AC_BASE state drinking_glass_full enda
useractor notenemy A_CHAMPAGNEGLASS_EMPTY 1 AC_BASE state drinking_glass_empty enda
useractor notenemy A_CHAMPAGNEGLASS_FULL 1 AC_BASE state drinking_glass_full enda
useractor notenemy A_WINEGLASS_EMPTY 1 AC_BASE state drinking_glass_empty enda
useractor notenemy A_WINEGLASS_FULL 1 AC_BASE state drinking_glass_full enda
useractor notenemy A_BEERGLASS_EMPTY 1 AC_BASE state drinking_glass_empty enda
useractor notenemy A_BEERGLASS_FULL 1 AC_BASE state drinking_glass_full enda

spritenoshade A_SHAKER_EMPTY
useractor notenemy A_SHAKER_EMPTY 1 AC_BASE
    gets[].floorshade temp
    sub temp 10
    clamp temp 0 127
    seta[].shade temp

    state do_moveable
    ifand sprite[].cstat 8
    {
        seta[].yoffset -5
    }
    state glassobj_fall
    ifhitweapon
    {
        rand temp3 5
        add temp3 5
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_GLASS
            seta[RETURN].ang sprite[].htang
            set temp sector[].floorshade
            ifl temp 10
                add temp 10
            setav[RETURN].particle_force_shade temp
            // sub temp3 1
        }
        killit
    }
enda


spritenoshade A_SHAKER_FULL_1
useractor notenemy A_SHAKER_FULL_1 1 AC_BASE
    gets[].floorshade temp
    sub temp 10
    clamp temp 0 127
    seta[].shade temp

    state do_moveable
    state glassobj_fall
    ifand sprite[].cstat 8
    {
        seta[].yoffset -5
    }
    ifhitweapon
    {
        state liquid_container_destroy
        killit
    }
enda

spritenoshade A_SHAKER_FULL_2
useractor notenemy A_SHAKER_FULL_2 1 AC_BASE
    gets[].floorshade temp
    sub temp 10
    clamp temp 0 127
    seta[].shade temp

    state do_moveable
    state glassobj_fall
    ifand sprite[].cstat 8
    {
        seta[].yoffset -5
    }
    ifhitweapon
    {
        state liquid_container_destroy
        killit
    }
enda

defstate platecode
    state do_moveable
    state glassobj_fall
    ifhitweapon
    {
        rand temp3 5
        add temp3 5
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_ROCK
            ifspritepal 0
            {
                seta[RETURN].pal 64
                set temp sector[].floorshade
                rand temp2 5
                add temp2 3
                ifg temp 8
                    sub temp temp2
            }
            else
            {
                seta[RETURN].pal sprite[].pal
                set temp sector[].floorshade
                sub temp 4
            }
            setav[RETURN].particle_force_shade temp
            // sub temp3 1
        }
        sound S_IMPACT_MUGSMASH
        rand temp 2
        add temp S_BULLET_GLASS1
        soundvar temp
        killit
    }
ends
useractor notenemy A_PLATE 1 AC_BASE
    state platecode
enda
useractor notenemy A_PLATE_STACK 1 AC_BASE
    state platecode
enda
useractor notenemy A_PLATE_DESSERT 1 AC_BASE
    state platecode
enda

useractor notenemy A_PAPERTOWEL 1 AC_BASE
    state do_moveable
    ifhitweapon
    {
        espawn A_GENERIC_PARTICLE
        seta[RETURN].xrepeat 125
        setav[RETURN].particle_force_pal 80
        geta[].z temp
        sub temp 2048
        seta[RETURN].z temp
        rand temp3 5
        add temp3 5
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_FABRIC
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].pal 80
            seta[RETURN].zvel 1024
        }
        rand temp3 5
        add temp3 5
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_PLASTIC
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].pal 80
            seta[RETURN].zvel 1024
            geta[].z temp4
            add temp4 1024
            seta[RETURN].z temp4
        }
        killit
    }
enda

useractor notenemy A_TRASHBIN 1 AC_BASE
    state do_moveable
    ifhitweapon
    {
        espawn A_GENERIC_PARTICLE
        seta[RETURN].xrepeat 125
        setav[RETURN].particle_force_pal 80
        geta[].z temp
        sub temp 2048
        seta[RETURN].z temp
        rand temp3 2
        add temp3 3
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_FABRIC
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].pal 80
            seta[RETURN].zvel 1024
        }
        rand temp3 3
        add temp3 2
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_PLASTIC

            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].pal 80
            seta[RETURN].zvel 1024
            geta[].z temp4
            add temp4 1024
            seta[RETURN].z temp4
        }
        rand temp3 2
        add temp3 3
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_PLASTIC
            geta[].ang temp4
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].pal 91
            seta[RETURN].zvel 1024
            geta[].z temp4
            add temp4 1024
            seta[RETURN].z temp4
            // sub temp3 1
        }
        rand temp3 2
        add temp3 2
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_WOOD
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].zvel 1024
            geta[].z temp4
            add temp4 1024
            seta[RETURN].z temp4
        }
        rand temp3 5
        add temp3 8
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_METAL
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].zvel 1024
            geta[].z temp4
            add temp4 1024
            seta[RETURN].z temp4
        }
        killit
    }
enda

useractor notenemy A_TOILETPAPER 1 AC_BASE
    state do_moveable
    ifhitweapon
    {
        espawn A_GENERIC_PARTICLE
        seta[RETURN].xrepeat 125
        setav[RETURN].particle_force_pal 80
        geta[].z temp
        sub temp 2048
        seta[RETURN].z temp
        rand temp3 5
        add temp3 6
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_FABRIC
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].pal 80
            seta[RETURN].zvel 1024
        }
        rand temp3 4
        add temp3 4
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_PLASTIC
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].pal 80
            seta[RETURN].zvel 1024
            geta[].z temp4
            add temp4 1024
            seta[RETURN].z temp4
        }
        killit
    }
enda

useractor notenemy A_BROOM_1 1 AC_BASE
    state do_moveable
    ifhitweapon
    {

        rand temp3 5
        add temp3 7
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_WOOD
            rand temp4 2047
            seta[RETURN].ang temp4
        }
        rand temp3 6
        add temp3 6
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_PLASTIC
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].pal 1
        }
        rand temp3 6
        add temp3 6
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_PLASTIC
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].pal sprite[].pal
        }
        rand temp3 5
        add temp3 5
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_FABRIC
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].pal 11
        }
        ifwasweapon EXPLOSION
        {
            geta[].picnum surface_type
            state bullet_impact_sound
        }
        killit
    }
enda


defstate rake_shovel_shared
    rand temp3 2
    add temp3 3
    for itervar range temp3
    {
        espawn A_GENERIC_DEBRIS
        setav[RETURN].debris_type DEBRIS_WOOD
        rand temp4 2047
        seta[RETURN].ang temp4
    }
    rand temp3 5
    add temp3 9
    for itervar range temp3
    {
        espawn A_GENERIC_DEBRIS
        setav[RETURN].debris_type DEBRIS_WOOD
        rand temp4 2047
        seta[RETURN].ang temp4
        set temp2 itervar
        shiftl temp2 8
        inv temp2
        add temp2 sprite.z
        seta[RETURN].z temp2
        
    }
    rand temp3 6
    add temp3 6
    for itervar range temp3
    {
        espawn A_GENERIC_DEBRIS
        setav[RETURN].debris_type DEBRIS_PLASTIC
        rand temp4 2047
        seta[RETURN].ang temp4
        seta[RETURN].pal 2
    }
    ifwasweapon EXPLOSION
    {
        geta[].picnum surface_type
        state bullet_impact_sound
    }
    killit
ends

useractor notenemy A_RAKE 1 AC_BASE
    state do_moveable
    ifhitweapon
    {
        rand temp3 6
        add temp3 6
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_METAL
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].pal 1
        }
        state rake_shovel_shared
    }
enda

useractor notenemy A_SHOVEL 1 AC_BASE
    state do_moveable
    ifhitweapon
    {
        rand temp3 8
        add temp3 12
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_METAL
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].pal 61
            set temp2 itervar
            shiftl temp2 7
            inv temp2
            add temp2 sprite.z
            seta[RETURN].z temp2
        }
        state rake_shovel_shared
    }
enda

useractor notenemy A_MOP_1 1 AC_BASE
    state do_moveable
    ifhitweapon
    {

        rand temp3 5
        add temp3 7
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_WOOD
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].pal 69
        }
        rand temp3 6
        add temp3 6
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_PLASTIC
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].pal 1
        }
        rand temp3 6
        add temp3 6
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_PLASTIC
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].pal sprite[].pal
        }
        rand temp3 5
        add temp3 5
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_FABRIC
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].pal 80
        }
        ifwasweapon EXPLOSION
        {
            geta[].picnum surface_type
            state bullet_impact_sound
        }
        killit
    }
enda

useractor notenemy A_CLOCK 1 AC_BASE
    cstator 257
    set actor_static 1
    ifl sprite[].xrepeat 16
        seta[].xrepeat 16
    else ifl sprite[].yrepeat 16
        seta[].yrepeat 16
    geta[].htextra temp
    ifactorsound THISACTOR S_AMB_CLOCKTICK
        nullop
    else
        sound S_AMB_CLOCKTICK
    ifhitweapon
    {
        strength 1
        espawn A_GENERIC_PARTICLE
        seta[RETURN].xrepeat 120
        geta[].yrepeat temp
        shiftl temp 7
        geta[].z temp2
        sub temp2 temp
        seta[RETURN].z temp2
        geta[].htang temp2
        add temp2 1024
        and temp2 2047
        seta[RETURN].ang temp2
        seta[RETURN].xvel 256
        ssp RETURN 0
        ifaction AC_BASE
        {
            action AC_DMG_1
            rand temp3 5
            add temp3 5
            for itervar range temp3
            {
                espawn A_GENERIC_DEBRIS
                setav[RETURN].debris_type DEBRIS_GLASS
                rand temp4 2047
                seta[RETURN].ang temp4
                seta[RETURN].pal 1
            }
            ifwasweapon EXPLOSION
            {
                geta[].picnum surface_type
                state bullet_impact_sound
            }
            stopactorsound THISACTOR S_AMB_CLOCKTICK
            changespritestat THISACTOR STAT_DEFAULT
        }
    }
enda

defstate traffic_light_hit
    cstator 257
    ifhitweapon
    {
        strength 1
        espawn A_GENERIC_PARTICLE
        seta[RETURN].xrepeat 120
        geta[].yrepeat temp
        shiftl temp 7
        geta[].z temp2
        sub temp2 temp
        seta[RETURN].z temp2
        set temp5 temp2
        geta[].htang temp2
        add temp2 1024
        and temp2 2047
        seta[RETURN].ang temp2
        seta[RETURN].xvel 256
        ssp RETURN 0
        ife se_lotag 0
            action AC_BASE
        rand temp3 5
        add temp3 5
        for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_GLASS
            rand temp4 2047
            seta[RETURN].ang temp4
            seta[RETURN].pal 1
            ifn se_lotag 0
                seta[RETURN].z temp5
        }
        ifwasweapon EXPLOSION
        {
            geta[].picnum surface_type
            state bullet_impact_sound
        }
        ife se_lotag 0
            cactor A_TRAFFIC_BROKE
    }
ends

state get_traffic_light_tags
    geta .lotag se_lotag
    seta .lotag 0
    geta .hitag se_hitag
    ifl se_hitag 1
        set se_hitag 1
    seta .hitag 0
ends

eventloadactor A_TRAFFIC_1    state get_traffic_light_tags    enda
eventloadactor A_TRAFFIC_2    state get_traffic_light_tags    enda
eventloadactor A_TRAFFIC_3    state get_traffic_light_tags    enda
eventloadactor A_TRAFFIC_4    state get_traffic_light_tags    enda

state do_tagged_traffic_light
    ifg se_lotag 0
    {
        ife activateshit[se_lotag] 1
            ife counter 0
                set counter se_hitag
        resetactioncount
    }
    ifg counter 0
    {
        action AC_BASE
        ife counter 1
        {
            switch sprite.picnum
                case A_TRAFFIC_1
                    cactor A_TRAFFIC_2
                    break
                case A_TRAFFIC_2
                    cactor A_TRAFFIC_4
                    break
                case A_TRAFFIC_4
                    cactor A_TRAFFIC_3
                    break
            endswitch
        }
        sub counter 1
    }
ends

useractor notenemy A_TRAFFIC_1 1 AC_BASE
	state do_tagged_traffic_light
    state traffic_light_hit
enda

useractor notenemy A_TRAFFIC_2 1 AC_BASE
	state do_tagged_traffic_light
    ifactioncount 300
    {
        action AC_BASE
        cactor A_TRAFFIC_4
    }
    state traffic_light_hit
enda

useractor notenemy A_TRAFFIC_4 1 AC_BASE
	state do_tagged_traffic_light
    ifactioncount 240
    {
        action AC_BASE
        cactor A_TRAFFIC_3
    }
    state traffic_light_hit
enda

useractor notenemy A_TRAFFIC_3 1 AC_BASE
	state do_tagged_traffic_light
    ifactioncount 60
    {
        action AC_BASE
        cactor A_TRAFFIC_2
    }
    state traffic_light_hit
enda

appendevent EVENT_SPAWN
    switch sprite[].picnum
        case T_FAN
        case T_FANBROKE
        case T_GRATE
        case T_GRATEBROKE
        case A_VENT_BREAKABLE
        case A_VENT_BROKE
			set actor_static 1 // cheap hack to introduce shade changes on fans and broken vents
            ifn sprite[].hitag 0
            {
                geta[].hitag se_hitag
                seta[].hitag 0
            }
            ifn sprite[].lotag 0
            {
                geta[].lotag se_lotag
                seta[].lotag 0
            }
            ifn sprite[].xvel 0
            {
                geta[].xvel se_xvel
                seta[].xvel 0
            }
            changespritestat THISACTOR STAT_ACTOR
            break
    endswitch
endevent

useractor notenemy T_FAN 1
    set se_yvel 100
    ifaction 0
    {
        action AC_BASE
        set temp2 0
        switch sprite[].pal
            case 76
            case 77
                ifand sprite[].cstat 1
                {
                    geta[].cstat temp
                    xor temp 1
                    seta[].cstat temp
                    set temp2 1
                }
                ifand sprite[].cstat 256
                {
                    geta[].cstat temp
                    xor temp 256
                    seta[].cstat temp
                    set temp2 1
                }
                break
        endswitch
        set temp3 0
        ife sprite[].blend 130
        {
            ifand sprite[].cstat 1
            {
                geta[].cstat temp
                xor temp 1
                seta[].cstat temp
                set temp2 1
            }
            ifand sprite[].cstat 256
            {
                geta[].cstat temp
                xor temp 256
                seta[].cstat temp
                set temp2 1
            }
        }
        ife temp2 0
            cstator 257
    }
    ifn sprite[].pal 76
    {
        ifn sprite[].pal 77
        {
            ifpdistl 10240
            {
                set counter2 0
                ifn se_lotag 0
                {
                    ifactorsound THISACTOR se_lotag
                        nullop
                    else
                        actorsound THISACTOR se_lotag
                }
                else
                {
                    ifactorsound THISACTOR S_AMB_FANSM1_D
                        nullop
                    else
                        actorsound THISACTOR S_AMB_FANSM1_D
                }
            }
            else
                add counter2 1
            ifg counter2 30
            {
                ifn se_lotag 0
                    stopactorsound THISACTOR se_lotag
                else
                    stopactorsound THISACTOR S_AMB_FANSM1_D
            }
        }
    }
    set temp2 0
    ife st_do_once 1
    {
        set temp2 1
        set se_hitag 0
        ifn se_lotag 0
            stopactorsound THISACTOR se_lotag
        else
            stopactorsound THISACTOR S_AMB_FANSM1_D
        cactor T_FANBROKE
    }
    else ife st_do_once 2
    {
        ifn se_lotag 0
            stopactorsound THISACTOR se_lotag
        else
            stopactorsound THISACTOR S_AMB_FANSM1_D
        cactor T_FANBROKE
    }
enda

useractor notenemy T_FANBROKE 1
    ifn se_lotag 0
    {
        ifactorsound THISACTOR se_lotag
            stopactorsound THISACTOR se_lotag
    }
    else ifactorsound THISACTOR S_AMB_FANSM1_D
        stopactorsound THISACTOR S_AMB_FANSM1_D
    ifand sprite[].cstat 1
    {
        geta[].cstat temp
        xor temp 1
        seta[].cstat temp
        set temp2 1
    }
    ifand sprite[].cstat 256
    {
        geta[].cstat temp
        xor temp 256
        seta[].cstat temp
        set temp2 1
    }
    ife se_yvel 100
    {
        ifn se_hitag 0
        {
            for temp sprofstat STAT_ACTOR
            {
                ife sprite[temp].picnum T_FAN ifn temp THISACTOR
                {
                    ife actorvar[temp].se_hitag se_hitag
                        setav[temp].st_do_once 1
                }
            }
            set se_hitag 0
        }
        ifn se_xvel 0
        {
            operateactivators se_xvel THISACTOR
            operatemasterswitches se_xvel
            operaterespawns se_xvel
            setarray preloadactivations[se_xvel] 1
            set se_xvel 0
        }
    }
    changespritestat THISACTOR STAT_DEFAULT
enda

var grate_dir 1 2
var grate_zvel 0 2
var grate_target
var grate_other 0 2
useractor notenemy T_GRATE 1
    set se_yvel 100
    set temp6 0 // shortcut to check for pal. better than doing this op 20 times
    ifspritepal 76
        set temp6 1
    else ifspritepal 77
        set temp6 1
    ifaction 0
    {
        action AC_BASE
        set temp2 0
        switch sprite[].pal
            case 76
            case 77
                ifand sprite[].cstat 1
                {
                    geta[].cstat temp
                    xor temp 1
                    seta[].cstat temp
                    set temp2 1
                }
                ifand sprite[].cstat 256
                {
                    geta[].cstat temp
                    xor temp 256
                    seta[].cstat temp
                    set temp2 1
                }
                break
        endswitch
        set temp3 0
        ife sprite[].blend 130
        {
            ifand sprite[].cstat 1
            {
                geta[].cstat temp
                xor temp 1
                seta[].cstat temp
                set temp2 1
            }
            ifand sprite[].cstat 256
            {
                geta[].cstat temp
                xor temp 256
                seta[].cstat temp
                set temp2 1
            }
        }
        ife temp2 0
            cstator 257
        ifand sprite[].cstat 16
        {
            set move_v 6
            state move_actor
            add move_xv sprite[].x
            add move_yv sprite[].y
            seta[].x move_xv
            seta[].y move_yv
            set temp4 sprite[].sectnum
            updatesector sprite[].x sprite[].y temp4
            ifn temp4 -1
                seta[].sectnum temp4
            geta[].z se_zvel
            set actor_moveable_xv move_xv
            set actor_moveable_yv move_yv
            set grate_zvel tilesizy[sprite[].picnum]
            shiftl grate_zvel 2
            mul grate_zvel sprite[].yrepeat
            ife temp6 0
            {
                getflorzofslope sprite[].sectnum sprite[].x sprite[].y temp
                set temp2 sprite[].z
                add temp2 grate_zvel
                ifl temp temp2
                    set grate_dir 0
                getceilzofslope sprite[].sectnum sprite[].x sprite[].y temp
                set temp2 sprite[].z
                sub temp2 grate_zvel
                sub temp2 grate_zvel
                ife grate_dir 0
                    ifg temp temp2
                        set grate_dir -1
                cstator 512
                set actor_switch 1
            }
            div grate_zvel 30

        }
    }
    ifand sprite[].cstat 16
    {
        ifn grate_dir -1
        {
            ifpdistl 1536 ife actor_switch_usable 1
            {
                ife temp6 0
                {
                    ifg counter 28
                        set grate_target 1
                    else ifl counter -28
                        set grate_target 1
                    ifhitspace
                    {
                        ife counter 0
                        {
                            set counter 1
                            set grate_other 0
                        }
                        else ife counter 30
                        {
                            set counter -30
                            set grate_other 0
                        }
                    }
                    ifn counter 0 ifn counter 30
                    {
                        ife player.last_weapon -1
                            ifg player.weapon_pos -7
                            {
                                set temp counter
                                abs temp
                                clamp temp 0 7
                                getp[].weapon_pos temp2
                                set temp3 temp2
                                abs temp3
                                ifge temp temp3
                                {
                                    ifl temp2 0
                                        sub temp2 2
                                    else
                                        add temp2 2
                                }
                                clamp temp2 -temp temp
                                setp[].weapon_pos temp2
                            }
                    }
                }
            }
            set actor_switch_usable 0
            ifn counter 0
            {
                geta[].cstat temp
                ifand temp 256
                    xor temp 256
                seta[].cstat temp
                ife counter 30
                {
                    geta[].cstat temp
                    ifand temp 1
                        xor temp 1
                    seta[].cstat temp
                    ifpdistl 640
                        set grate_target 0
                }
                set temp sprite[].cstat
                ifn se_hitag 0 ife temp6 0
                {
                    for temp sprofstat STAT_ACTOR
                    {
                        ife sprite[temp].picnum T_GRATE ifn temp THISACTOR
                        {
                            ife actorvar[temp].se_hitag se_hitag
                            {
                                setav[temp].grate_dir grate_dir
                                ife sprite[temp].pal 76
                                    setav[temp].counter counter
                                else ife sprite[temp].pal 77
                                    setav[temp].counter counter
                                else
                                {
                                    getav[temp].counter temp2
                                    ife temp2 0 ife counter 1
                                    {
                                        setav[temp].counter counter
                                        setav[temp].grate_other 1
                                    }
                                    else ife temp2 30 ife counter -30
                                    {
                                        setav[temp].counter counter
                                        setav[temp].grate_other 1
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else ife temp6 0
                cstator 257
            ifg counter 0
            {
                ifl counter 30
                {
                    ife temp6 0 ife grate_other 0
                    {
                        ife counter 1
                            sound S_DOOR_METAL_1_OPEN
                        else ife counter 28
                            sound S_DOOR_METAL_1_CLOSE
                    }
                    add counter 1

                    ife temp6 0
                    {
                        ifl counter 15 ifg counter 5
                        {
                            set move_v counter
                            state move_actor
                            add move_xv actor_moveable_xv
                            add move_yv actor_moveable_yv
                            seta[].x move_xv
                            seta[].y move_yv
                        }
                    }
                    set temp counter
                    set temp2 se_zvel
                    mul temp grate_zvel
                    ife grate_dir 1
                        inv temp
                    sub temp2 temp
                    seta[].z temp2
                    set temp4 sprite[].sectnum
                    updatesector sprite[].x sprite[].y temp4
                    ifn temp4 -1
                        seta[].sectnum temp4
                }
            }
            else ifl counter 0
            {
                ife temp6 0 ife grate_other 0
                {
                    ife counter -30
                        sound S_DOOR_METAL_1_OPEN
                    else ife counter -2
                        sound S_DOOR_METAL_1_CLOSE
                }
                add counter 1
                set temp counter
                set temp2 se_zvel
                mul temp grate_zvel
                ife grate_dir 1
                        inv temp
                add temp2 temp
                seta[].z temp2
                ife temp6 0
                {
                    inv counter
                    ifl counter 15 ifg counter 5
                    {
                        set move_v counter
                        state move_actor
                        add move_xv actor_moveable_xv
                        add move_yv actor_moveable_yv
                        seta[].x move_xv
                        seta[].y move_yv
                    }
                    inv counter
                }
                ife counter 0
                {
                    seta[].z se_zvel
                    seta[].x actor_moveable_xv
                    seta[].y actor_moveable_yv
                }
                set temp4 sprite[].sectnum
                updatesector sprite[].x sprite[].y temp4
                ifn temp4 -1
                    seta[].sectnum temp4
            }
        }
        else
        {
            ife temp6 0
            {
                ifpdistl 1536 ife actor_switch_usable 1
                {
                    ifhitspace
                    {
                        ife counter 0
                            sound S_DOOR_METAL_1_CLOSE
                        set counter 2
                    }
                }
                ifn counter 0
                {
                    rand temp 1
                    ifrnd 127
                        inv temp
                    add temp actor_moveable_xv
                    seta[].x temp
                    rand temp 1
                    ifrnd 127
                        inv temp
                    add temp actor_moveable_yv
                    seta[].y temp
                    rand temp 2
                    ifrnd 127
                        inv temp
                    add temp se_zvel
                    seta[].z temp
                    sub counter 1
                }
                else
                {
                    seta[].z se_zvel
                    seta[].x actor_moveable_xv
                    seta[].y actor_moveable_yv
                }


                set actor_switch_usable 0
            }
        }
    }
    set temp2 0
    ife st_do_once 1
    {
        set temp2 1
        set se_hitag 0
        cactor T_GRATEBROKE
    }
    else ife st_do_once 2
        cactor T_GRATEBROKE
enda

useractor notenemy T_GRATEBROKE 1
    ifand sprite[].cstat 1
    {
        geta[].cstat temp
        xor temp 1
        seta[].cstat temp
        set temp2 1
    }
    ifand sprite[].cstat 256
    {
        geta[].cstat temp
        xor temp 256
        seta[].cstat temp
        set temp2 1
    }
    ife se_yvel 100
    {
        ifn se_hitag 0
        {
            for temp sprofstat STAT_ACTOR
            {
                ife sprite[temp].picnum T_GRATE ifn temp THISACTOR
                {
                    ife actorvar[temp].se_hitag se_hitag
                        setav[temp].st_do_once 1
                }
            }
            set se_hitag 0
        }
        ifn se_xvel 0
        {
            operateactivators se_xvel THISACTOR
            operatemasterswitches se_xvel
            operaterespawns se_xvel
            setarray preloadactivations[se_xvel] 1
            set se_xvel 0
        }
    }
    changespritestat THISACTOR STAT_DEFAULT
enda

useractor notenemy A_STREETLAMP_5_BROKE 0 AC_BASE5 changespritestat THISACTOR STAT_DEFAULT enda
useractor notenemy A_STREETLAMP_5 0 AC_BASE5 changespritestat THISACTOR STAT_DEFAULT enda
useractor notenemy A_STREETLAMP_5_OFF 0 AC_BASE5 changespritestat THISACTOR STAT_DEFAULT enda

action AC_TIRE_DEAD 3 1 1 1 1
action AC_TIRE_DEAD_FLAT 1 1 1 1 1
action AC_TIRE_SPIN 2 2 1 1 4

defstate tirecode
    cstator 256
    set actor_static 1
    ifhitweapon ifdead
    {
        geta[].htang temp5

        ifaction AC_BASE
            sound S_IMPACT_DEFLATE
        switch sprite[].picnum
            case A_TIRE7
            case A_TIRE8
            case A_TIRE9
            case A_TIRE10
            case A_TIRE11
            case A_TIRE12
                action AC_TIRE_DEAD_FLAT
                break
            default
                action AC_TIRE_DEAD
                break
        endswitch

        ifrnd 128
            cstator 4

        rand temp3 6
        ifn temp3 0 for itervar range temp3
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_PLASTIC
            ifspritepal 0
                seta[RETURN].pal 91
            else
                seta[RETURN].pal sprite[].pal

            rand temp4 2047
            seta[RETURN].ang temp4
        }

        espawn A_SMOKE2
        seta[RETURN].xrepeat 16
        seta[RETURN].yrepeat 16
        seta[RETURN].cstat 32768
        geta[].z temp
        sub temp 4096
        seta[RETURN].z temp

        espawn A_SMOKE2
        seta[RETURN].xrepeat 32
        seta[RETURN].yrepeat 32
        seta[RETURN].cstat 32768
        geta[].z temp
        sub temp 4096
        seta[RETURN].z temp

        hitradius 896 20 30 40 50
    }

    ifactioncount 5 nullop
    else ifaction AC_TIRE_DEAD
    {
        set temp4 counter
        and temp4 7
        ife temp4 0
        {
            geta[].ang temp6
            shiftl temp5 1
            ezshoot temp5 P_SMOKE2
            geta[].xrepeat temp4
            shiftr temp4 4
            clamp temp4 1 80
            setthisprojectile[RETURN].txrepeat 1
            setthisprojectile[RETURN].tyrepeat 1
            set temp4 480
            set temp3 counter
            sub temp4 temp3
            seta[RETURN].xvel temp4
        }
        add counter 1
    }

ends


useractor notenemy A_VENT_BREAKABLE 1
    set se_yvel 100
    ifaction 0
    {
        action AC_BASE
        set temp2 0
        switch sprite[].pal
            case 76
            case 77
                ifand sprite.cstat 1
                {
                    geta .cstat temp
                    xor temp 1
                    seta .cstat temp
                    set temp2 1
                }
                ifand sprite.cstat 256
                {
                    geta .cstat temp
                    xor temp 256
                    seta .cstat temp
                    set temp2 1
                }
                break
        endswitch
        set temp3 0
        ife sprite.blend 130
        {
            ifand sprite.cstat 1
            {
                geta .cstat temp
                xor temp 1
                seta .cstat temp
                set temp2 1
            }
            ifand sprite.cstat 256
            {
                geta .cstat temp
                xor temp 256
                seta .cstat temp
                set temp2 1
            }
        }
        ife temp2 0
            cstator 257
    }
    set temp2 0
    ifn st_do_once 0
    {
        geta .picnum surface_type
        state bullet_impact_sound
        cactor A_VENT_BROKE
    }
    else ifhitweapon
    {
        strength 1
        geta .picnum surface_type
        state bullet_impact_sound
        cactor A_VENT_BROKE
    }

enda

useractor notenemy A_VENT_BROKE 1
    geta .cstat temp
    ifand temp 256
        xor temp 256
    ifand temp 1
        xor temp 1
    seta .cstat temp

    ife se_yvel 100
    {
        ifn se_hitag 0
        {
            for temp sprofstat STAT_ACTOR
            {
                ife sprite[temp].picnum A_VENT_BREAKABLE ifn temp THISACTOR
                {
                    ife actorvar[temp].se_hitag se_hitag
                        setav[temp].st_do_once 1
                }
            }
            set se_hitag 0
        }
        ifn se_xvel 0
        {
            operateactivators se_xvel THISACTOR
            operatemasterswitches se_xvel
            operaterespawns se_xvel
            setarray preloadactivations[se_xvel] 1
            set se_xvel 0
        }
    }
    changespritestat THISACTOR STAT_DEFAULT
enda

define TIRE_HEALTH 25

useractor notenemy A_TIRE1 TIRE_HEALTH AC_BASE
    state tirecode
enda

useractor notenemy A_TIRE2 TIRE_HEALTH AC_BASE
    state tirecode
enda

useractor notenemy A_TIRE3 TIRE_HEALTH AC_BASE
    state tirecode
enda

useractor notenemy A_TIRE4 TIRE_HEALTH AC_BASE
    state tirecode
enda

useractor notenemy A_TIRE5 TIRE_HEALTH AC_BASE
    state tirecode
enda

useractor notenemy A_TIRE6 TIRE_HEALTH AC_BASE
    state tirecode
enda
useractor notenemy A_TIRE7 TIRE_HEALTH AC_BASE
    state tirecode
enda
useractor notenemy A_TIRE8 TIRE_HEALTH AC_BASE
    state tirecode
enda
useractor notenemy A_TIRE9 TIRE_HEALTH AC_BASE
    state tirecode
enda
useractor notenemy A_TIRE10 TIRE_HEALTH AC_BASE
    state tirecode
enda
useractor notenemy A_TIRE11 TIRE_HEALTH AC_BASE
    state tirecode
enda
useractor notenemy A_TIRE12 TIRE_HEALTH AC_BASE
    state tirecode
enda


defstate potplant_code
    state do_moveable
    iffloordistl 1
    {
        ifg counter 5
            seta[].htextra 100
        set counter 0
    }
    else
        add counter 1
    ifhitweapon
    {
        rand temp6 12
        add temp6 12
        set temp3 0
        set temp4 tilesizy[sprite[].picnum]
        shiftl temp4 1
        mul temp4 sprite[].yrepeat
        for temp3 range temp6
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_GRASS
            rand temp temp4
            inv temp
            add temp sprite[].z
            seta[RETURN].z temp
            set temp sprite[].xrepeat
            shiftr temp 2
            setav[RETURN].debris_add_size temp
            set temp sprite[].htang
            rand temp2 512
            ifrnd 127
                inv temp2
            add temp temp2
            and temp 2047
            seta[RETURN].ang temp
            // add temp3 1
        }

        rand temp6 6
        add temp6 6
        set temp3 0
        for temp3 range temp6
        {
            espawn A_GENERIC_DEBRIS
            setav[RETURN].debris_type DEBRIS_ROCK
            set temp sprite[].htang
            rand temp2 512
            add temp temp2
            ifrnd 127
                inv temp2
            and temp 2047
            seta[RETURN].ang temp
            // add temp3 1
        }
        setp[].sound_pitch -128
        soundonce S_IMPACT_MUGSMASH
        setp[].sound_pitch 0
        espawn A_SMOKE2
        seta[RETURN].cstat 32768
        seta[RETURN].pal 62
        espawn A_GENERIC_BLOODSPLATTER
        getflorzofslope sprite[].sectnum sprite[].x sprite[].y db_temp
        seta[RETURN].z db_temp
        seta[RETURN].pal 43
        seta[RETURN].shade 25
        seta[RETURN].xrepeat 5
        seta[RETURN].yrepeat 5
        seta[RETURN].cstat 32
        rand db_temp 2047
        seta[RETURN].ang db_temp
        killit
    }
ends
useractor notenemy A_POTPLANT_1 1
    state potplant_code
enda
useractor notenemy A_POTPLANT_2 1
    state potplant_code
enda
useractor notenemy A_POTPLANT_3 1
    state potplant_code
enda
useractor notenemy A_POTPLANT_4 1
    state potplant_code
enda
useractor notenemy A_POTPLANT_5 1
    state potplant_code
enda

action AC_HAND_DRYER_IDLE 0 1 1 1 1
action AC_HAND_DRYER_USE 4 1 1 1 1
useractor notenemy A_HAND_DRYER 0 AC_BASE
    set actor_switch 1
    cstator 257
    ifhitspace
    {
        ifpdistl 1536 ife actor_switch_usable 1
        {
            ife counter 0
            {
                ife toilet_flush 0 ifaction AC_BASE
                {
                    action AC_HAND_DRYER_USE
                    sound S_HAND_DRYER
                    set toilet_flush 120
                }
            }
        }
        set counter 1
    }
    else
        set counter 0
    ifaction AC_HAND_DRYER_USE
    {
        ifactioncount 4
            action AC_BASE
    }

    ifn toilet_flush 0
        sub toilet_flush 1

    set actor_switch_usable 0
enda

action AC_PAYPHONE_USE 0 1 1 1 1
useractor notenemy A_PAYPHONE 0 AC_BASE
    set actor_switch 1
    cstator 257
    ifhitspace
    {
        ifpdistl 1536 ife actor_switch_usable 1
        {
            ife counter 0
            {
                ife toilet_flush 0 ifaction AC_BASE
                {
                    action AC_PAYPHONE_USE
                    sound S_PHONE_BUSY
                    set toilet_flush 145
                }
            }
        }
        set counter 1
    }
    else
        set counter 0
    ifaction AC_PAYPHONE_USE
    {
        ifactioncount 2
            action AC_BASE
    }

    ifn toilet_flush 0
        sub toilet_flush 1

    set actor_switch_usable 0
enda

defstate frame_picture_code
    ife st_do_once 0
    {
        ifawayfromwall
            nullop
        else ifand sprite.cstat 16
        {
            geta .clipdist temp
            seta .clipdist 0
            seta .xvel 16
            ssp THISACTOR 0
            seta .clipdist temp
        }
        set temp tilesizx[sprite[].picnum]
        set temp2 tilesizy[sprite[].picnum]
        mul temp temp2

        set temp2 sprite[].xrepeat
        set temp3 sprite[].yrepeat
        mul temp2 temp3
        mulscale temp temp temp2 12
        set st_do_once temp
        shiftr temp 7
        clamp temp 1 65536
        seta[].extra temp
        cstator 256
    }
    ifhitweapon
    {
        rand temp 2
        add temp S_BULLET_WOOD1
        soundvar temp
        rand temp 2
        add temp S_BULLET_GLASS1
        soundvar temp
        geta[].htang temp7
        add temp7 1024
        and temp7 2047
        seta[].htang temp7
        ife counter 0
        {
            state glass_debris_square
            // silly but prevents accidentally overflowing what picture we want
            switch sprite[].picnum
                case A_FRAMED_PIC_1
                    seta[].picnum A_FRAMED_PIC_1_BROKE
                    break
                case A_FRAMED_PIC_2
                    seta[].picnum A_FRAMED_PIC_2_BROKE
                    break
                case A_FRAMED_PIC_3
                    seta[].picnum A_FRAMED_PIC_3_BROKE
                    break
                case A_FRAMED_PIC_4
                    seta[].picnum A_FRAMED_PIC_4_BROKE
                    break
                case A_FRAMED_PIC_5
                    seta[].picnum A_FRAMED_PIC_5_BROKE
                    break
                case A_FRAMED_PIC_6
                    seta[].picnum A_FRAMED_PIC_6_BROKE
                    break
                case A_FRAMED_PIC_7
                    seta[].picnum A_FRAMED_PIC_7_BROKE
                    break
                case A_FRAMED_PIC_8
                    seta[].picnum A_FRAMED_PIC_8_BROKE
                    break
                case A_FRAMED_PIC_9
                    seta[].picnum A_FRAMED_PIC_9_BROKE
                    break
                case A_FRAMED_PIC_10
                    seta[].picnum A_FRAMED_PIC_10_BROKE
                    break
                case A_FRAMED_PIC_11
                    seta[].picnum A_FRAMED_PIC_11_BROKE
                    break
                case A_FRAMED_PIC_12
                    seta[].picnum A_FRAMED_PIC_12_BROKE
                    break
                case A_FRAMED_PIC_13
                    seta[].picnum A_FRAMED_PIC_13_BROKE
                    break
                case A_FRAMED_PIC_14
                    seta[].picnum A_FRAMED_PIC_14_BROKE
                    break
                case A_FRAMED_PIC_15
                    seta[].picnum A_FRAMED_PIC_15_BROKE
                    break
                case A_FRAMED_PIC_16
                    seta[].picnum A_FRAMED_PIC_16_BROKE
                    break
                case A_FRAMED_PIC_17
                    seta[].picnum A_FRAMED_PIC_17_BROKE
                    break
                case A_FRAMED_PIC_18
                    seta[].picnum A_FRAMED_PIC_18_BROKE
                    break
                case A_FRAMED_PIC_19
                    seta[].picnum A_FRAMED_PIC_19_BROKE
                    break
                case A_FRAMED_PIC_20
                    seta[].picnum A_FRAMED_PIC_20_BROKE
                    break
                case A_FRAMED_PIC_21
                    seta[].picnum A_FRAMED_PIC_21_BROKE
                    break
                case A_FRAMED_PIC_22
                    seta[].picnum A_FRAMED_PIC_22_BROKE
                    break
                case A_FRAMED_PIC_23
                    seta[].picnum A_FRAMED_PIC_23_BROKE
                    break
                case A_FRAMED_PIC_24
                    seta[].picnum A_FRAMED_PIC_24_BROKE
                    break
                case A_FRAMED_PIC_25
                    seta[].picnum A_FRAMED_PIC_25_BROKE
                    break
                case A_FRAMED_PIC_26
                    seta[].picnum A_FRAMED_PIC_26_BROKE
                    break
                case A_FRAMED_PIC_27
                    seta[].picnum A_FRAMED_PIC_27_BROKE
                    break
                case A_FRAMED_PIC_28
                    seta[].picnum A_FRAMED_PIC_28_BROKE
                    break
                case A_FRAMED_PIC_29
                    seta[].picnum A_FRAMED_PIC_29_BROKE
                    break
                case A_FRAMED_PIC_30
                    seta[].picnum A_FRAMED_PIC_30_BROKE
                    break
                case A_FRAMED_PIC_31
                    seta[].picnum A_FRAMED_PIC_31_BROKE
                    break
                case A_FRAMED_PIC_32
                    seta[].picnum A_FRAMED_PIC_32_BROKE
                    break
                case A_FRAMED_PIC_33
                    seta[].picnum A_FRAMED_PIC_33_BROKE
                    break
                case A_FRAMED_PIC_34
                    seta[].picnum A_FRAMED_PIC_34_BROKE
                    break
                case A_FRAMED_PIC_35
                    seta[].picnum A_FRAMED_PIC_35_BROKE
                    break
                case A_FRAMED_PIC_36
                    seta[].picnum A_FRAMED_PIC_36_BROKE
                    break
                case A_FRAMED_PIC_37
                    seta[].picnum A_FRAMED_PIC_37_BROKE
                    break
                case A_FRAMED_PIC_38
                    seta[].picnum A_FRAMED_PIC_38_BROKE
                    break
                case A_FRAMED_PIC_39
                    seta[].picnum A_FRAMED_PIC_39_BROKE
                    break
                case A_FRAMED_PIC_40
                    seta[].picnum A_FRAMED_PIC_40_BROKE
                    break
                case A_FRAMED_PIC_41
                    seta[].picnum A_FRAMED_PIC_41_BROKE
                    break
                case A_FRAMED_PIC_42
                    seta[].picnum A_FRAMED_PIC_42_BROKE
                    break
                case A_FRAMED_PIC_43
                    seta[].picnum A_FRAMED_PIC_43_BROKE
                    break
                case A_FRAMED_PIC_44
                    seta[].picnum A_FRAMED_PIC_44_BROKE
                    break
                case A_FRAMED_PIC_45
                    seta[].picnum A_FRAMED_PIC_45_BROKE
                    break
                case A_FRAMED_PIC_46
                    seta[].picnum A_FRAMED_PIC_46_BROKE
                    break
                case A_FRAMED_PIC_47
                    seta[].picnum A_FRAMED_PIC_47_BROKE
                    break
                case A_FRAMED_PIC_48
                    seta[].picnum A_FRAMED_PIC_48_BROKE
                    break
                case A_FRAMED_PIC_49
                    seta[].picnum A_FRAMED_PIC_49_BROKE
                    break
                case A_FRAMED_PIC_50
                    seta[].picnum A_FRAMED_PIC_50_BROKE
                    break
                case A_FRAMED_PIC_51
                    seta[].picnum A_FRAMED_PIC_51_BROKE
                    break
                case A_FRAMED_PIC_52
                    seta[].picnum A_FRAMED_PIC_52_BROKE
                    break
                case A_FRAMED_PIC_53
                    seta[].picnum A_FRAMED_PIC_53_BROKE
                    break
                case A_FRAMED_PIC_54
                    seta[].picnum A_FRAMED_PIC_54_BROKE
                    break
                case A_FRAMED_PIC_55
                    seta[].picnum A_FRAMED_PIC_55_BROKE
                    break
                case A_FRAMED_PIC_56
                    seta[].picnum A_FRAMED_PIC_56_BROKE
                    break
                case A_FRAMED_PIC_57
                    seta[].picnum A_FRAMED_PIC_57_BROKE
                    break
                case A_FRAMED_PIC_58
                    seta[].picnum A_FRAMED_PIC_58_BROKE
                    break
                case A_FRAMED_PIC_59
                    seta[].picnum A_FRAMED_PIC_59_BROKE
                    break
                case A_FRAMED_PIC_60
                    seta[].picnum A_FRAMED_PIC_60_BROKE
                    break
                case A_FRAMED_PIC_61
                    seta[].picnum A_FRAMED_PIC_61_BROKE
                    break
                case A_FRAMED_PIC_62
                    seta[].picnum A_FRAMED_PIC_62_BROKE
                    break
                case A_FRAMED_PIC_63
                    seta[].picnum A_FRAMED_PIC_63_BROKE
                    break
                case A_FRAMED_PIC_64
                    seta[].picnum A_FRAMED_PIC_64_BROKE
                    break
                case A_FRAMED_PIC_1_BROKE
                case A_FRAMED_PIC_2_BROKE
                case A_FRAMED_PIC_3_BROKE
                case A_FRAMED_PIC_4_BROKE
                case A_FRAMED_PIC_5_BROKE
                case A_FRAMED_PIC_6_BROKE
                case A_FRAMED_PIC_7_BROKE
                case A_FRAMED_PIC_8_BROKE
                case A_FRAMED_PIC_9_BROKE
                case A_FRAMED_PIC_10_BROKE
                case A_FRAMED_PIC_11_BROKE
                case A_FRAMED_PIC_12_BROKE
                case A_FRAMED_PIC_13_BROKE
                case A_FRAMED_PIC_14_BROKE
                case A_FRAMED_PIC_15_BROKE
                case A_FRAMED_PIC_16_BROKE
                case A_FRAMED_PIC_17_BROKE
                case A_FRAMED_PIC_18_BROKE
                case A_FRAMED_PIC_19_BROKE
                case A_FRAMED_PIC_20_BROKE
                case A_FRAMED_PIC_21_BROKE
                case A_FRAMED_PIC_22_BROKE
                case A_FRAMED_PIC_23_BROKE
                case A_FRAMED_PIC_24_BROKE
                case A_FRAMED_PIC_25_BROKE
                case A_FRAMED_PIC_26_BROKE
                case A_FRAMED_PIC_27_BROKE
                case A_FRAMED_PIC_28_BROKE
                case A_FRAMED_PIC_29_BROKE
                case A_FRAMED_PIC_30_BROKE
                case A_FRAMED_PIC_31_BROKE
                case A_FRAMED_PIC_32_BROKE
                case A_FRAMED_PIC_33_BROKE
                case A_FRAMED_PIC_34_BROKE
                case A_FRAMED_PIC_35_BROKE
                case A_FRAMED_PIC_36_BROKE
                case A_FRAMED_PIC_37_BROKE
                case A_FRAMED_PIC_38_BROKE
                case A_FRAMED_PIC_39_BROKE
                case A_FRAMED_PIC_40_BROKE
                case A_FRAMED_PIC_41_BROKE
                case A_FRAMED_PIC_42_BROKE
                case A_FRAMED_PIC_43_BROKE
                case A_FRAMED_PIC_44_BROKE
                case A_FRAMED_PIC_45_BROKE
                case A_FRAMED_PIC_46_BROKE
                case A_FRAMED_PIC_47_BROKE
                case A_FRAMED_PIC_48_BROKE
                case A_FRAMED_PIC_49_BROKE
                case A_FRAMED_PIC_50_BROKE
                case A_FRAMED_PIC_51_BROKE
                case A_FRAMED_PIC_52_BROKE
                case A_FRAMED_PIC_53_BROKE
                case A_FRAMED_PIC_54_BROKE
                case A_FRAMED_PIC_55_BROKE
                case A_FRAMED_PIC_56_BROKE
                case A_FRAMED_PIC_57_BROKE
                case A_FRAMED_PIC_58_BROKE
                case A_FRAMED_PIC_59_BROKE
                case A_FRAMED_PIC_60_BROKE
                case A_FRAMED_PIC_61_BROKE
                case A_FRAMED_PIC_62_BROKE
                case A_FRAMED_PIC_63_BROKE
                case A_FRAMED_PIC_64_BROKE
                    add counter 1
                    break
            endswitch
            add counter 1
        }
        else
        {
            rand temp3 1
            add temp3 2
            for itervar range temp3
            {
                espawn A_GENERIC_DEBRIS
                setav[RETURN].debris_type DEBRIS_GLASS
                // geta[].ang temp4
                rand temp4 512
                ifrnd 127
                    inv temp4
                add temp4 sprite[].ang
                seta[RETURN].ang temp4
                ifand sprite[].cstat 128
                    nullop
                else
                {
                    set temp4 tilesizy[sprite[].picnum]
                    shiftl temp4 1
                    mul temp4 sprite[].yrepeat
                    set temp5 sprite[].z
                    sub temp5 temp4
                    seta[RETURN].z temp5
                }
                // sub temp3 1
            }
        }
        ifle st_do_once FALLABLE_FRAME_SIZE
        {
            ifl counter 3
            {
                ifge counter 2
                    set counter 3
                else ifdead
                    set counter 3
            }
        }
        else
            strength 1
    }

    ifge counter 3
    {
        add counter 1
        fall
        iffloordistl 1
            ifg st_do_once 0
            {
                set st_do_once -3
                state glass_debris_square
                set glass_temp2 1
                state glass_debris_square
                spawn A_SMOKE2
                rand temp 2
                add temp S_BULLET_WOOD1
                soundvar temp
            }
    }
    ifl st_do_once -1
    {
        iffloordistl 1
        {
            add st_do_once 1
            ife st_do_once -1
            {
                rand temp 2
                add temp S_BULLET_WOOD1
                soundvar temp
                spawn A_SMOKE2
                state glass_debris_square
                set glass_temp2 1
                state glass_debris_square
                sound S_SMASH_GLASSLAMP
                setp[].sound_pitch -512
                rand temp 2
                add temp S_BULLET_WOOD1
                soundvar temp
                setp[].sound_pitch 0
                killit
            }
        }
        else
            set st_do_once 1
    }
ends

useractor notenemy A_FRAMED_PIC_1 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_1_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_2 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_2_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_3 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_3_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_4 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_4_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_5 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_5_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_6 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_6_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_7 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_7_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_8 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_8_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_9 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_9_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_10 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_10_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_11 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_11_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_12 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_12_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_13 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_13_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_14 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_14_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_15 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_15_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_16 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_16_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_17 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_17_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_18 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_18_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_19 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_19_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_20 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_20_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_21 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_21_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_22 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_22_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_23 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_23_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_24 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_24_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_25 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_25_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_26 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_26_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_27 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_27_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_28 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_28_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_29 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_29_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_30 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_30_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_31 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_31_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_32 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_32_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_33 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_33_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_34 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_34_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_35 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_35_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_36 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_36_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_37 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_37_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_38 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_38_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_39 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_39_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_40 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_40_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_41 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_41_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_42 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_42_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_43 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_43_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_44 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_44_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_45 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_45_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_46 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_46_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_47 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_47_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_48 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_48_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_49 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_49_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_50 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_50_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_51 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_51_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_52 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_52_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_53 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_53_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_54 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_54_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_55 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_55_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_56 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_56_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_57 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_57_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_58 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_58_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_59 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_59_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_60 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_60_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_61 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_61_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_62 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_62_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_63 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_63_BROKE 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_64 1 AC_BASE state frame_picture_code enda
useractor notenemy A_FRAMED_PIC_64_BROKE 1 AC_BASE state frame_picture_code enda

action AC_BAFAN 0 24 1 1 1
var fanslow 0 2
var fanspin 0 2
var fanframe 0 2
var fan_offset_got 0 2
var fan_offset 0 2
var fan_blow_delay 0 2

defstate bigassfan_init
    geta[].hitag se_hitag
    seta[].hitag 0
    geta[].lotag se_lotag
    seta[].lotag 0
    geta[].extra se_extra
    seta[].extra 0
    clamp se_hitag 1 65536
    ifand sprite[].cstat 32
    {
        shiftl se_hitag 10
    }
    ifand sprite[].cstat 16
    {
        shiftl se_hitag 10
    }
    clamp se_lotag 1 65536
    geta[].xvel se_xvel
    seta[].xvel 0
    geta[].yvel se_yvel
    seta[].yvel 0
    geta[].zvel se_zvel
    seta[].zvel 0
    ifand sprite[].cstat 512
        cstator 32768
  //  shiftl se_lotag 9
    set fanslow se_lotag
    ifspritepal 9
    {
        spritepal 0
        set counter 1
        set se_lotag 0
    }
ends
eventloadactor A_BIGASSFAN
    state bigassfan_init
enda

eventloadactor A_BIGASSFAN_BLOODY
    state bigassfan_init
enda

defstate bigassfan_code
    
    ifg se_yvel 0
    {
        ife activateshit[se_yvel] 1
        {
            ifand se_xvel 64
                ifactor A_BIGASSFAN
                    cactor A_BIGASSFAN_BLOODY
            ifand se_xvel 16
                xor fan_blow_delay 1
            else ifand se_xvel 4
            {
                espawn A_EXPLOSION
                set temp sprite[].xrepeat
                mul temp 3
                seta[RETURN].xrepeat temp
                seta[RETURN].yrepeat temp
                seta[RETURN].cstat 130
                ifand sprite[].cstat 16
                {
                    set temp4 tilesizy[sprite[].picnum]
                    shiftl temp4 2
                    mul temp4 sprite[].yrepeat
                    shiftr temp4 1
                    set temp sprite[].z
                    sub temp temp4
                    seta[RETURN].z temp
                    shiftr temp4 1
                    setav[RETURN].smoke_offset -temp4
                }
                else
                    setav[RETURN].smoke_offset -1024
                killit
                break
            }
            ifand se_xvel 64
            {
                ifand se_xvel 128
                    nullop
                else
                    xor se_xvel 64
            }
            else
            {
                ife counter 0
                    set counter 1
                else
                    set counter 0
            }
        }
    }
    ifand se_xvel 8
    {
        getflorzofslope sprite.sectnum sprite.x sprite.y temp
        ife fan_offset_got 0
        {
            set fan_offset temp
            sub fan_offset sprite.z
            set fan_offset_got 1
        }
        sub temp fan_offset
        seta .z temp
    }
    ife counter 1
    {
        ifge se_lotag 0
        {
            set temp se_lotag
            shiftr temp 4
            clamp temp 1 fanslow
            sub se_lotag temp
        }
        clamp se_lotag 0 fanslow
        ife se_lotag 0
            ife fan_blow_delay 1
                set fan_blow_delay 2
    }
    else
    {
        ifle se_lotag fanslow
        {
            set temp se_lotag
            shiftr temp 4
            clamp temp 1 fanslow
            add se_lotag temp
        }
        clamp se_lotag 0 fanslow
        ife se_lotag fanslow
            ife fan_blow_delay 1
                set fan_blow_delay 2
        
    }
    ife fan_blow_delay 2
    {
        set fan_blow_delay 0
        ifand se_xvel 4
        {
            espawn A_EXPLOSION
            set temp sprite[].xrepeat
            mul temp 3
            seta[RETURN].xrepeat temp
            seta[RETURN].yrepeat temp
            seta[RETURN].cstat 130
            ifand sprite[].cstat 16
            {
                set temp4 tilesizy[sprite[].picnum]
                shiftl temp4 2
                mul temp4 sprite[].yrepeat
                shiftr temp4 1
                set temp sprite[].z
                sub temp temp4
                seta[RETURN].z temp
                shiftr temp4 1
                setav[RETURN].smoke_offset -temp4
            }
            else
                setav[RETURN].smoke_offset -1024
            killit
            break
        }
    }
    set temp se_lotag
    seta[].htg_t 2 0
    seta[].htg_t 3 fanframe
    ifn temp 0
    {
        shiftr temp 2
        clamp temp 0 256
        add fanspin temp
        ifge fanspin 16
        {
            set fanspin 0
            geta[].htg_t 3 temp2
            ifge se_lotag 256
            {
                ifl temp2 16
                    set temp2 16
            }
            else ifge temp2 16
                shiftr temp2 1
            
            ifge se_lotag 92 ifl se_lotag 256
            {
                set temp3 se_lotag
                div temp3 64
                add temp2 temp3
            }
            else ifg se_lotag 384
            {
                set temp3 se_lotag
                div temp3 192
                clamp temp3 1 4
                add temp2 temp3
            }
            else
            {
                add temp2 1
                ifge se_lotag 256
                    add temp2 1
            }    
            ifge se_lotag 256
            {
                ifge temp2 24
                {
                    mod temp2 8
                    add temp2 16
                }
                    
            }
            else ifge temp2 16
                mod temp2 16
            seta[].htg_t 3 temp2
            set fanframe temp2
        }
    }
    else
    {
        seta[].htg_t 2 0
        seta[].htg_t 3 fanframe
    }
    ifand se_xvel 32
    {
        geta .picnum temp
        add temp fanframe
        sets .floorpicnum temp
    }
    ife se_lotag 0
        break
    ifand se_xvel 2
        break
    ifand sprite[].cstat 32
    {
        ife st_do_once 0
        {
            set st_do_once tilesizx[sprite[].picnum]
            mul st_do_once sprite[].xrepeat
            shiftr st_do_once 2
            shiftr st_do_once 1
        }
        for temp spritesofsector sprite[].sectnum
        {
            set temp2 0
            
            ife sprite[temp].statnum STAT_ACTOR
                set temp2 1
            else ife nades[temp] 1
                set temp2 1
            ife temp2 1
            {
                ife actorvar[temp].actor_moveable 1
                    setav[temp].prop_fall 1
                geta[temp].htcgg temp4
                ifg temp4 0
                {
                    ldist temp2 THISACTOR temp
                    ifle temp2 st_do_once
                    {
                        ifle sprite[temp].z sprite[].z
                        {
                            geta[].z temp2
                            sub temp2 sprite[temp].z
                            abs temp2
                            ifle temp2 se_hitag
                            {
                                sub temp2 se_hitag
                                abs temp2
                                set temp3 temp2
                                ifl temp3 1
                                    set temp3 1
                                mul temp3 100
                                div temp3 se_hitag
                                set temp2 se_lotag
                                mul temp2 temp3
                                ifn temp2 0
                                    div temp2 100
                                shiftl temp2 2
                                ifn temp THISACTOR
                                {
                                    geta[temp].zvel temp3
                                    sub temp3 temp2
                                    shiftl temp2 1
                                    ifl temp3 -temp2
                                    {
                                        set temp2 temp3
                                        shiftr temp2 2
                                        sub temp3 temp2
                                    }
                                    seta[temp].zvel temp3
                                    geta[temp].xvel temp3
                                    seta[temp].xvel 0
                                    switch sprite[temp].picnum
                                        case A_DROP
                                            break
                                        default
                                            ssp temp CLIPMASK0
                                            break
                                    endswitch
                                    seta[temp].xvel temp3
                                }
                            }
                        }
                    }
                }
            }
            else ife sprite[temp].statnum STAT_PLAYER
            {
                ife temp player[].i
                {
                    ldist temp2 THISACTOR temp
                    ifle temp2 st_do_once
                    {
                        set temp2 sprite[temp].z
                        ife sprite[temp].picnum APLAYER
                                ifp pducking
                                    sub temp2 5120
                        ifle temp2 sprite[].z
                        {
                            geta[].z temp2
                            ife sprite[temp].picnum APLAYER
                                ifp pducking
                                    add temp2 4096
                            sub temp2 sprite[temp].z
                            abs temp2
                            ifle temp2 se_hitag
                            {
                                sub temp2 se_hitag
                                abs temp2
                                set temp3 temp2
                                ifl temp3 1
                                    set temp3 1
                                mul temp3 100
                                div temp3 se_hitag
                                set temp2 se_lotag
                                mul temp2 temp3
                                ifn temp2 0
                                    div temp2 100
                                shiftl temp2 2
                                ife sprite[temp].picnum APLAYER
                                {
                                    getp[].poszv temp3
                                    sub temp3 temp2
                                    /* qputs 11 %ld %ld
                                    qsprintf 11 11 temp2 temp3
                                    quote 11 */
                                    shiftl temp2 1
                                    ifl temp3 -temp2 ife player[].jumping_counter 0
                                    {
                                        set temp2 temp3
                                        shiftr temp2 2
                                        sub temp3 temp2
                                    }
                                    setp[].poszv temp3
                                    getp[].posz prop_fall
                                    getflorzofslope player[].cursectnum player[].posx player[].posy prop_lastfloorz
                                    sub prop_lastfloorz 1024
                                    
                                    ife player.spritebridge 1
                                    {
                                        set temp4 player[].sbs
                                        ifn temp4 -1
                                        {
                                            geta[temp4].z temp4
                                            sub temp4 1024
                                            set prop_lastfloorz temp4
                                        }
                                    }
                                    ifge sprite[player[].i].z prop_lastfloorz
                                    {
                                        getp[].posz temp4
                                        shiftr temp2 1
                                        clamp temp2 0 1536
                                        ifg temp2 GRAVITATIONALCONSTANT
                                        {
                                            ifp pducking
                                            {
                                                add temp2 GRAVITATIONALCONSTANT
                                                shiftl temp2 2
                                            }
                                            sub temp4 temp2
                                        }
                                        setp[].posz temp4
                                    }
                                    set temp4 THISACTOR
                                    setu .vm_sprite player.i
                                    ife player[].jumping_counter 0
                                    {
                                        ifl player.poszv 0
                                        {
                                            setp .falling_counter 0
                                            setp .hard_landing 0
                                        }
                                    }
                                    iffloordistl 2
                                        nullop
                                    else
                                        setp .jumping_toggle 1
                                    setu .vm_sprite temp4
                                }
                                else ifn temp THISACTOR
                                {
                                    geta[temp].zvel temp3
                                    sub temp3 temp2
                                    seta[temp].zvel temp3
                                    ssp temp CLIPMASK0
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    else ifand sprite[].cstat 16
    {
        ife st_do_once 0
        {
            set st_do_once tilesizx[sprite[].picnum]
            mul st_do_once sprite[].xrepeat
            shiftr st_do_once 2
            
            set temp4 tilesizy[sprite[].picnum]
            shiftl temp4 2
            mul temp4 sprite[].yrepeat
            set moveable_ocd temp4
            shiftr moveable_ocd 1
            set moveable_y sprite[].z
            sub moveable_y temp4
            set moveable_oy sprite[].z
            set se_ang st_do_once
            shiftr se_ang 2
            clamp se_ang 16 512
        }
        
        // player
        getp[].i temp
        ldist temp2 THISACTOR temp
        ifand se_xvel 1
        {
            ifn sprite[temp].sectnum sprite[].sectnum
                set temp2 se_hitag

        }
        ifl temp2 se_hitag
        {
            set temp6 se_ang
            set temp3 temp2
            shiftr temp3 10
            ife temp6 0
                set temp6 1
            ife temp3 0
                set temp3 1
            div temp6 temp3
            set temp3 st_do_once
            shiftr temp3 1
            ifl temp2 temp3
                shiftl temp6 1
            clamp temp6 10 512
            sub temp2 se_hitag
            abs temp2
            set temp3 temp2
            ifl temp3 1
                set temp3 1
            mul temp3 100
            div temp3 se_hitag
            set temp7 se_lotag
            mul temp7 temp3
            ifn temp7 0
                div temp7 100
            
            getp[].i temp3
            ifle player[].posz moveable_oy ifge sprite[temp3].z moveable_y
            {
                geta[].z temp4
                sub temp4 moveable_ocd
                seta[].z temp4
                ifp pducking
                {
                    geta[temp].z temp5
                    seta[temp].z player[].posz
                }
                canseespr THISACTOR temp temp2
                ifp pducking
                    seta[temp].z temp5
                add temp4 moveable_ocd
                seta[].z temp4
                ife temp2 1
                {
                    set temp5 0
                    set att_target player[].i
                    state angle_to_target
                    ifl att_return temp6
                        set temp5 1
                    else
                    {
                        geta[].ang temp2
                        add temp2 1024
                        and temp2 2047
                        seta[].ang temp2
                        set att_target player[].i
                        state angle_to_target
                        geta[].ang temp2
                        add temp2 1024
                        and temp2 2047
                        seta[].ang temp2
                        ifl att_return temp6
                            set temp5 1
                    }
                    ife temp5 1
                    {
                        set move_v temp7
                        state move_actor
                        shiftl move_xv 12
                        shiftl move_yv 12
                        add move_xv player[].posxv 
                        add move_yv player[].posyv 
                        setp[].posxv move_xv
                        setp[].posyv move_yv
                        ifn se_zvel 0
                        {
                            ifn temp7 0
                            {
                                set temp5 se_lotag
                                div temp5 temp7
                                set temp4 se_zvel
                                ife temp5 0
                                    set temp5 1
                                div temp4 temp5
                                getp .poszv temp5
                                add temp5 temp4
                                setp .poszv temp5
                                
                                set temp6 THISACTOR
                                setu .vm_sprite player.i
                                iffloordistl 4
                                {
                                    getp .posz temp5
                                    add temp5 temp4
                                    setp .posz temp5
                                }
                                else
                                    setp .jumping_toggle 1
                                setu .vm_sprite temp6
                            }
                        }
                    }
                }
            }
        }
        // actors
        for temp8 range fanlist_num
        {
            set temp fanlist[temp8]
            geta[temp].htcgg temp4
            ife actorvar[temp].actor_moveable 1
                    set temp4 1
            ifand tiledata[sprite[temp].picnum].gameflags 32
                set temp4 1
            ife sprite[temp].picnum P_BOWLINGBOMB
                set temp4 1
            ife sprite[temp].picnum A_RIBBON
                set temp4 1
            ife sprite[temp].picnum P_GRENADE
                set temp4 1
            ife temp4 1
            {
                ldist temp2 THISACTOR temp
                ifand se_xvel 1
                {
                    ifn sprite[temp].sectnum sprite[].sectnum
                        set temp2 se_hitag
                }
                ifl temp2 se_hitag
                {
                    set temp6 se_ang
                    set temp3 temp2
                    shiftr temp3 10
                    ife temp6 0
                        set temp6 1
                    ife temp3 0
                        set temp3 1
                    div temp6 temp3
                    set temp3 st_do_once
                    shiftr temp3 1
                    ifl temp2 temp3
                        shiftl temp6 1
                    clamp temp6 10 512
                    sub temp2 se_hitag
                    abs temp2
                    set temp3 temp2
                    ifl temp3 1
                        set temp3 1
                    mul temp3 100
                    div temp3 se_hitag
                    set temp7 se_lotag
                    mul temp7 temp3
                    ifn temp7 0
                        div temp7 100

                    set temp4 tilesizy[sprite[temp].picnum]
                    shiftl temp4 2
                    mul temp4 sprite[temp].yrepeat
                    shiftr temp4 1
                    add temp4 moveable_oy
                    ifle sprite[temp].z temp4 ifge sprite[temp].z moveable_y
                    {
                        geta[].z temp4
                        sub temp4 moveable_ocd
                        seta[].z temp4
                        canseespr THISACTOR temp temp2
                        add temp4 moveable_ocd
                        seta[].z temp4
                        ife temp2 1
                        {
                            set temp5 0
                            set att_target temp
                            state angle_to_target
                            ifl att_return temp6
                                set temp5 1
                            else
                            {
                                geta[].ang temp2
                                add temp2 1024
                                and temp2 2047
                                seta[].ang temp2
                                set att_target temp
                                state angle_to_target
                                geta[].ang temp2
                                add temp2 1024
                                and temp2 2047
                                seta[].ang temp2
                                ifl att_return temp6
                                    set temp5 1
                            }
                            ife temp5 1
                            {
                                ife sprite[temp].picnum A_RIBBON
                                    setav[temp].counter3 temp7
                                else
                                {
                                    set move_v temp7
                                    state move_actor
                                    movesprite temp move_xv move_yv 0 CLIPMASK0 temp5
                                    ife actorvar[temp].actor_moveable 1
                                        setav[temp].prop_fall 1
                                    ifn se_zvel 0
                                    {
                                        ifn temp7 0
                                        {
                                            set temp5 se_lotag
                                            div temp5 temp7
                                            set temp4 se_zvel
                                            ife temp5 0
                                                set temp5 1
                                            div temp4 temp5
                                            shiftl temp4 3
                                            movesprite temp 0 0 temp4 CLIPMASK0 temp5
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
ends
useractor notenemy A_BIGASSFAN 0 AC_BAFAN
    state bigassfan_code
enda
useractor notenemy A_BIGASSFAN_BLOODY 0 AC_BAFAN
    state bigassfan_code
enda

action AC_RIBBON_STILL      1 1 1 1 1
action AC_RIBBON_MOVEUP     1 3 1 1 8
action AC_RIBBON_BLOWING    4 3 1 1 4
action AC_RIBBON_MOVEDN     7 3 1 1 8
var ribbon_lastframe 0 2
var ribbon_lastaction 0 2
useractor notenemy A_RIBBON 0 AC_RIBBON_STILL
    ife st_do_once 0
    {
        set st_do_once 1
        ifand sprite.cstat 16
        {
            ifand sprite.cstat 2
                cstat 146
            else
                cstat 144
        }
        else
        {
            ifand sprite.cstat 2
                cstat 130
            else
                cstat 128
        }
    }

    ifl counter2 counter3
    {
        ifaction AC_RIBBON_STILL
        {
            ife counter 0
            {
                set counter 1
                resetactioncount
            }
            ifactioncount 32
                action AC_RIBBON_MOVEUP
        }
        else ifaction AC_RIBBON_MOVEUP
        {
            ifactioncount 3
                action AC_RIBBON_BLOWING
        }
        else ifaction AC_RIBBON_BLOWING
            nullop
        else ifaction AC_RIBBON_MOVEUP
            nullop
        else
            action AC_RIBBON_MOVEUP
    }
    else ifg counter2 counter3
    {
        ifaction AC_RIBBON_STILL
            nullop
        else ifaction AC_RIBBON_MOVEDN
        {
            ifactioncount 3
                action AC_RIBBON_STILL
        }
        else
        {
            ife counter 1
            {
                set counter 0
                resetactioncount
            }
            ifactioncount 5
                action AC_RIBBON_MOVEDN
        }
    }
    else
    {
        ifaction AC_RIBBON_MOVEDN
        {
            ifg counter3 0
                action AC_RIBBON_MOVEUP
            else
                ifactioncount 3
                    action AC_RIBBON_STILL
        }
        else ifaction AC_RIBBON_MOVEUP
        {
            ife counter3 0
                action AC_RIBBON_MOVEDN
            else ifactioncount 3
                action AC_RIBBON_BLOWING
        }
        else ifaction AC_RIBBON_BLOWING
        {
            ife counter3 0
                action AC_RIBBON_MOVEDN
        }
        else ifaction AC_RIBBON_STILL
        {
            ifg counter3 0
            {
                ifge counter3 counter2
                {
                    ifactioncount 64
                        action AC_RIBBON_MOVEUP
                }
                else
                    resetactioncount
            }
        }
    }
    set counter2 counter3
    sub counter3 1
    clamp counter3 0 65536
enda
action AC_RIBBON_BLOW_DISPLAY    0 3 1 1 4
useractor notenemy A_RIBBON_BLOW 0 AC_RIBBON_BLOW_DISPLAY
    ife st_do_once 0
    {
        set st_do_once 1
        ifand sprite.cstat 16
        {
            ifand sprite.cstat 2
                cstat 146
            else
                cstat 144
        }
        else
        {
            ifand sprite.cstat 2
                cstat 130
            else
                cstat 128
        }
    }
enda

action AC_SAW_STOP 0 1 1 1 1
action AC_SAW_SPIN 0 4 1 1 1

eventloadactor A_BIGASSSAW
    geta .lotag se_lotag
    seta .lotag 0
    geta .hitag se_hitag
    seta .hitag 0
    geta .xvel se_xvel
    seta .xvel 0
enda

eventloadactor A_BIGASSSAW_BLOODY
    geta .lotag se_lotag
    seta .lotag 0
    geta .hitag se_hitag
    seta .hitag 0
    geta .xvel se_xvel
    seta .xvel 0
enda

defstate bigasssaw_code_compare
    set att_target temp
    state angle_to_target
    ifl att_return 512
    {
        sub att_return 1023
        abs att_return
    }
    
    div att_return 320
    clamp att_return 1 65536
    ldist temp2 temp THISACTOR
    clamp temp2 1 65536
    mul temp2 att_return
    ifl temp2 st_do_once
    {
        geta[temp].z temp2
        ifle temp2 sprite.z
        {
            set temp3 sprite.z
            sub temp3 counter
            ifge temp2 temp3
            {
                rand temp2 4
                add temp2 6
                seta[temp].htextra temp2
                seta[temp].htpicnum EXPLOSION
                set face_target temp
                state face_actor
                seta[temp].htang face_return
                ifactor A_BIGASSSAW
                    cactor A_BIGASSSAW_BLOODY
            }
        }
    }   
ends

defstate bigasssaw_code
    ife st_do_once 0
    {
        ifspritepal 9
            action AC_SAW_STOP
        spritepal 0
        set st_do_once tilesizx[sprite.picnum]
        add st_do_once sprite.clipdist
        mul st_do_once sprite.xrepeat
        shiftr st_do_once 3
        
        set counter tilesizy[sprite.picnum]
        shiftl counter 2
        mul counter sprite[].yrepeat
    }
    ifg se_lotag 0
    {
        ife activateshit[se_lotag] 1
        {
            ifaction AC_SAW_SPIN
                action AC_SAW_STOP
            else
                action AC_SAW_SPIN
        }
    }
    ifaction AC_SAW_STOP
        break
    ifand se_xvel 1
    {
        for itervar range num_flag32
        {
            set temp gameflag32[itervar]
            state bigasssaw_code_compare
        }
        ifn userdef.god 1
        {
            set temp player.i
            ifg sprite[temp].extra 0
                state bigasssaw_code_compare
        }
        break
    }
    
    for temp spritesofsector sprite.sectnum
    {
        ifg sprite[temp].extra 0
        {
            ifand tiledata[sprite[temp].picnum].gameflags 32
            {
               state bigasssaw_code_compare
            }
            else ife sprite[temp].picnum APLAYER
            {
                ife userdef.god 1
                {
                    ife temp player.i
                        nullop
                    else
                        state bigasssaw_code_compare
                }
                else
                    state bigasssaw_code_compare
            }
        }
    }
ends

useractor notenemy A_BIGASSSAW 0 AC_SAW_SPIN
    state bigasssaw_code
enda
useractor notenemy A_BIGASSSAW_BLOODY 0 AC_SAW_SPIN
    state bigasssaw_code
enda
// Skybox beam light

eventloadactor A_SKYBEAM
    set se_lotag sprite[].lotag // time
    set se_hitag sprite[].hitag // trigger
    set se_extra sprite[].xrepeat // xrepeat
    seta[].lotag 0
    seta[].hitag 0

    /* ifand sprite[].cstat 4 // change direction
        inv se_extra */
    rand counter se_lotag
enda

useractor notenemy A_SKYBEAM
    ife se_lotag 0 // prevents divide by zero
        break

    ifg se_hitag 0
    ife activateshit[se_hitag] 1
        xor light_toggle 1

    ife light_toggle 1
    {
      cstator 32768
      break
    }

    set temp counter
    shiftl temp 11
    div temp se_lotag

    sin temp temp
    mul temp se_extra
    shiftr temp 14

    set temp2 sprite[].cstat
    ifl temp 0
        or temp2 4
    else
    ifand temp2 4
        xor temp2 4
    ife temp 0
        or temp2 32768
    else
    ifand temp2 32768
        xor temp2 32768
    abs temp
    clamp temp 1 255
    seta[].xrepeat temp
    seta[].cstat temp2

    add counter 1
    mod counter se_lotag
enda

// Skybox lightning

define LIGHTNING_INTERVAL 128
define LIGHTNING_CONE 384

spritenoshade A_SKYLIGHTNING

var total_lightnings

appendevent EVENT_PRELEVEL
  set total_lightnings 0
endevent

eventloadactor A_SKYLIGHTNING
    setactor[].yrepeat 255
    cstat 32768

    set counter total_lightnings
    add total_lightnings 1
enda

useractor notenemy A_SKYLIGHTNING
    ifl sprite[].shade 32
    {
        set temp sprite[].shade
        add temp 4
        setactor[].shade temp
        ifspritepal 0
            spritepal 62
        else
            spritepal 0
        ifge temp 32
            cstat 32768
    }

    ifp palive
        set counter2 0
    else
    {
        ife counter2 0
        {
            stopsound S_AMB_THUNDER_FAR
            stopsound S_AMB_THUNDER_NEAR
            set counter2 1
        }
    }
    ifg se_extra 0
    {
        sub se_extra 1
        ife se_extra 0 ifp palive
        {
            espawn A_SOUND_EMITTER

            set temp2 sprite[].x
            set temp3 sprite[].y
            ifn cam_id -1
            {
                sub temp2 sprite[cam_id].x
                sub temp3 sprite[cam_id].y
                ifand actorvar[cam_id].se_extra 1
                {
                    // get the non-scaled distance
                    shiftl temp2 3
                    shiftl temp3 3
                }
            }
            add temp2 actorvar[cam_id].cam_xoff
            add temp3 actorvar[cam_id].cam_yoff
            sub temp2 player[].posx
            sub temp3 player[].posy
            calchypotenuse temp temp2 temp3
            shiftr temp 5 // sound fade distance factor

            ifg temp 8192
                set temp2 S_AMB_THUNDER_FAR
            else
                set temp2 S_AMB_THUNDER_NEAR
            seta[RETURN].lotag -temp2

            add temp player[].posx
            seta[RETURN].x temp

            seta[RETURN].y player[].posy
            seta[RETURN].z player[].posz
            seta[RETURN].sectnum player[].cursectnum
        }
        break
    }

    ife counter 0
    {
        rand temp LIGHTNING_INTERVAL
        ife temp 0
        {
            set temp2 sprite[].x
            set temp3 sprite[].y
            ifn cam_id -1
            {
                sub temp2 sprite[cam_id].x
                sub temp3 sprite[cam_id].y
                ifand actorvar[cam_id].se_extra 1
                {
                    // get the non-scaled distance
                    shiftl temp2 3
                    shiftl temp3 3
                }
            }
            add temp2 actorvar[cam_id].cam_xoff
            add temp3 actorvar[cam_id].cam_yoff
            sub temp2 player[].posx
            sub temp3 player[].posy

            // limit visible lightnings to a cone in front of the player
            getangle temp4 temp2 temp3
            getincangle temp4 temp4 player[].ang
            abs temp4
            ifl temp4 LIGHTNING_CONE
            {
                cstat 2
                ifrnd 128
                    cstator 4
                setactor[].shade 0
                rand temp2 192
                add temp2 63
                setactor[].xrepeat temp2

                // sound delay
                calchypotenuse se_extra temp2 temp3
                shiftr se_extra 12 // about 0.25 km/s
            }
        }
    }

    add counter 1
    mod counter total_lightnings
enda



action AC_ROACH_WALK 0 1 1 1 1
action AC_ROACH_IDLE 1 1 1 1 1
action AC_ROACH_TURN 0 1 1 1 1
action AC_ROACH_INVISIBLE 0 1 1 1 1
appendevent EVENT_SPAWN
    ifactor A_ROACH
    {
        sizeat 6 6
        cstat 32
    }
endevent
eventloadactor A_ROACH
    geta .hitag se_hitag
    seta .hitag 0
enda

spritenoshade A_ROACH
useractor notenemy A_ROACH 1 AC_ROACH_IDLE
    fall
    clipdist 5
    ifoutside
        seta[].shade sector[].ceilingshade
    else
        seta[].shade sector[].floorshade
    geta[].shade temp
    sub temp 6
    seta[].shade temp
    ife st_do_once 0
    {
        geta .z pivot_zoff
        geta .y pivot_yoff
        geta .x pivot_xoff
        geta .sectnum pivot_init
        set st_do_once 1
        ifn tp_owner -1
        {
            cstat 32768
            rand counter 255
            add counter 300
            inv counter
            action AC_ROACH_INVISIBLE
        }
    }
    ifaction AC_ROACH_IDLE
    {
        ifrnd 32
        {
            set counter 128
            ifrnd 127
                inv counter
            action AC_ROACH_TURN
        }
    }
    
    ifaction AC_ROACH_TURN
    {
        geta .ang temp
        add temp counter
        and temp 2047
        seta .ang temp
        shiftr counter 2
        set temp counter
        abs temp
        ifle temp 1
            action AC_ROACH_IDLE
        ifn tp_owner -1
        {
            ifrnd 8
            {
                set move_v 32
                state move_actor
                movesprite THISACTOR move_xv move_yv 0 0 temp
            }
            ldist temp2 THISACTOR tp_owner
            ifg temp2 actorvar[tp_owner].se_hitag
            {
                set face_target tp_owner
                state face_actor
                seta .ang face_return
                shiftr temp2 1
                set move_v temp2
                state move_actor
                movesprite THISACTOR move_xv move_yv 0 0 temp
            }
        }
    }
    ifaction AC_ROACH_WALK
        nullop
    else ifaction AC_ROACH_INVISIBLE
        nullop
    else ifrnd 64
    {
        ifpdistl 1024
        {
            ifcansee
            {
                action AC_ROACH_WALK
                set counter 0
            }
        }
    }
    
    ifaction AC_ROACH_WALK
    {
        geta .ang temp
        ifand sprite.htg_t 2 1
            add temp 64
        else
            sub temp 64
        seta .ang temp
        
        set move_v 64
        state move_actor
        movesprite THISACTOR move_xv move_yv 0 0 temp
        ifg temp 32767
            ife counter 0
            {
                ifrnd 32
                {
                    rand temp 511
                    ifrnd 127
                        inv temp
                    geta .ang temp2
                    add temp2 temp
                    and temp2 2047
                    seta .ang temp2
                }
                else
                    set counter 1
            }
        ifg counter 0
        {
            rand temp 64
            ifrnd 127
                inv temp
            geta .ang temp2
            add temp2 temp
            and temp2 2047
            seta .ang temp2
            add counter 1
            ifg counter 90
            {
                cstat 32768
                seta .z pivot_zoff
                seta .y pivot_yoff
                seta .x pivot_xoff
                seta .sectnum pivot_init
                action AC_ROACH_INVISIBLE
            }
        }
    }
    ifaction AC_ROACH_INVISIBLE
    {
        ifl counter 0
            add counter 1
        else ifactioncount 300
        {
            ifpdistl 2048
                nullop
            else
            {
                ifp pfacing
                    nullop
                else
                {
                    cstat 32
                    action AC_ROACH_IDLE
                }
            }
        }
    }
    else
    {
        ifn sprite[player.i].xvel 0
        {
            ifpdistl 512
            {
                ifrnd 64
                {
                    espawn A_GENERIC_BLOODSPLATTER
                    getflorzofslope sprite[].sectnum sprite[].x sprite[].y db_temp
                    seta[RETURN].z db_temp

                    seta[RETURN].pal 64
                    seta[RETURN].xrepeat 5
                    seta[RETURN].yrepeat 5

                    
                    setav[RETURN].splat_noblend 1
                    seta[RETURN].cstat 162
                    seta[RETURN].blend 129
                    rand db_temp 2047
                    seta[RETURN].ang db_temp
                    rand temp 32
                    add temp 512
                    setp .sound_pitch temp
                    sound S_GIBSPLODE02_Q
                    setp .sound_pitch 0
                    
                    redefinequote 115 gamestate.bin
                    readarrayfromfile gamestate 115
                    set temp gamestate[8]

                    add temp 1
                    setarray gamestate[8] temp
                    writearraytofile gamestate 115
                    or cheevo_tracker 8192
                    
                    ife se_hitag 1
                        killit
                    else
                    {
                        set counter -450
                        seta .z pivot_zoff
                        seta .y pivot_yoff
                        seta .x pivot_xoff
                        seta .sectnum pivot_init
                        cstat 32768
                        action AC_ROACH_INVISIBLE
                    }
                }
            }
        }
    }
enda

eventloadactor A_ROACH_CONTROLLER
    seta .cstat 32768
    geta .hitag se_hitag
    geta .lotag se_lotag
    clamp se_hitag 1 65536
    clamp se_lotag 1 65536
    seta .hitag 0
    seta .lotag 0
enda
useractor notenemy A_ROACH_CONTROLLER
    ifl st_do_once se_lotag
    {
        rand temp2 se_hitag
        rand temp3 2047
        espawn A_ROACH
        setav[RETURN].tp_owner THISACTOR
        seta[RETURN].ang temp3
        seta[RETURN].xvel temp2
        ssp RETURN 0
        add st_do_once 1
    }
enda
defstate treetopcode
    ife counter 0
    {
        set st_do_once -1
        set counter 1
    }
    ife counter 1
    {
        ifhitweapon
        {
            strength 1
            ifwasweapon EXPLOSION
            {
                set counter 2
                espawn A_FIRE2_SMG
                seta[RETURN].cstat 32768
                setav[RETURN].enemy_smg_flame_id THISACTOR
                set enemy_smg_flame_id RETURN
                set st_do_once RETURN
                set face_target player.i
                state face_actor
                add face_return 1024
                and face_return 2047
                seta[RETURN].ang face_return
                set move_v 20
                set move_override enemy_smg_flame_id
                state move_actor
                add move_xv sprite.x
                add move_yv sprite.y
                seta[RETURN].x move_xv
                seta[RETURN].y move_yv
                spritepal 2
            }
        }
    }
    else ife counter 2 ifn enemy_smg_flame_id -1
    {
        add smgf_counter 1
        clamp smgf_counter 0 65536
        set temp2 tilesizx[sprite.picnum]
        mul temp2 sprite.xrepeat
        shiftr temp2 2
        set temp3 tilesizx[sprite[enemy_smg_flame_id].picnum]
        mul temp3 sprite[enemy_smg_flame_id].xrepeat
        shiftr temp3 2
        ifg temp3 temp2
        {
            set temp3 temp2
            div temp3 tilesizx[sprite[enemy_smg_flame_id].picnum]
            shiftl temp3 2
            mul temp3 3
            shiftr temp3 1
            clamp temp3 1 255
            seta[enemy_smg_flame_id].xrepeat temp3
        }
        ife smgf_counter 900
        {
            setav[enemy_smg_flame_id].smgf_counter 90
            set enemy_smg_flame_id -1
            set counter2 3
        }
    }
    else ifge counter2 3
        ifl counter2 30
            add counter2 1
    ifn st_do_once -1 ifl counter2 30
    {
        ifrnd 1
            spawn A_SMOKE2
    }
ends
useractor notenemy 8172 1 AC_BASE state treetopcode enda
useractor notenemy 8174 1 AC_BASE state treetopcode enda
useractor notenemy 8176 1 AC_BASE state treetopcode enda
useractor notenemy 8178 1 AC_BASE state treetopcode enda
useractor notenemy 8180 1 AC_BASE state treetopcode enda

defstate yum_yum_gibs
    ifhitweapon
    {
        globalsound S_GIBSPLODE03
        globalsound S_IMPACT_HEADSHOT
        for temp6 range 3
        {
            geta[].ang temp2
            rand temp3 2047
            seta[].ang temp3
            rand temp3 2048
            shiftl temp3 1
            ifrnd 127
                inv temp3
            ezshoot temp3 P_BLOOD
            ifvarl sprite [].htg_t 8 5
                ifvarg sprite [].htg_t 8 0
                    seta[RETURN].shade sprite [].htg_t 8
            setthisprojectile[RETURN].trail A_GENERIC_BLOODSPLAT
            geta[RETURN].z temp3
            sub temp3 4096
            seta[RETURN].z temp3
            seta[RETURN].cstat 130
            seta[RETURN].xrepeat 4
            seta[RETURN].yrepeat 4
            seta[].ang temp2
        }
        // state generic_gibs
        ifdead
        {
            espawn A_GIBBER
            seta[RETURN].htextra 1000
            ifactor A_DAVE
                killit
            else
            {
                ifrnd 127
                    cstat 4
                else
                    cstat 0
                geta .xrepeat temp
                sub temp 8
                seta .xrepeat temp
                geta .yrepeat temp
                sub temp 8
                seta .yrepeat temp
                cactor A_GENERIC_GIB_SPLASH
            }
        }
    }
ends
useractor notenemy A_DAVE 20 AC_BASE
    fall
    sizeat 24 24
    cstat 257
    state yum_yum_gibs
enda

defstate gdf_body_basic
    switch sprite.picnum
        case A_GDF_BODY_1
        case A_GDF_BODY_2
        case A_GDF_BODY_3
        case A_GDF_BODY_4
        case A_GDF_BODY_5
        case A_GDF_BODY_6
        case A_GDF_BODY_7
        case A_GDF_BODY_11
            spritepal PAL_GDF
            fall
            break
        case A_CIV_BODY_1:
        case A_CIV_BODY_2:
        case A_CIV_BODY_3:
        case A_CIV_BODY_4:
        case A_CIV_BODY_5:
        case A_CIV_BODY_6:
        case A_CIV_BODY_7:
        case A_CIV_BODY_8:
        case A_CIV_BODY_9:
        case A_CIV_BODY_10:
        case A_CIV_BODY_11:
        case A_CIV_BODY_12:
        case A_CIV_BODY_13:
        case A_CIV_BODY_14:
        case A_CIV_BODY_15:
        case A_CIV_BODY_16:
        case A_CIV_BODY_17:
        case A_CIV_BODY_18:
        case A_CIV_BODY_19:
        case A_CIV_BODY_20:
        case A_CIV_BODY_21:
        case A_CIV_BODY_22:
        case A_CIV_BODY_23:
        case A_CIV_BODY_24:
        case A_CIV_BODY_25:
        case A_CIV_BODY_26:
        case A_CIV_BODY_27:
        case A_CIV_BODY_28:
            fall
            break
    endswitch

    sizeat 23 20
    cstat 256
    geta .htextra temp9
    geta .htang temp8
    ife st_do_once 0
    {
        geta[].htflags temp
        or temp 1
        ifand tiledata[sprite[].picnum].gameflags 1
            xor temp 1
        spriteflags temp
        set st_do_once 1
    }
    set temp4 tilesizy[sprite.picnum]
    shiftl temp4 2
    mul temp4 sprite.yrepeat
    shiftr temp4 1
    set temp7 sprite.z
    sub temp7 temp4
    geta .z temp5
    seta .z temp7
    state yum_yum_gibs
    seta .z temp5
    switch sprite.picnum
        case A_GDF_BODY_1
        case A_GDF_BODY_2
        case A_GDF_BODY_3
        case A_GDF_BODY_4
        case A_GDF_BODY_5
        case A_GDF_BODY_6
        case A_GDF_BODY_7
        case A_GDF_BODY_11
        case A_CIV_BODY_1:
        case A_CIV_BODY_2:
        case A_CIV_BODY_3:
        case A_CIV_BODY_4:
        case A_CIV_BODY_5:
        case A_CIV_BODY_6:
        case A_CIV_BODY_7:
        case A_CIV_BODY_8:
        case A_CIV_BODY_9:
        case A_CIV_BODY_10:
        case A_CIV_BODY_11:
        case A_CIV_BODY_12:
        case A_CIV_BODY_13:
        case A_CIV_BODY_14:
        case A_CIV_BODY_15:
        case A_CIV_BODY_16:
        case A_CIV_BODY_17:
        case A_CIV_BODY_18:
        case A_CIV_BODY_19:
        case A_CIV_BODY_20:
        case A_CIV_BODY_21:
        case A_CIV_BODY_22:
        case A_CIV_BODY_23:
        case A_CIV_BODY_24:
        case A_CIV_BODY_25:
        case A_CIV_BODY_26:
        case A_CIV_BODY_27:
        case A_CIV_BODY_28:
            ifg temp9 0
            {
                geta .ang temp
                seta .ang sprite.htang
                set move_v temp9
                shiftl move_v 1
                state move_actor
                add actor_moveable_xv move_xv
                add actor_moveable_yv move_yv
                geta .ang temp
            }
            state do_moveable
            break
    endswitch
    set actor_moveable 0
ends

defstate clear_prop_body_tags
    geta .hitag se_hitag
    geta .lotag se_lotag
    seta .hitag 0
    seta .lotag 0
ends
eventloadactor A_GDF_BODY_1 state clear_prop_body_tags enda
eventloadactor A_GDF_BODY_2 state clear_prop_body_tags enda
eventloadactor A_GDF_BODY_3 state clear_prop_body_tags enda
eventloadactor A_GDF_BODY_4 state clear_prop_body_tags enda
eventloadactor A_GDF_BODY_5 state clear_prop_body_tags enda
eventloadactor A_GDF_BODY_6 state clear_prop_body_tags enda
eventloadactor A_GDF_BODY_7 state clear_prop_body_tags enda
eventloadactor A_GDF_BODY_8 state clear_prop_body_tags enda
eventloadactor A_GDF_BODY_9 state clear_prop_body_tags enda
eventloadactor A_GDF_BODY_11 state clear_prop_body_tags enda
eventloadactor A_GDF_BODY_10 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_1 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_2 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_3 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_4 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_5 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_6 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_7 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_8 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_9 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_10 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_11 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_12 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_13 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_14 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_15 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_16 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_17 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_18 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_19 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_20 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_21 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_22 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_23 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_24 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_25 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_26 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_27 state clear_prop_body_tags enda
eventloadactor A_CIV_BODY_28 state clear_prop_body_tags enda

useractor notenemy A_GDF_BODY_1 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_GDF_BODY_2 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_GDF_BODY_3 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_GDF_BODY_4 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_GDF_BODY_5 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_GDF_BODY_6 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_GDF_BODY_7 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_GDF_BODY_8 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_GDF_BODY_9 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_GDF_BODY_11 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_GDF_BODY_10 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_1 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_2 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_3 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_4 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_5 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_6 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_7 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_8 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_9 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_10 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_11 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_12 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_13 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_14 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_15 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_16 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_17 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_18 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_19 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_20 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_21 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_22 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_23 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_24 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_25 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_26 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_27 20 AC_BASE state gdf_body_basic enda
useractor notenemy A_CIV_BODY_28 20 AC_BASE state gdf_body_basic enda

action AC_GIBSPLASH 0 4 1 1 1
useractor notenemy A_GENERIC_GIB_SPLASH 0 AC_BASE
    ifaction AC_GIBSPLASH
    {
        ifactioncount 4
        {
            action AC_BASE
            ifg se_lotag 0
                state switch_activate
            cactor A_GENERIC_GIB_BODY
        }
    }
    else
        action AC_GIBSPLASH
    fall
    ifand sprite.cstat 4
        cstat 4
    else
        cstat 0
    fall
enda

useractor notenemy A_GENERIC_GIB_BODY 0 AC_BASE
    fall
    ifand sprite.cstat 4
        cstat 4
    else
        cstat 0
    fall
    set actor_gib 2
    changespritestat THISACTOR STAT_STATIC_GIB
enda


action AC_STATIC_MB 0 1 9 1 1
action AC_STATIC_MT 0 1 16 1 1
useractor notenemy A_STATIC_MECHBOTTOM 0 AC_STATIC_MB changespritestat THISACTOR STAT_DEFAULT enda
useractor notenemy A_STATIC_MECHTOP 0 AC_STATIC_MT changespritestat THISACTOR STAT_DEFAULT enda

useractor notenemy A_STATIC_ARCHANGEL 0 AC_BASE5 changespritestat THISACTOR STAT_DEFAULT enda

appendevent EVENT_SPAWN
    switch sprite.picnum
        case 8294
        case 8297
        case 8702
        case 8705
        case 8708
        case 8711
        case 8714
        case 8717
        case 8720
        case 8723
        case 8726
        case 8730
        case 8733
        case 8736
        case 8777
        case 8978
        case 11097
        case 11099
        case 11101
        case 11125
        case 11127
        case 11135
        case 14079
            geta .hitag se_hitag
            ifg se_hitag 0
            {
                set actor_static 1
                geta .lotag se_lotag
                seta .hitag 0
                seta .lotag 0
                changespritestat THISACTOR STAT_TOGGLE_LIGHT
                set counter 1
            }
            break
        case 8295
        case 8298
        case 8703
        case 8706
        case 8709
        case 8712
        case 8715
        case 8718
        case 8721
        case 8724
        case 8727
        case 8731
        case 8734
        case 8737
        case 8778
        case 8979
        case 11098
        case 11100
        case 11102
        case 11126
        case 11128
        case 11136
        case 14080
            geta .hitag se_hitag
            ifg se_hitag 0
            {
                set actor_static 1
                geta .lotag se_lotag
                seta .hitag 0
                seta .lotag 0
                changespritestat THISACTOR STAT_TOGGLE_LIGHT
                set counter -1
            }
            break
        case 11076
            geta .hitag se_hitag
            ifg se_hitag 0
            {
                set actor_static 1
                geta .lotag se_lotag
                seta .hitag 0
                seta .lotag 0
                changespritestat THISACTOR STAT_TOGGLE_LIGHT
                set counter 20
            }
            break
        case 11096
            geta .hitag se_hitag
            ifg se_hitag 0
            {
                set actor_static 1
                geta .lotag se_lotag
                seta .hitag 0
                seta .lotag 0
                changespritestat THISACTOR STAT_TOGGLE_LIGHT
                set counter -20
            }
            break
        case A_ELEVATOR_OFF
        case A_ELEVATOR_HALT
        case A_ELEVATOR_G
        case A_ELEVATOR_O
        case A_ELEVATOR_L
        case A_ELEVATOR_H
        case A_ELEVATOR_UP
        case A_ELEVATOR_DOWN
            geta .lotag se_lotag
            ifg se_lotag 0
            {
                geta .hitag se_hitag
                ifg se_hitag 0
                    add counter 1

                
                ifg se_extra 0
                {
                    add counter 2

                    geta .xvel se_xvel
                    ifg se_xvel 0
                    {
                        add counter 2

                        geta .yvel se_yvel
                        ifg se_yvel 0
                        {
                            add counter 2

                            geta .zvel se_zvel
                            ifg se_zvel 0
                                add counter 2
                        }
                    }
                }
                seta .hitag 0
                seta .lotag 0
                changespritestat THISACTOR STAT_ELEVATORSIGN
            }
            break
    endswitch
endevent

eventloadactor A_STREET_LAMP_7_OFF
    geta .hitag se_hitag
    geta .lotag se_lotag
    seta .hitag 0
    seta .lotag 0
    set actor_static 1
enda
eventloadactor A_STREET_LAMP_7
    geta .hitag se_hitag
    geta .lotag se_lotag
    seta .hitag 0
    seta .lotag 0
    set actor_static 1
enda
useractor notenemy A_STREET_LAMP_7_OFF 1 AC_BASE
    ifg se_hitag 0
    {
        ife activateshit[se_hitag] 1
            cactor A_STREET_LAMP_7
    }
    ifg se_lotag 0
    {
        ifhitweapon
        {
            operateactivators se_lotag THISACTOR
            operatemasterswitches se_lotag
            operaterespawns se_lotag
            setarray preloadactivations[se_lotag] 1
            cactor A_STREET_LAMP_7_BROKE
            changespritestat THISACTOR STAT_DEFAULT
        }
    }
enda

useractor notenemy A_STREET_LAMP_7 1 AC_BASE
    ifg se_hitag 0
    {
        ife activateshit[se_hitag] 1
            cactor A_STREET_LAMP_7_OFF
    }
    ifg se_lotag 0
    {
        ifhitweapon
        {
            operateactivators se_lotag THISACTOR
            operatemasterswitches se_lotag
            operaterespawns se_lotag
            setarray preloadactivations[se_lotag] 1
            cactor A_STREET_LAMP_7_BROKE
            changespritestat THISACTOR STAT_DEFAULT
        }
    }
enda

appendevent EVENT_SPAWN
    switch sprite.picnum
        case A_CAGELIGHT_1_ON
        case A_CAGELIGHT_2_ON
        case A_CAGELIGHT_3_ON
        case A_CAGELIGHT_1_OFF
        case A_CAGELIGHT_2_OFF
        case A_CAGELIGHT_3_OFF
            geta .hitag se_hitag
            seta .hitag 0
            break
    endswitch
endevent

state cagelight_code
    cstator 256
    ife st_do_once 0
    {
        set st_do_once 1
        geta .picnum counter
    }
    ife activateshit[se_hitag] 1
    {
        set temp counter
        ifand temp 1
        {
            sub temp 1
            seta .picnum temp
            set counter temp
        }
        else
        {
            add temp 1
            seta .picnum temp
            set counter temp
        }
    }
    ifg counter2 0
    {
        sub counter2 1
        ifand counter 1
            nullop
        else ifrnd 127
        {
            set temp sprite.picnum
            ifand temp 1
            {
                sub temp 1
                seta .picnum temp
            }
            else
            {
                add temp 1
                seta .picnum temp
            }
        }
    }
    else
        seta .picnum counter
    ifhitweapon
    {
        strength 1
        set counter2 30
    }
ends
useractor notenemy A_CAGELIGHT_1_ON 1 state cagelight_code enda
useractor notenemy A_CAGELIGHT_1_OFF 1 state cagelight_code enda
useractor notenemy A_CAGELIGHT_2_ON 1 state cagelight_code enda
useractor notenemy A_CAGELIGHT_2_OFF 1 state cagelight_code enda
useractor notenemy A_CAGELIGHT_3_ON 1 state cagelight_code enda
useractor notenemy A_CAGELIGHT_3_OFF 1 state cagelight_code enda

appendevent EVENT_LOADACTOR
    switch sprite.picnum
        case A_ELEVATOR_OFF
        case A_ELEVATOR_HALT
        case A_ELEVATOR_G
        case A_ELEVATOR_O
        case A_ELEVATOR_L
        case A_ELEVATOR_H
        case A_ELEVATOR_UP
        case A_ELEVATOR_DOWN
            geta .owner tp_owner
            clamp tp_owner 0 65536
            geta .extra se_extra
            break
    endswitch
endevent
appendevent EVENT_WORLD
    for itervar sprofstat STAT_TOGGLE_LIGHT
    {
        setu .vm_sprite itervar
        ife activateshit[se_hitag] 1
        {
            geta .picnum temp
            add temp counter
            seta .picnum temp
            inv counter
        }
    }
    for itervar sprofstat STAT_ELEVATORSIGN
    {
        setu .vm_sprite itervar
        ife st_do_once 0
        {
            geta .picnum counter2
            set st_do_once 1
            ifand tp_owner 4
                set counter3 1
        }
        ife activateshit[se_lotag] 1
        {
            add counter3 1
            ifand tp_owner 1
            {
                set temp counter3
                mod temp 2
                ife temp 0
                    add counter3 1
            }
        }
        ifg counter3 counter
        {
            ifand tp_owner 2
                set counter3 1
            else
                set counter3 0
        }
        ifand counter3 1
        {
            switch counter3
                case 1
                    seta .picnum se_hitag
                    break
                case 3
                    seta .picnum se_extra
                    break
                case 5
                    seta .picnum se_xvel
                    break
                case 7
                    seta .picnum se_yvel
                    break
                case 9
                    seta .picnum se_zvel
                    break
            endswitch
        }
        else
            seta .picnum counter2
    }
endevent

action AC_BLIND_CLOSED 0 1 1 1 1
action AC_BLIND_CLOSING 1 1 1 1 1
action AC_BLIND_OPENING 1 1 1 1 1
action AC_BLIND_OPENED 2 1 1 1 1

defstate blind_change
    ifaction AC_BLIND_OPENED
        action AC_BLIND_CLOSING
    else ifaction AC_BLIND_CLOSING
        action AC_BLIND_OPENING
    else ifaction AC_BLIND_CLOSED
        action AC_BLIND_OPENING
    else ifaction AC_BLIND_OPENING
        action AC_BLIND_CLOSING
    ifg se_hitag 0
    {
        setp .sound_pitch 576
        sound S_SWITCH_BUTTON01
        sound S_STEP_FABRIC_JUMP1
        for itervar sprofstat STAT_ACTOR
        {
            switch sprite[itervar].picnum
                case A_BLIND_1_CLOSED
                case A_BLIND_2_CLOSED
                case A_BLIND_3_CLOSED
                case A_BLIND_1_OPENED
                case A_BLIND_2_OPENED
                case A_BLIND_3_OPENED
                    ife actorvar[itervar].se_hitag se_hitag
                    {
                        seta[itervar].htg_t 4 sprite.htg_t 4
                        ifn sprite[itervar].pal 77 ifn itervar THISACTOR
                        {
                            actorsound itervar S_SWITCH_BUTTON01
                            actorsound itervar S_STEP_FABRIC_JUMP1
                        }
                        set temp THISACTOR
                        setu .vm_sprite itervar
                        ifand se_xvel 2
                        {
                            ifand se_xvel 1
                                xor se_xvel 1
                            xor se_xvel 2
                        }
                        setu .vm_sprite temp
                    }
                    break
            endswitch
        }
        setp .sound_pitch 0
    }
    else
    {
        setp .sound_pitch 576
        sound S_SWITCH_BUTTON01
        sound S_STEP_FABRIC_JUMP1
        setp .sound_pitch 0
    }
ends

defstate blind_code
    ifactioncount 2
        stopactorsound THISACTOR S_SWITCH_BUTTON01

    ifspritepal 77
        nullop
    else
    {
        cstator 257
        cstator 512
        set actor_switch 1
    }
    ifaction AC_BLIND_CLOSING
        action AC_BLIND_CLOSED
    else ifaction AC_BLIND_OPENING
        action AC_BLIND_OPENED
    ife st_do_once 0
    {
        set st_do_once 1
        ifg se_hitag 0
        {
            ifg se_lotag 0
            {
                for itervar sprofstat STAT_ACTOR
                {
                    switch sprite[itervar].picnum
                        case A_BLIND_1_CLOSED
                        case A_BLIND_2_CLOSED
                        case A_BLIND_3_CLOSED
                        case A_BLIND_1_OPENED
                        case A_BLIND_2_OPENED
                        case A_BLIND_3_OPENED
                            ifn itervar THISACTOR
                                ife actorvar[itervar].se_hitag se_hitag
                                {
                                    setav[itervar].se_lotag -se_lotag
                                    setav[itervar].se_xvel se_xvel
                                }
                            break
                    endswitch
                }
            }
        }
    }
    ifaction AC_BLIND_OPENED
    {
        geta .cstat temp
        ifand temp 256
            xor temp 256
        seta .cstat temp
    }
    ifand se_xvel 1
        seta .htextra -1
    ifn se_lotag 0
    {
        ifg se_lotag 0
            ife activateshit[se_lotag] 1
                state blind_change
    }
    else ifhitspace
    {
        ifcount 2
            ifpdistl 1536
                ifcansee
                    ife actor_switch_usable 1
                        state blind_change
        resetcount
    }
    strength 1
    set actor_switch_usable 0
    ifhitweapon
    {
        action AC_BLIND_CLOSED
        geta .cstat temp
        ifand temp 256
            xor temp 256
        seta .cstat temp
        ifg se_hitag 0
        {
            for itervar sprofstat STAT_ACTOR
            {
                switch sprite[itervar].picnum
                    case A_BLIND_1_CLOSED
                    case A_BLIND_2_CLOSED
                    case A_BLIND_3_CLOSED
                    case A_BLIND_1_OPENED
                    case A_BLIND_2_OPENED
                    case A_BLIND_3_OPENED
                        ifn itervar THISACTOR ife actorvar[itervar].se_hitag se_hitag
                        {
                            seta[itervar].htg_t 4 sprite.htg_t 4
                            geta[itervar].picnum temp
                            sub temp 1
                            seta[itervar].picnum temp
                            geta[itervar].cstat temp4
                            ifand temp4 256
                                xor temp4 256
                            seta[itervar].cstat temp4
                        }
                        break
                endswitch
            }
        }
        geta .picnum temp
        sub temp 1
        seta .picnum temp
    }
ends

appendevent EVENT_LOADACTOR
    switch sprite.picnum
        case A_BLIND_1_CLOSED
        case A_BLIND_2_CLOSED
        case A_BLIND_3_CLOSED
            geta .cstat temp
            ifand temp 1
                xor temp 1
            ifand temp 256
                xor temp 256
            geta .cstat temp
        case A_BLIND_1_OPENED
        case A_BLIND_2_OPENED
        case A_BLIND_3_OPENED
            geta .lotag se_lotag
            geta .hitag se_hitag
            geta .xvel se_xvel
            seta .xvel 0
            seta .lotag 0
            seta .hitag 0
            break
    endswitch
endevent

useractor notenemy A_BLIND_1_CLOSED 1 AC_BLIND_CLOSED state blind_code enda
useractor notenemy A_BLIND_2_CLOSED 1 AC_BLIND_CLOSED state blind_code enda
useractor notenemy A_BLIND_3_CLOSED 1 AC_BLIND_CLOSED state blind_code enda

useractor notenemy A_BLIND_1_OPENED 1 AC_BLIND_OPENED cactor A_BLIND_1_CLOSED enda
useractor notenemy A_BLIND_2_OPENED 1 AC_BLIND_OPENED cactor A_BLIND_2_CLOSED enda
useractor notenemy A_BLIND_3_OPENED 1 AC_BLIND_OPENED cactor A_BLIND_3_CLOSED enda


useractor notenemy A_BLIND_1_BROKE 0 AC_BLIND_CLOSED changespritestat THISACTOR STAT_DEFAULT enda
useractor notenemy A_BLIND_2_BROKE 0 AC_BLIND_CLOSED changespritestat THISACTOR STAT_DEFAULT enda
useractor notenemy A_BLIND_3_BROKE 0 AC_BLIND_CLOSED changespritestat THISACTOR STAT_DEFAULT enda


var last_paper -1 2
useractor notenemy A_TOILET_PAPER_SCRAP
    set actor_switch 1
    geta .cstat temp
    ifand temp 32768
    {
        ifcount 10
        {
            xor temp 32768
            seta .cstat temp
        }
        else
            break
    }
    ifhitspace
    {
        ifpdistl 1536 ife actor_switch_usable 1 ife switch_wait 0
        {
            setp .sound_pitch 480
            sound S_STEP_FABRIC_JUMP1
            setp .sound_pitch 0
            espawn A_NAPKIN_PAPER
            setav[RETURN].last_paper THISACTOR
            seta[RETURN].shade sprite.shade
            set temp sprite.xrepeat
            shiftr temp 3
            add temp sprite.xrepeat
            clamp temp 0 255
            seta[RETURN].xrepeat temp
            seta[RETURN].yrepeat sprite.yrepeat
            seta[RETURN].cstat sprite.cstat
            seta[RETURN].pal sprite.pal
            cstator 32768
            ife last_paper -1
                set last_paper RETURN
            else
            {
                setav[last_paper].counter 15
                set last_paper RETURN
            }
            resetcount
        }
        set actor_switch_usable 0
        set switch_wait 1
    }
    else
        set switch_wait 0
    set actor_switch_usable 0
enda

useractor notenemy A_PAPER_TOWEL_SCRAP
    set actor_switch 1
    geta .cstat temp
    ifand temp 32768
    {
        ifcount 9
            stopactorsound THISACTOR S_VENDING_DISPENSE
        ifcount 10
        {
            xor temp 32768
            seta .cstat temp
        }
        else
            break
    }
    ifhitspace
    {
        ifpdistl 1536 ife actor_switch_usable 1 ife switch_wait 0
        {
            setp .sound_pitch 480
            sound S_VENDING_DISPENSE
            setp .sound_pitch 320
            sound S_STEP_FABRIC_JUMP1
            setp .sound_pitch 0
            espawn A_NAPKIN_PAPER
            setav[RETURN].last_paper THISACTOR
            seta[RETURN].shade sprite.shade
            set temp sprite.xrepeat
            shiftr temp 3
            add temp sprite.xrepeat
            mul temp 3
            shiftr temp 1
            clamp temp 0 255
            seta[RETURN].xrepeat temp
            seta[RETURN].yrepeat sprite.yrepeat
            seta[RETURN].cstat sprite.cstat
            ifspritepal 0
                seta[RETURN].pal 2
            else
                seta[RETURN].pal sprite.pal
            cstator 32768
            ife last_paper -1
                set last_paper RETURN
            else
            {
                setav[last_paper].counter 15
                set last_paper RETURN
            }
            resetcount
        }
        set actor_switch_usable 0
        set switch_wait 1
    }
    else
        set switch_wait 0
    set actor_switch_usable 0
enda

useractor notenemy A_NAPKIN_PAPER
    ifn last_paper -1
    {
        ifg counter 0
        {
            sub counter 1            
            set temp counter
            shiftl temp 1
            add temp 1
            sub temp 30
            inv temp
            clamp temp 0 30
            seta .blend temp
            cstator 2
            ife counter 1
            {
                killit
                break
            }
        }
        fall
        ifcount 2
            ife st_do_once 0
            {
                rand temp 128
                ifrnd 127
                    inv temp
                add temp sprite.ang
                and temp 2047
                seta .ang temp
                add st_do_once 1
            }
        iffloordistl 1
        {
            ife st_do_once 1
            {
                cstator 32
                ifand sprite.cstat 16
                {
                    geta .cstat temp
                    xor temp 16
                    seta .cstat temp
                }
                add st_do_once 1
            }
        }
    }
    else
        changespritestat THISACTOR STAT_DEFAULT
enda

action AC_CAMERA_1 0 1 8 1 1 1
action AC_CAMERA_2 8 1 9 1 1
actor A_CAMERA 10 AC_CAMERA_1 enda
actor A_CAMERA_2 10 AC_CAMERA_2 enda
eventloadactor A_CAMERA_2
    cactor A_CAMERA
    set counter3 1
enda

appendevent EVENT_SPAWN
    ifactor A_CAMERA
        ife counter3 1
            action AC_CAMERA_2
endevent

action AC_TARGET_FALL 0 1 1 1 1
var target_game
var target_killed
var target_tics
var target_tics_best
var reset_target_top
eventloadactor A_PRACTICE_TARGET
    geta .lotag se_lotag
    seta .lotag 0
    geta .hitag se_hitag
    seta .hitag 0
    geta .yvel se_yvel
    seta .yvel 0
enda
appendevent EVENT_PRELEVEL
    set target_game 0
    set target_killed 0
    set target_tics 0
endevent
useractor notenemy A_PRACTICE_TARGET 1 AC_BASE
    ife counter 1
    {
        ifl target_game 0
            add target_game 1
        else ifg target_game 0
            add target_tics 1
        ife target_game 0
        {
            set counter 0
            set target_killed 0
            set target_tics 0
        }
    }
    ifand sprite.cstat 32
    {
        ifaction AC_BASE
            break
    }
    else
        cstator 16
    sleeptime 300
    cstator 257
    ife st_do_once 0
    {
        set st_do_once tilesizy[sprite.picnum]
        mul st_do_once sprite.yrepeat
        shiftr st_do_once 3
    }

    ifg se_yvel 0
        ife activateshit[se_yvel] 1
            set reset_target_top 1
    ifg se_lotag 0
        ife activateshit[se_lotag] 1
        {
            set counter 0
            set target_killed 0
            set target_tics 0
            set target_game 0

            ifaction AC_TARGET_FALL
            {
                setp .sound_pitch 128
                globalsound S_SWITCH_CARDLOCKED
                setp .sound_pitch 256
                globalsound S_DOOR_AUTO_LOCKED
                setp .sound_pitch 0
            }
            action AC_BASE
        }
    geta .cstat temp
    ifaction AC_TARGET_FALL ifand temp 16
    {
        set move_v -st_do_once
        state move_actor
        add move_xv sprite.x
        add move_yv sprite.y
        seta .x move_xv
        seta .y move_yv
        or temp 32
        xor temp 16
        geta .ang temp2
        add temp2 1024
        and temp2 2047
        seta .ang temp2
    }
    else ifaction AC_BASE ifand temp 32
    {
        geta .ang temp2
        add temp2 1024
        and temp2 2047
        seta .ang temp2
        set move_v st_do_once
        state move_actor
        add move_xv sprite.x
        add move_yv sprite.y
        seta .x move_xv
        seta .y move_yv
        xor temp 32
        or temp 16
    }
    seta .cstat temp

    ifhitweapon
    {
        ifg se_lotag 0
        {
            ife target_game 0
            {
                for temp sprofstat STAT_ACTOR
                {
                    ife sprite[temp].picnum A_PRACTICE_TARGET
                        ifg actorvar[temp].se_lotag 0
                            add target_game 1
                }
                setp[].sound_pitch 128
                globalsound S_AMB_BUZZER
                setp[].sound_pitch 0
                set counter 1
                set target_tics 30
            }
            ifaction AC_BASE
                add target_killed 1
            ife target_killed target_game
            {
                setp[].sound_pitch 128
                globalsound S_AMB_BUZZER
                setp[].sound_pitch 0
                set target_game -120
                
                redefinequote 115 gamestate.bin
                readarrayfromfile gamestate 115
                set target_tics_best gamestate[2]
                ifl target_tics_best 30
                {
                    set target_tics_best target_tics
                    setarray gamestate[2] target_tics_best
                    writearraytofile gamestate 115
                }
                ifg target_tics_best target_tics
                {
                    set target_tics_best target_tics
                    setarray gamestate[2] target_tics_best
                    writearraytofile gamestate 115
                }
                ifg se_hitag 0
                {
                    operateactivators se_hitag THISACTOR
                    operatemasterswitches se_hitag
                    operaterespawns se_hitag
                    setarray preloadactivations[se_hitag] 1
                }
            }
        }
        strength 1
        
        action AC_TARGET_FALL
    }
enda

appendevent EVENT_DISPLAYREST
    ifg target_game 0
    {
        state ResetText
        set hudx_y 3
        set hudx_x 624
        set hudx_scale 24576
        set hudx_pal 6
        set hudx_tilenum BIGALPHANUM
        set hudx_orientation 528
        set hudx_quote 190
        set hudx_txtflags 1
        redefinequote 190 %ld ^8:TARGETS DOWN
        qsprintf 190 190 target_killed
        
        state DrawText640x480Hud
        
        add hudx_y 16
        set temp target_game
        sub temp target_killed
        redefinequote 190 %ld ^8:TARGETS LEFT
        qsprintf 190 190 temp
        
        state DrawText640x480Hud
    }
    else ifl target_game 0
    {
        set temp target_game
        and temp 3
        ifle target_game 30
            add temp 1
        ifn temp 0
        {
            state ResetText
            set hudx_y 3
            set hudx_x 624
            set hudx_scale 32768
            set hudx_pal 6
            set hudx_tilenum BIGALPHANUM
            set hudx_orientation 528
            set hudx_quote 190
            set hudx_txtflags 1
            redefinequote 190 %ld / %ld ^8:NICE ONE!
            qsprintf 190 190 target_killed target_killed
            state DrawText640x480Hud
            
            
            set temp target_game
            and temp 7
            ifn temp 0
            {
                set hudx_scale 24576
                add hudx_y 24
                redefinequote 190 ^9RUN TIMES
                state DrawText640x480Hud
                set temp7 target_tics
                div temp7 30
                set temp2 temp7
                div temp2 10
                mod temp7 10
                mod temp2 6

                set temp3 target_tics
                div temp3 1800


                add hudx_y 16
                set temp4 target_tics
                set temp5 target_tics_best
                div temp4 30
                div temp5 30
                ifle temp4 temp5
                {
                    ifn temp 3
                    {
                        set hudx_pal 10
                        redefinequote 190 %ld:%ld%ld :THIS TIME
                        qsprintf 190 190 temp3 temp2 temp7
                        state DrawText640x480Hud
                    }
                }
                else
                {
                    redefinequote 190 %ld:%ld%ld :THIS TIME
                    qsprintf 190 190 temp3 temp2 temp7
                    state DrawText640x480Hud
                }
                set temp7 target_tics_best
                div temp7 30
                set temp2 temp7
                div temp2 10
                mod temp7 10
                mod temp2 6

                set temp3 target_tics_best
                div temp3 1800
                
                add hudx_y 16
                set hudx_pal 1
                redefinequote 190 %ld:%ld%ld :BEST TIME
                qsprintf 190 190 temp3 temp2 temp7
                state DrawText640x480Hud
            }
        }
    }
endevent

appendevent EVENT_WORLD
    ifn reset_target_top 0
    {
        redefinequote 115 gamestate.bin
        readarrayfromfile gamestate 115
        set target_tics_best 0
        setarray gamestate[2] target_tics_best
        writearraytofile gamestate 115
        redefinequote 11 Successfully reset best time!
        echo 11
        set reset_target_top 0
    }
endevent

eventloadactor A_PIZZA_LID
    geta .hitag se_hitag
    clamp se_hitag 0 8
    geta .lotag se_lotag
    seta .hitag 0
    seta .lotag 0
enda

useractor notenemy A_PIZZA_LID
    ifand sprite.cstat 16
    {
        changespritestat THISACTOR STAT_DEFAULT
        break
    }
    else ifand sprite.cstat 32
    {
        ife se_hitag 8
        {
            changespritestat THISACTOR STAT_DEFAULT
            break
        }
        else ifn sector.floorpicnum 9929 // pizza bottom
        {
            changespritestat THISACTOR STAT_DEFAULT
            break
        }
    }
    else
    {
        changespritestat THISACTOR STAT_DEFAULT
        break
    }
    set actor_switch 1
    set actor_static 1 // this is a lie but you will appreciate it later
    cstat 544
    ife st_do_once 0
    {
        set st_do_once tilesizy[sprite.picnum]
        mul st_do_once sprite.yrepeat
        shiftr st_do_once 3
    }
    ifhitspace
    {
        ifcount 2
            ifpdistl 1536
                ifcansee
                    ife actor_switch_usable 1
                    {
                        setp .sound_pitch -480
                        sound S_BBOMB_THROW
                        sound S_SWITCH_BUTTON02
                        sound S_STEP_FABRIC_WALK3
                        setp .sound_pitch -111
                        sound S_FANFARE
                        setp .sound_pitch 0
                        // prep
                        geta .ang temp2
                        add temp2 1024
                        and temp2 2047
                        geta .shade temp3
                        geta .xrepeat temp4
                        geta .yrepeat temp5
                        ifn se_hitag 0
                        {
                            ife se_hitag 7
                            {
                                rand se_hitag 5
                                add se_hitag I_PIZZA_6
                                espawn se_hitag
                                set temp6 sprite.z
                                add temp6 512
                                seta[RETURN].htbposz temp6
                                seta[RETURN].z temp6
                                seta[RETURN].cstat 32
                                seta[RETURN].xrepeat 21
                                seta[RETURN].yrepeat 21
                                seta[RETURN].shade sector.floorshade
                                seta[RETURN].picnum I_PIZZA_6
                                setav[RETURN].counter2 10
                            }
                            else
                            {
                                sub se_hitag 6
                                inv se_hitag
                                add se_hitag I_PIZZA_6
                                espawn se_hitag
                                set temp6 sprite.z
                                add temp6 512
                                seta[RETURN].htbposz temp6
                                seta[RETURN].z temp6
                                seta[RETURN].cstat 32
                                seta[RETURN].xrepeat 21
                                seta[RETURN].yrepeat 21
                                seta[RETURN].shade sector.floorshade
                                seta[RETURN].picnum I_PIZZA_6
                                setav[RETURN].counter2 10
                            }
                        }

                        // top
                        set move_v st_do_once
                        state move_actor
                        add move_xv sprite.x
                        add move_yv sprite.y
                        seta .x move_xv
                        seta .y move_yv
                        seta .cstat 92
                        
                        // underside
                        xor temp 12
                        espawn 9929
                        seta[RETURN].xrepeat temp4
                        seta[RETURN].yrepeat temp5
                        seta[RETURN].cstat 80
                        seta[RETURN].shade temp3
                        seta[RETURN].ang temp2
                        seta[RETURN].sectnum sprite.sectnum
                        seta[RETURN].htbposx sprite[RETURN].x
                        seta[RETURN].htbposy sprite[RETURN].y
                        seta[RETURN].htbposz sprite[RETURN].z
                        
                        
                        // lip
                        espawn 6413
                        sub temp3 5
                        clamp temp3 -127 127
                        
                        set temp tilesizy[sprite.picnum]
                        shiftl temp 2
                        mul temp sprite.yrepeat
                        inv temp
                        add temp sprite[RETURN].z
                        seta[RETURN].z temp
                        shiftl temp4 1
                        shiftr temp5 1
                        seta[RETURN].xrepeat temp4
                        seta[RETURN].yrepeat temp5
                        seta[RETURN].cstat 32
                        seta[RETURN].shade temp3
                        seta[RETURN].ang temp2
                        seta[RETURN].pal 3
                        
                        shiftr st_do_once 4
                        set move_v st_do_once
                        state move_actor
                        inv move_xv
                        inv move_yv
                        add move_xv sprite[RETURN].x
                        add move_yv sprite[RETURN].y
                        seta[RETURN].x move_xv
                        seta[RETURN].y move_yv
                        seta[RETURN].sectnum sprite.sectnum
                        seta[RETURN].htbposx sprite[RETURN].x
                        seta[RETURN].htbposy sprite[RETURN].y
                        seta[RETURN].htbposz sprite[RETURN].z
                        changespritestat THISACTOR STAT_DEFAULT
                    }
        resetcount
    }
    set actor_switch_usable 0
enda


